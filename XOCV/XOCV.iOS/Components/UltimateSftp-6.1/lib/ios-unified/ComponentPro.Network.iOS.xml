<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Network.iOS</name>
    </assembly>
    <members>
        <member name="M:c_YLA.c_HNA">
            <summary>
            Gets a list of supported encoding names.
            </summary>
            <returns>List of encoding names.</returns>
        </member>
        <member name="M:c_YLA.c_JNA(System.String)">
            <summary>
            Returns the encoding associated with the specified code page name.
            </summary>
            <param name="name">Code page name.</param>
            <returns>Encoding.</returns>
        </member>
        <member name="M:c_YLA.c_JNA(System.Int32)">
            <summary>
            Returns the encoding associated with the specified code page.
            </summary>
            <param name="codePage">Code page.</param>
            <returns>Encoding.</returns>
        </member>
        <member name="P:c_YLA.c_LNA">
            <summary>
            ASCII encoding.
            </summary>
        </member>
        <member name="P:c_YLA.c_NNA">
            <summary>
            Default encoding.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.CommandResponseEventHandler">
            <summary>
            Represents the method that will handle the <b>CommandResponse</b> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs" /> that contains the event data.</param>
            <example source="$ComponentPro.Ftp\GeneralEvents\CommandResponse,$ComponentPro.Sftp\GeneralEvents\CommandSentResponseRead"/>
        </member>
        <member name="T:ComponentPro.Net.CommandResponseEventArgs">
            <summary>
            Provides data for the <b>CommandResponse</b> event.
            </summary>
            <example source="$ComponentPro.Ftp\GeneralEvents\CommandResponse,$ComponentPro.Sftp\GeneralEvents\CommandSentResponseRead"/>
        </member>
        <member name="P:ComponentPro.Net.CommandResponseEventArgs.Command">
            <summary>
            Gets the command string, or a null reference when a response has been received.
            </summary>
            <value>The command string.</value>
        </member>
        <member name="P:ComponentPro.Net.CommandResponseEventArgs.Response">
            <summary>
            Gets the server's response, or a null reference when a command has been sent.
            </summary>
            <value>The server's response.</value>
        </member>
        <member name="M:c_G0B.c_P0B(System.Byte[],System.Int32,System.Int32,c_O0B)">
            <summary>
            SetInput method doesn't set state to MoreOutput necessarily. It may remain in NewInput state. In ZlibDecompressor it may even set state to Finish.
            </summary>
        </member>
        <member name="M:c_G0B.c_V0A(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Process method may return zero at any time of the (de)compression process (not only when (de)compressing final block). 
            It may arise typically when requesting new input.
            </summary>
        </member>
        <member name="M:c_G0B.c_H2A">
            <summary>
            Resets (de)compressor for future use.
            </summary>
            <returns>Number of bytes remained in the input buffer (that buffer specified to the SetInput method).</returns>
        </member>
        <member name="T:ComponentPro.Compression.ZlibStream">
            <summary>
            Zlib compression or decompression stream.
            </summary>
            <example source="$ComponentPro.Ftp\GetUploadStream"/>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the ZlibStream with the specified compression level. This will be a compression stream.
            </summary>
            <param name="inner">The inner stream.</param>
            <param name="compressionLevel">The compression level. From 0 to 9 (Default compression level is 6).</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ZlibStream. This will be a decompression stream.
            </summary>
            <param name="inner">The inner stream.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek the specified offset and origin. This method is not supported.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Origin.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.SetLength(System.Int64)">
            <summary>
            Sets the length. This method is not supported.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read the specified buffer, offset and count. This method is not supported in compression mode.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the specified buffer, offset and count. This method is not supported in decompression mode.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Flush">
            <summary>
            Flush this instance.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Dispose the specified disposing.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CompressedRead">
            <summary>
            Gets the number of compressed bytes read. Available in decompression mode only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanRead">
            <summary>
            Gets a value indicating whether this instance can read.
            </summary>
            <value><c>true</c> if this instance can read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value><c>true</c> if this instance can seek; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanWrite">
            <summary>
            Gets a value indicating whether this instance can write.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.Length">
            <summary>
            Gets the length. This property is not supported.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.Position">
            <summary>
            Gets or sets the position. This property is not supported.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:ComponentPro.Net.SspiAuthenticationMethod">
            <summary>
            Defines SSPI authentication methods used for logging in the user account on the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.NTLM">
            <summary>
            Secure SASL NTLM authentication (also known as Secure Password Authentication - SPA). 
            In Windows domain environment such as Active Directory, can also be used to authenticate the current Windows user 
            (in this case, the developer should pass a null reference (Nothing in Visual Basic) as user name and password values). 
            Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.Kerberos">
            <summary>
            Secure SASL GSSAPI authentication (Kerberos). 
            Used to authenticate the current Windows user in Windows domain environment such as Active Directory. 
            User name and password values will be ignored and can be left blank or a null reference (Nothing in Visual Basic). 
            Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.Negotiate">
            <summary>
            Negotiate authentication.
            </summary>
        </member>
        <member name="T:c_N3B">
            <summary>
            Defines a method to create a an instance of the generalized <see cref="!:ISocket"/> interface.
            </summary>
        </member>
        <member name="M:c_N3B.c_J3A">
            <summary>
            Creates an unconnected instance of the generalized <see cref="!:ISocket"/> interface.
            </summary>
            <returns>An instance of <see cref="!:ISocket"/>.</returns>
        </member>
        <member name="T:c_O3B">
            <summary>
            Defines a generalized socket API.
            </summary>
        </member>
        <member name="M:c_O3B.c_P3B(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:c_O3B.c_X6A(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint"/> that represents the remote device.</param>
            <remarks>
            The Connect method establishes a network connection to a device identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_O3B.c_X6A(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_O3B.c_PWA(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to the connected <see cref="!:ISocket"/> starting at the indicated location in the data and using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:c_O3B.c_QWA(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from the connected <see cref="!:ISocket"/> into a specific location of the receive buffer and using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="count">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:c_O3B.c_J8A(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on the <see cref="!:ISocket"/>.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown"/> value specifying the operation that will no longer be allowed.</param>
            <remarks>
            See the reference for <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)"/> for details.
            </remarks>
        </member>
        <member name="M:c_O3B.c_R4A">
            <summary>
            Forces the <see cref="!:ISocket"/> connection to close.
            </summary>
            <remarks>
            <p>
            The application should call <see cref="!:Shutdown"/> before calling Close to ensure that
            all pending data is sent or received before the Socket is closed.
            </p>
            </remarks>
        </member>
        <member name="P:c_O3B.c_R3B">
            <summary>
            Gets the instance of <see cref="!:ISocketFactory"/> that created this <see cref="!:ISocket"/>.
            </summary>
            <value>An instance of <see cref="!:ISocketFactory"/>.</value>
        </member>
        <member name="P:c_O3B.c_G4A">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="!:Timeout"/> property only affects synchronous methods.
            </p>
            </remarks>
        </member>
        <member name="P:c_O3B.c_V8A">
            <summary>
            Gets a value that indicates whether the <see cref="!:ISocket"/> is connected to a remote host as of the last Send or Receive operation. 
            </summary>
            <value>true if the <see cref="!:ISocket"/> is connected; otherwise, false.</value>
        </member>
        <member name="P:c_O3B.c_U8A">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="!:ISocket"/> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:c_O3B.c_T8A">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="!:ISocket"/> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            either the remote host or the proxy server.
            RemoteEndPoint is set by the <see cref="!:ISocket"/> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="T:c_S3B">
            <summary>
            Summary description for EnhancedMemoryStream2.
            </summary>
        </member>
        <member name="T:c_D0A">
            <summary>
            Represents a hash transform.
            </summary>
        </member>
        <member name="M:c_D0A.c_V0A(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes a block of data.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Length.</param>
        </member>
        <member name="M:c_D0A.c_W0A">
            <summary>
            Gets hash value.
            </summary>
            <returns>Hash value.</returns>
        </member>
        <member name="M:c_D0A.c_Y0A">
            <summary>
            Resets the transform.
            </summary>
        </member>
        <member name="P:c_D0A.c_Z0A">
            <summary>
            Hash size.
            </summary>
        </member>
        <member name="T:c_V6B">
            <summary>
            MAC for SSL3 records and SSL3 Finished message
            </summary>
            <remarks>
            The MAC is generated as:
            alg(K + pad_2 + alg(text + K + pad_1))  // Handshake Finished message MAC
            alg(K + pad_2 + alg(K + pad_1 + text))  // Record MAC
            where K is an n byte key<br/>
            pad_1 is the character 0x36 repeated 48 times for MD5 or 40 times for SHA
            pad_2 is the character 0x5c repeated 48 times for MD5 or 40 times for SHA
            and text is the data being protected<br/>
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.NetworkExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.NetworkException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.NetworkException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.OperationFailed">
            <summary> 
            The requested operation could not be completed. 
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, a protocol error such as 'file not found' would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.OperationCancelled">
            <summary>
            The operation was aborted by the client.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.NetworkException">
            <summary>
            The exception that is thrown when an error occurs while using a ComponentPro network component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.NetworkException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.NetworkException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.Status">
            <summary>
            Gets error status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.NetworkExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.ProtocolCode">
            <summary>
            Gets the protocol error code, if available (usually when <see cref="P:ComponentPro.Net.NetworkException.Status"/> is set to ProtocolError).
            </summary>
            <value>Protocol error code.</value>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.ProtocolMessage">
            <summary>
            Gets the protocol error message, if available (usually when <see cref="P:ComponentPro.Net.NetworkException.Status"/> is set to ProtocolError).
            </summary>
            <value>Protocol error message.</value>
        </member>
        <member name="T:ComponentPro.Net.ProxyHttpConnectAuthMethod">
            <summary>
            HTTP CONNECT proxy server authentication method.
            </summary>
            <seealso cref="T:ComponentPro.Net.ProxyType"/>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Basic">
            <summary>
            Basic authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Ntlm">
            <summary>
            NTLM authentication. This can only be used for <see cref="F:ComponentPro.Net.ProxyType.HttpConnect">HTTP CONNECT proxies</see>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Digest">
            <summary>
            Digest authentication. This can only be used for <see cref="F:ComponentPro.Net.ProxyType.HttpConnect">HTTP CONNECT proxies</see>.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxyType">
            <summary>
            Type of proxy to use to connect to the remote machine.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.None">
            <summary>No proxy. Direct connection.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks4">
            <summary>Connection through SOCKS4 proxy. This is a legacy proxy protocol that does not support password authentication.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks4A">
            <summary>Connection through SOCKS4A proxy (capable of resolving domain names). This is a legacy proxy protocol that does not support password authentication.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks5">
            <summary>Connection through SOCKS5 proxy.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.HttpConnect">
            <summary>Connection through HTTP proxy using the CONNECT method.</summary>
        </member>
        <member name="T:ComponentPro.Net.ProxySocketExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.ProxySocketException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an FTP protocol error such as 550 Access Denied would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ReceiveFailure">
            <summary>
            A complete response was not received from the remote server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.ProxySocketException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.NotConnected">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.SendRetryTimeout">
            <summary>
            An incomplete block of data was sent and the operation timed out.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.Timeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxyClient">
            <summary>Provides client connections for TCP network services through HTTP, SOCKS v4, SOCKS v4A and SOCKS v5 proxy servers.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of ProxyClient class with a container.
            </summary>
            <param name="container">The container object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the container is null.</exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(ComponentPro.Net.WebProxyEx)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.ProxyClient"/> class with parameters provided in the supplied <see cref="T:ComponentPro.Net.WebProxyEx"/> object.
            </summary>
            <param name="proxy">Contains parameters used to initialize this <see cref="T:ComponentPro.Net.ProxyClient"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol. </param>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
            <example source="$ComponentPro.Network\Constructor"/>
            <param name="proxyType">The proxy type.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="userName">The proxy user name.</param>
            <param name="password">The proxy password.</param>
            <param name="domain">The proxy domain name.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.Net.Sockets.AddressFamily,ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol. </param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="domain">The proxy domain name.</param>
            <param name="password">The proxy password.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyType">The proxy type.</param>
            <param name="userName">The proxy user name.</param>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.String,System.Int32,ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class and connects to the specified port on the specified host.</summary>
            <param name="port">The port number of the remote host to which you intend to connect. </param>
            <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
            <param name="proxyType">The <see cref="P:ComponentPro.Net.ProxyClient.ProxyType">type</see> of the proxy.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="proxyHost">The hostname of the proxy server.</param>
            <param name="proxyPort">The port of the proxy server.</param>
            <param name="userName">A user name to submit to the proxy server for authentication.</param>
            <param name="password">A password to submit to the proxy server for authentication.</param>
            <param name="domain">A domain to submit to the proxy server for authentication.</param>
            <exception cref="T:System.ArgumentNullException">hostname is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Close">
            <summary>Disposes this <see cref="T:ComponentPro.Net.ProxyClient"></see> instance without closing the underlying connection.</summary>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.Net.IPEndPoint)">
            <summary>Connects the client to a remote TCP host using the specified remote network endpoint.</summary>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">remoteEp is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>Connects the client to a remote TCP host using the specified IP address and port number.</summary>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the host to which you intend to connect. </param>
            <param name="port">The port number to which you intend to connect. </param>
            <exception cref="T:System.ArgumentNullException">address parameter is null. </exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.String,System.Int32)">
            <summary>Connects the client to the specified port on the specified host.</summary>
            <exception cref="T:System.ArgumentNullException">hostname is null. </exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <example source="$ComponentPro.Network\Connect"/>
            <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
            <param name="port">The port number of the remote host to which you intend to connect. </param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Disconnect">
            <summary>
            Informs the proxy server that the connection is about to close and terminates the connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.ProxyClient"></see> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Finalize">
            <summary>Frees resources used by the <see cref="T:ComponentPro.Net.ProxyClient"></see> class.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.GetStream">
            <summary>Returns the <see cref="T:System.Net.Sockets.NetworkStream"></see> used to send and receive data.</summary>
            <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream"></see>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> is not connected to a remote host. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> has been closed. </exception>
            <example source="$ComponentPro.Network\Connect"/>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.ProxyClient.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete.</param>
            <param name="host">The name of the remote host.</param>
            <example source="$ComponentPro.Network\AsyncConnect"/>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <example source="$ComponentPro.Network\AsyncConnect"/>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <example source="$ComponentPro.Network\AsyncConnect"/>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="E:ComponentPro.Net.ProxyClient.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Network\AsyncConnect"/>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Active">
            <summary>Gets or set a value that indicates whether a connection has been made.</summary>
            <returns>true if the connection has been made; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Available">
            <summary>Gets the amount of data that has been received from the network and is available to be read.</summary>
            <returns>The number of bytes of data received from the network and available to be read.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ClientSocket">
            <summary>Gets the underlying <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
            <returns>The underlying network <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Connected">
            <summary>Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"></see> for a <see cref="T:ComponentPro.Net.ProxyClient"></see> is connected to a remote host.</summary>
            <returns>true if the <see cref="P:ComponentPro.Net.ProxyClient.ClientSocket"></see> socket was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="P:ComponentPro.Net.ProxyClient.Timeout"/> property only affects synchronous methods.
            </p>
            <p>
            Minimal value is 500. Setting this to a value lower than 500 will set it to 500.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Family">
            <summary>
            Gets or sets the addressing scheme that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyType">
            <summary>
            Gets or sets the proxy type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyHost">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyPort">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.UserName">
            <summary>
            Gets or sets the user name to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Password">
            <summary>
            Gets or sets password to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxySocketException">
            <summary>
            The exception that is thrown when a proxy error or socket error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.String,ComponentPro.Net.ProxySocketExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.String,ComponentPro.Net.ProxySocketExceptionStatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus"/> values.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.Net.Sockets.SocketException)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with the reference to the socket exception that is the cause of this exception.
            </summary>
            <param name="e">The socket exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.GetSocketExceptionMessage(System.Net.Sockets.SocketException)">
            <summary>
            Returns an exception message for the supplied SocketException.
            </summary>
            <param name="error">Socket exception.</param>
            <returns>Exception message.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxySocketException.Status">
            <summary>
            Gets the status of the error.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus"/> values.</value> 
        </member>
        <member name="P:ComponentPro.Net.ProxySocketException.ErrorCode">
            <summary>
            Gets the error code associated with this exception if the error status is <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus">SocketError</see> or <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus">ProtocolError</see>. Returns 0 otherwise.
            </summary>
            <value>An integer error code associated with this exception (or 0).</value>
        </member>
        <member name="T:ComponentPro.Net.PortRange">
            <summary>
            Represents a TCP/IP port range.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.PortRange.Any">
            <summary>
            Specifies a port range that makes the OS assign an available port number. 
            </summary>
        </member>
        <member name="M:ComponentPro.Net.PortRange.#ctor(System.Int32)">
            <summary>
            Creates a port range that includes a single port.
            </summary>
            <param name="port">Port</param>
        </member>
        <member name="M:ComponentPro.Net.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a port range.
            </summary>
            <param name="portMin">Low bound of the range.</param>
            <param name="portMax">High boung of the range.</param>
        </member>
        <member name="M:ComponentPro.Net.PortRange.ToString">
            <summary>
            Returns the string representation of the port range.
            </summary>
            <returns>Port range.</returns>
        </member>
        <member name="M:c_X7B.c_P3B(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:c_X7B.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="!:ProxySocket"/> class.
            </summary>
            <remarks>
            The default constructor initializes an instance of the <see cref="!:ProxySocket"/>
            class with the <see cref="T:ComponentPro.Net.ProxyType"/> property set to <see cref="T:ComponentPro.Net.ProxyType">ProxyType.None</see>.
            </remarks>
        </member>
        <member name="M:c_X7B.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the <see cref="!:ProxySocket"/> class based on the specified socket.
            </summary>
            <param name="socket">Socket to base the <see cref="!:ProxySocket"/> instance on.</param>
        </member>
        <member name="M:c_X7B.#ctor(ComponentPro.Net.WebProxyEx)">
            <summary>
            Initializes a new instance of <see cref="!:ProxySocket"/> class with parameters provided in the supplied <see cref="T:ComponentPro.Net.WebProxyEx"/> object.
            </summary>
            <param name="proxy">Contains parameters used to initialize this <see cref="!:ProxySocket"/>.</param>
        </member>
        <member name="M:c_X7B.c_PWA(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="!:ProxySocket"/>.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_PWA(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="!:ProxySocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_PWA(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to a connected <see cref="!:ProxySocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_PWA(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to a connected <see cref="!:ProxySocket"/> starting at the indicated location in the data and using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_C5A(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected <see cref="!:ProxySocket"/>.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.
            </returns>
            <remarks>
            <p>
            Prior to sending data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </p>
            <p>
            The BeginSend method starts asynchronously sending data through a ProxySocket.
            You should create a callback method that implements the AsyncCallback delegate.
            This callback method should use the EndSend method to complete the asynchronous operation.
            See the .NET Framework SDK Reference for more information on asynchronous methods.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_F8A(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            The EndSend method completes a request to accept a connection that was started with the <see cref="!:BeginSend"/> method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_QWA(System.Byte[])">
            <summary>
            Receives data from a connected <see cref="!:ProxySocket"/>.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_QWA(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="!:ProxySocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_QWA(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from a connected <see cref="!:ProxySocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_QWA(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from a connected <see cref="!:ProxySocket"/> into a specific location of the receive buffer and using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </remarks>
        </member>
        <member name="M:c_X7B.c_G8A(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected <see cref="!:ProxySocket"/>.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.
            </returns>
            <remarks>
            <p>
            Prior to receiving data, the socket must be connected using either a call to <see cref="!:Connect(EndPoint)"/> method or a call to <see cref="!:Listen"/> and <see cref="!:Accept"/> methods.
            </p>
            <p>
            The BeginReceive method starts asynchronously reading data from a ProxySocket.
            You should create a callback method that implements the AsyncCallback delegate.
            This callback method should use the EndReceive method to complete the asynchronous operation.
            See the .NET Framework SDK Reference for more information on asynchronous methods.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_H8A(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            The EndReceive method completes a request to accept a connection that was started with the <see cref="!:BeginReceive"/> method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_R4A">
            <summary>
            Forces the <see cref="!:ProxySocket"/> connection to close.
            </summary>
            <remarks>
            <p>
            The application should call <see cref="!:Shutdown"/> before calling Close to ensure that
            all pending data is sent or received before the Socket is closed.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_J8A(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on the <see cref="!:ProxySocket"/>.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown"/> value specifying the operation that will no longer be allowed.</param>
            <remarks>
            See the reference for <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)"/> for details.
            </remarks>
        </member>
        <member name="M:c_X7B.c_H7A(System.String)">
            <summary>
            Checks whether the host address is a valid hostname or IP address.
            </summary>
            <param name="host">Host name or IP address.</param>
            <returns>True if valid, false if otherwise.</returns>
        </member>
        <member name="M:c_X7B.c_SSA(System.String,System.Int32)">
            <summary>
            Converts the host address and port into an IP endpoint. If the host address is not an IP address, returns null.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <returns>IP endpoint.</returns>
        </member>
        <member name="M:c_X7B.c_SSA(System.Net.IPHostEntry,System.Int32)">
            <summary>
            Chooses the most appropriate IP endpoint to use from the host entry.
            </summary>
            <param name="hostEntry">Host entry.</param>
            <param name="port">Port.</param>
            <returns>IP endpoint.</returns>
        </member>
        <member name="M:c_X7B.c_M8A(System.Net.IPAddress)">
            <summary>
            Returns the long value of the IP address of the instance of IPAddress.
            </summary>
            <param name="address">An instance of IPAddress.</param>
            <returns>The long value of the IP address.</returns>
        </member>
        <member name="M:c_X7B.c_L8A(System.Net.IPAddress)">
            <summary>
            Returns an array of bytes of the IP address of the instance of IPAddress.
            </summary>
            <param name="address">An instance of IPAddress.</param>
            <returns>An array of address bytes.</returns>
        </member>
        <member name="M:c_X7B.c_Z6A(c_O3B)">
            <summary>
            Starts a request to listen for an incoming connection using the specified control socket as a base.
            </summary>
            <param name="controlSocket">The control socket to use as a base.</param>
            <returns>The endpoint to which a connection from a remote host can be made.</returns>
            <remarks>
            <p>
            This method differs from <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"/>:
            <ul>
            <li>A control connection socket needs to be specified. This might be needed by a proxy server
            socket.</li>
            <li>Only a single incoming connection is accepted.</li>
            </ul>
            To accept an incoming connection, use the <see cref="!:Accept"/> or <see cref="!:BeginAccept"/> method.
            </p>
            <p>
            <b>Note:</b> When connected through a HTTP proxy server, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_X6A(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_X6A(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint"/> that represents the remote device.</param>
            <remarks>
            The Connect method establishes a network connection to a device identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_Y6A">
            <summary>
            Accepts an incoming connection.
            </summary>
            <returns>An instance of connected <see cref="!:ProxySocket"/>.</returns>
            <remarks>
            <p>
            A call to Accept is only allowed after a call to <see cref="!:Listen"/> or <see cref="!:BeginListen"/>/<see cref="!:EndListen"/> methods.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_L4A(c_O3B,System.AsyncCallback,System.Object)">
            <summary>
            Starts an asynchronously request to listen for an incoming connection using the specified control socket as a base.
            </summary>
            <param name="controlSocket">The control socket to use as a base.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
            </returns>
            <remarks>
            <p>
            This method differs from <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"/>:
            <ul>
            <li>A control connection socket needs to be specified. This might be needed by a proxy server
            socket.</li>
            <li>Only a single incoming connection is accepted.</li>
            </ul>
            To accept an incoming connection, use the <see cref="!:Accept"/> or <see cref="!:BeginAccept"/> method.
            </p>
            <p>
            <b>Note:</b> When connected through a HTTP proxy server, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_N4A(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to accept an incoming connection.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
            </returns>
            <remarks>
            <p>
            A call to Accept is only allowed after a call to <see cref="!:Listen"/> or <see cref="!:BeginListen"/>/<see cref="!:EndListen"/> methods.
            </p>
            </remarks>
        </member>
        <member name="M:c_X7B.c_K4A(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.
            </returns>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_K4A(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint"/> that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.
            </returns>
            <remarks>
            The Connect method establishes a network connection to a host identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_O4A(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <remarks>
            The EndConnect method completes a request to accept a connection that was started with the <see cref="!:BeginConnect(EndPoint,AsyncCallback,object)"/> method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_Q4A(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to accept an incoming connection.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>An instance of connected <see cref="!:ProxySocket"/>.</returns>
            <remarks>
            The EndAccept method completes a request to accept a connection that was started with the <see cref="!:BeginAccept"/> method.
            </remarks>
        </member>
        <member name="M:c_X7B.c_P4A(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to listen for an incoming connection.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The endpoint to which a connection from a remote host can be made.</returns>
            <remarks>
            The EndListen method completes a request to listen for a connection that was started with the <see cref="!:BeginListen"/> method.
            </remarks>
        </member>
        <member name="P:c_X7B.c_P8A">
            <summary>
            Gets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:c_X7B.c_Q8A">
            <summary>
            Gets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:c_X7B.c_W3A">
            <summary>
            Gets the local TCP port range to which to bind the connections.
            </summary>
            <value>The port range.</value>
        </member>
        <member name="P:c_X7B.c_R3A">
            <summary>
            Gets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:c_X7B.c_Y3A">
            <summary>
            Gets the authentication method to use for HTTP CONNECT proxy.
            NTLM authentication is only supported by some HTTP CONNECT proxies.
            </summary>
            <value>An authentication method.</value>
        </member>
        <member name="P:c_X7B.c_A4A">
            <summary>
            Gets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:c_X7B.c_C4A">
            <summary>
            Gets the username to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:c_X7B.c_E4A">
            <summary>
            Gets the domain to submit to the proxy server for authentication.
            </summary>
            <value>A domain to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:c_X7B.c_T4A">
            <summary>
            Gets or sets send buffer size. Must be set before calling the <see cref="!:Connect(string, int)"/> method.
            </summary>
            <value>Send buffer size.</value>
        </member>
        <member name="P:c_X7B.c_U4A">
            <summary>
            Gets or sets receive buffer size. Must be set before calling the <see cref="!:Connect(string, int)"/> method.
            </summary>
            <value>Receive buffer size.</value>
        </member>
        <member name="P:c_X7B.c_G4A">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="T:System.Threading.Timeout"/> property only affects synchronous methods.
            </p>
            <p>
            Minimal value is 500. Setting this to a value lower than 500 will set it to 500.
            </p>
            </remarks>
        </member>
        <member name="P:c_X7B.c_S4A">
            <summary>
            Gets the internal <see cref="T:System.Net.Sockets.Socket"/> value.
            </summary>
            <value>The internal <see cref="T:System.Net.Sockets.Socket"/> value.</value>
        </member>
        <member name="P:c_X7B.global::c_O3B#c_R3B">
            <summary>
            Gets an instance of <see cref="!:ISocketFactory"/> that created this <see cref="!:ISocket"/>.
            </summary>
            <value>An instance of <see cref="!:ISocketFactory"/>.</value>
        </member>
        <member name="P:c_X7B.c_T8A">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="!:ProxySocket"/> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            either the remote host or the proxy server.
            RemoteEndPoint is set by <see cref="!:ProxySocket"/> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="P:c_X7B.c_U8A">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="!:ProxySocket"/> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:c_X7B.c_V4A">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>
            The number of bytes of data that has been received from the network and is available
            to be read, or 0 if no data is available.
            </value>
            <remarks>
            After the socket has been closed, this property will still indicate there is data to be read
            if there is 1 byte or more data in the receive buffer. If there is no more data to be read,
            a value of 0 will be returned.
            </remarks>
        </member>
        <member name="P:c_X7B.c_V8A">
            <summary>
            Gets a value that indicates whether the <see cref="!:ProxySocket"/> is connected to a remote host as of the last Send or Receive operation. 
            </summary>
            <value>true if the <see cref="!:ProxySocket"/> is connected; otherwise, false.</value>
        </member>
        <member name="P:c_X7B.c_W8A">
            <summary>
            Gets the operating system handle for the inner <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>An <see cref="T:System.IntPtr"/> representing the operating system handle for the <see cref="T:System.Net.Sockets.Socket"/>.</value>
        </member>
        <member name="T:c_U9A">
            <summary>
            Implements Socks4 and Socks4a protocols.
            </summary>
        </member>
        <member name="T:c_T2A">
            <summary>
            Implements Socks5 protocol.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.WebProxyEx">
            <summary>
            Contains proxy settings for a socket connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.global::c_N3B#c_J3A">
            <summary>
            Creates an instance of proxy socket.
            </summary>
            <returns>An instance of proxy socket.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.ToString">
            <summary>
            Returns a string representation of this proxy.
            </summary>
            <returns>String representation of this proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.Clone">
            <summary>
            Creates a copy of the <see cref="T:ComponentPro.Net.WebProxyEx"/> instance.
            </summary>
            <returns>A new <see cref="T:ComponentPro.Net.WebProxyEx"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)">
            <summary>
            Returns the proxied URI for a destination.
            </summary>
            <param name="destination">The <see cref="T:System.Uri"/> of the requested FTP server.</param>
            <returns>The <see cref="T:System.Uri"/> of the FTP server if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri"/> of the proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)">
            <summary>
            Indicates whether to use the proxy server for the specified host.
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> of the host to check for proxy use.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.String,System.Int32)">
            <summary>
            Indicates whether to use the proxy server for the specified host.
            </summary>
            <param name="hostName">The host address to check for proxy use.</param>
            <param name="port">The port port.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <remarks>
            The default constructor initializes an empty instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/>
            class with the <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType"/> property set to <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType">ProxyType.None</see>.
            When the <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType"/> is set to <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType">ProxyType.None</see>, the <see cref="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)"/> method
            returns <b>true</b>, and the <see cref="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)"/> method returns the destination address.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="username">A user name to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String[],System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> 
            class with the specified type, hostname, port, and credentials
            with base authentification.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> 
            class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials,
            with base authentification.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String[],System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Server">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Port">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.ProxyType">
            <summary>
            Gets or sets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method to use for HTTP CONNECT proxy.
            NTLM authentication is only supported by some HTTP CONNECT proxies.
            </summary>
            <value>An authentication method.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials"/> containing the credentials to submit to the proxy server for authentication.</value>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential"/> are supported.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.UserName">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Password">
            <summary>
            Gets or sets the password to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>A password to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
            <value>A domain to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.LocalPortRange">
            <summary>
            Gets or sets the local TCP port range to which to bind the connections.
            </summary>
            <value>The port range.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy server for local addresses.
            </summary>
            <value><b>true</b> to bypass the proxy server for local addresses; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassArrayList">
            <summary>
            Gets a list of addresses that do not use the proxy server.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> containing a list of regular expressions that describe URIs that will not use the proxy server when accessed.</value>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassList">
            <summary>
            Gets or sets an array of addresses that do not use the proxy server.
            </summary>
            <value>An array containing a list of regular expressions that describe URIs that will not use the proxy server when accessed.</value>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode requests and responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode requests and responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.SendRetryTimeout">
            <summary>
            Specifies how long (in milliseconds) to continue try sending data before giving up on slow networks. 
            Set it to 0 or -1 means to use the same value as proxy socket timeout.
            </summary>
            <value></value>
        </member>
        <member name="T:c_Z8B">
            <summary>
            Summary description for Asn1Encoder.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.HashAlgorithmType">
            <summary>
            Specifies the hash algorithm used to compute the hash for hash signing and verification methods.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.Unsupported">
            <summary>
            Unsupported hash algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.MD5">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA1">
            <summary>
            SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.MD5SHA1">
            <summary>
            MD5SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA256">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA384">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA512">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="F:c_SCC.c_DEC">
            <summary>
            Unsupported key algorithm.
            </summary>
        </member>
        <member name="F:c_SCC.c_ZCC">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:c_SCC.c_CDC">
            <summary>
            DSA.
            </summary>
        </member>
        <member name="F:c_AFC.c_XFC">
            <summary>Digital signature.</summary>
        </member>
        <member name="F:c_AFC.c_YFC">
            <summary>Non-repudiation.</summary>
        </member>
        <member name="F:c_AFC.c_ZFC">
            <summary>Key encipherment.</summary>
        </member>
        <member name="F:c_AFC.c_AGC">
            <summary>Data encipherment.</summary>
        </member>
        <member name="F:c_AFC.c_BGC">
            <summary>Key agreement.</summary>
        </member>
        <member name="F:c_AFC.c_CGC">
            <summary>Certificate signing.</summary>
        </member>
        <member name="F:c_AFC.c_DGC">
            <summary>CRL signing.</summary>
        </member>
        <member name="F:c_AFC.c_EGC">
            <summary>Key encipherment only.</summary>
        </member>
        <member name="F:c_AFC.c_FGC">
            <summary>Key decipherment only.</summary>
        </member>
        <member name="F:c_NDC.c_SDC">
            <summary>Imported keys are marked as exportable.</summary>
        </member>
        <member name="F:c_NDC.c_UDC">
            <summary>The user is to be notified through a dialog box or other method when certain attempts to use this key are made.</summary>
        </member>
        <member name="F:c_NDC.c_TDC">
            <summary>The private keys are stored under the local computer and not under the current user.</summary>
        </member>
        <member name="F:c_NDC.c_ODC">
            <summary>The private keys are stored under the current user and not under the local computer even if the PFX BLOB specifies that they should go into the local computer.</summary>
        </member>
        <member name="F:c_VDC.c_WDC">
            <summary>Binary DER encoded X.509 certificate.</summary>
        </member>
        <member name="F:c_VDC.c_XDC">
            <summary>Base-64 encoded DER X.509 certificate.</summary>
        </member>
        <member name="F:c_VDC.c_YDC">
            <summary>P12/PFX certificate with private key (if available).</summary>
            <remarks>Not supported on .NET CF.</remarks>
        </member>
        <member name="M:c_RCC.#ctor(System.Byte[])">
            <summary>
            Loads a certificate from an array.
            </summary>
            <param name="data">An array containing DER encoded certificate data.</param>
        </member>
        <member name="M:c_RCC.c_TGC(System.String)">
            <summary>
            Loads a DER encoded certificate from the specified file.
            </summary>
            <param name="path">Path to a file.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:c_RCC.c_TGC(System.IO.Stream)">
            <summary>
            Loads a DER encoded certificate from the specified stream.
            </summary>
            <param name="stream">Stream to load a certificate from.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:c_RCC.c_VCC(System.String,System.String,System.String)">
            <summary>
            Loads a DER encoded certificate and a private key (in PKCS #8, PuTTY or SSLeay format) from the specified files.
            </summary>
            <param name="certificatePath">Path to a certificate file.</param>
            <param name="privateKeyPath">Path to the private key file.</param>
            <param name="privateKeyPassword">Private key password.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:c_RCC.c_VCC(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Loads a DER encoded certificate and a private key (in PKCS #8, PuTTY or SSLeay format) from the specified streams.
            </summary>
            <param name="certificateStream">Stream with the certificate.</param>
            <param name="privateKeyStream">Stream with the private key.</param>
            <param name="privateKeyPassword">Private key password.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:c_RCC.c_YCC(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">An instance of RSA, DSA, RSACryptoServiceProvider or DSACryptoServiceProvider.</param>
        </member>
        <member name="M:c_RCC.c_YCC(c_WCC)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:c_RCC.c_YCC(System.Security.Cryptography.AsymmetricAlgorithm,System.Boolean)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">An instance of RSA, DSA, RSACryptoServiceProvider or DSACryptoServiceProvider.</param>
            <param name="permanentBind">Specifies whether to permanently bind the certificate to the specified CSP.</param>
        </member>
        <member name="M:c_RCC.c_YCC(c_WCC,System.Boolean)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="permanentBind">Specifies whether to permanently bind the certificate to the specified CSP.</param>
        </member>
        <member name="M:c_RCC.c_PDC(System.String,System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_RCC.c_PDC(System.Byte[],System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_RCC.c_PDC(System.String,System.String,c_NDC)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_RCC.c_PDC(System.Byte[],System.String,c_NDC)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_RCC.c_CAC(System.String)">
            <summary>
            Saves the certificate to the supplied file in DER format. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
        </member>
        <member name="M:c_RCC.c_CAC(System.IO.Stream)">
            <summary>
            Saves the certificate to the supplied stream in DER format. 
            </summary>
            <param name="stream">Stream to save the certificate to.</param>
        </member>
        <member name="M:c_RCC.c_CAC(System.String,c_VDC)">
            <summary>
            Saves the certificate to the supplied file in DER format. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
            <param name="format">Certificate format.</param>
        </member>
        <member name="M:c_RCC.c_CAC(System.IO.Stream,c_VDC)">
            <summary>
            Saves the certificate to the supplied stream in DER format. 
            </summary>
            <param name="stream">Stream to save the certificate to.</param>
            <param name="format">Certificate format.</param>
        </member>
        <member name="M:c_RCC.c_CAC(System.String,c_VDC,System.String)">
            <summary>
            Saves the certificate to the supplied file in DER format. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
            <param name="format">Certificate format.</param>
            <param name="password">Password (only used by PFX/P12 format).</param>
            <remarks>Not supported on .NET CF.</remarks>
        </member>
        <member name="M:c_RCC.c_CAC(System.IO.Stream,c_VDC,System.String)">
            <summary>
            Saves the certificate to the supplied stream in DER format. 
            </summary>
            <param name="stream">Stream to save the certificate to.</param>
            <param name="format">Certificate format.</param>
            <param name="password">Password (only used by PFX/P12 format).</param>
            <remarks>Not supported on .NET CF.</remarks>
        </member>
        <member name="M:c_RCC.c_BEC(System.String,System.String,c_AEC,System.Boolean)">
            <summary>
            Saves the certificate's private key to the supplied file. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
            <param name="password">Private key password.</param>
            <param name="format">Private key file format.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
        </member>
        <member name="M:c_RCC.c_BEC(System.IO.Stream,System.String,c_AEC,System.Boolean)">
            <summary>
            Saves the certificate's private key to the supplied stream.
            </summary>
            <param name="stream">Stream to save the private key to.</param>
            <param name="password">Private key password.</param>
            <param name="format">Private key file format.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
        </member>
        <member name="M:c_RCC.op_Implicit(System.Security.Cryptography.X509Certificates.X509Certificate)~c_RCC">
            <summary>
            Converts an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to a <see cref="!:Certificate"/>.
            </summary>
            <param name="certificate">An instance of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</param>
            <returns>A <see cref="!:Certificate"/>.</returns>
        </member>
        <member name="M:c_RCC.op_Implicit(c_RCC)~System.Security.Cryptography.X509Certificates.X509Certificate2">
            <summary>
            Converts a <see cref="!:Certificate"/> to <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> (or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>).
            </summary>
            <param name="certificate">An instance of <see cref="!:Certificate"/>.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</returns>
        </member>
        <member name="M:c_RCC.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new instance of <see cref="!:Certificate"/> based on the specified certificate <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            <param name="certificate">An instance of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</param>
        </member>
        <member name="M:c_RCC.c_WHC">
            <summary>
            Returns the collection of CRL distribution points.
            </summary>
            <returns>Collection of CRL distribution points, or null if not available.</returns>
        </member>
        <member name="M:c_RCC.c_MEC">
            <summary>
            Returns the DN of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>DN of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:c_RCC.c_ZHC">
            <summary>
            Returns the name of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>The name of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:c_RCC.c_LEC">
            <summary>
            Returns DN of the principal to which the certificate was issued.
            </summary>
            <returns>DN of the principal to which the certificate was issued.</returns>
        </member>
        <member name="M:c_RCC.c_WFC">
            <summary>
            Returns the name of the principal to which the certificate was issued.
            </summary>
            <returns>The name of the principal to which the certificate was issued.</returns>
        </member>
        <member name="M:c_RCC.c_FFC">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509v3 certificate.</returns>
        </member>
        <member name="M:c_RCC.c_DFC">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509v3 certificate.</returns>
        </member>
        <member name="M:c_RCC.c_CJC">
            <summary>
            Returns the certificate's subject key identifier (SKI).
            </summary>
            <returns>Subject key identifier.</returns>
        </member>
        <member name="M:c_RCC.c_EJC">
            <summary>
            Returns the certificate's issuer key identifier (SKI).
            </summary>
            <returns>Issuer (authority) key identifier.</returns>
        </member>
        <member name="M:c_RCC.c_OEC">
            <summary>
            Returns the certificate's common name, if available.
            </summary>
            <returns>Common name; or null if not available.</returns>
        </member>
        <member name="M:c_RCC.c_JJC">
            <summary>
            Returns the list of certificate's common names.
            </summary>
            <returns>The list of common names.</returns>
        </member>
        <member name="M:c_RCC.c_TEC">
            <summary>
            Returns the list of certificate's e-mail addresses.
            </summary>
            <returns>The list of addresses.</returns>
        </member>
        <member name="M:c_RCC.c_QJC">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:c_RCC.c_ZEC">
            <summary>
            Returns the expiration date of this X.509v3 certificate (in local time).
            </summary>
            <returns>The expiration date for this X.509 certificate.</returns>
            <remarks>The expiration date is the date after which the X.509 certificate is no longer considered valid.</remarks>
        </member>
        <member name="M:c_RCC.c_YEC">
            <summary>
            Returns the effective date of this X.509v3 certificate (in local time).
            </summary>
            <returns>The effective date for this X.509 certificate.</returns>
            <remarks>The effective date is the date after which the X.509 certificate is considered valid.</remarks>
        </member>
        <member name="M:c_RCC.c_RJC">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <returns>The hash value for the X.509 certificate.</returns>
        </member>
        <member name="M:c_RCC.c_MDC">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>The raw data for the entire X.509v3 certificate.</returns>
        </member>
        <member name="M:c_RCC.c_QFC">
            <summary>
            Checks whether a private key for this certificate is available.
            </summary>
            <returns>true if available, false if not available.</returns>
        </member>
        <member name="M:c_RCC.c_SJC">
            <summary>
            Checks whether a certifiacte is time valid.
            </summary>
            <returns>true if valid, false if not valid.</returns>
        </member>
        <member name="M:c_RCC.c_TJC">
            <summary>
            Returns the intended key usage value.
            </summary>
            <returns>Intended key usage.</returns>
        </member>
        <member name="M:c_RCC.c_VJC">
            <summary>
            This method is deprecated, use <see cref="!:GetEnhancedUsage"/> instead.
            </summary>
            <returns>An array of intended key usage identifiers.</returns>
        </member>
        <member name="M:c_RCC.c_BFC">
            <summary>
            Returns an array of enhanced key usage identifiers.
            </summary>
            <returns>An array of enhanced key usage identifiers, or null if the certificate is valid for all uses.</returns>
        </member>
        <member name="M:c_RCC.c_DDC">
            <summary>
            Returns the DSA parameters of certificate's public key.
            </summary>
            <returns>The DSA parameters of certificate's public key.</returns>
        </member>
        <member name="M:c_RCC.c_BDC">
            <summary>
            Returns the RSA parameters of certificate's public key.
            </summary>
            <returns>The RSA parameters of certificate's public key.</returns>
        </member>
        <member name="M:c_RCC.c_BDC(System.Boolean,System.Boolean)">
            <summary>
            Returns the RSA parameters of certificate's public or private key.
            </summary>
            <param name="exportPrivateKeys">True if private key parameters are to be exported as well.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
            <returns>The RSA parameters of certificate's public or private key.</returns>
        </member>
        <member name="M:c_RCC.c_DDC(System.Boolean,System.Boolean)">
            <summary>
            Returns the DSA parameters of certificate's public or private key.
            <param name="exportPrivateKeys">True if private key parameters are to be exported as well.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
            </summary>
            <returns>The DSA parameters of certificate's public or private key.</returns>
        </member>
        <member name="M:c_RCC.c_DKC">
            <summary>
            Returns the size of the key in bits.
            </summary>
            <returns>Size of the key in bits.</returns>
        </member>
        <member name="M:c_RCC.c_LFC(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="hash">The hash value of the signed data.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="signature">The signature for the specified hash value.</param>
            <returns>True if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_RCC.c_NFC(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType,System.Boolean)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key.
            </summary>
            <param name="hash">The hash value of the data to be signed.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI).</param>
            <returns>The signature for the specified hash value.</returns>
            <remarks>
            <p>
            The private key for a certificate must be available for this method to succeed.
            </p>
            <p>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="M:c_RCC.c_OFC(System.Byte[])">
            <summary>
            Encrypts data.
            </summary>
            <param name="rgb">Data to be encrypted.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:c_RCC.c_PFC(System.Byte[],System.Boolean)">
            <summary>
            Decrypts data.
            </summary>
            <param name="rgb">Data to be decrypted.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI).</param>
            <returns>Decrypted data.</returns>
            <remarks>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </remarks>
        </member>
        <member name="M:c_RCC.c_YUB">
            <summary>
            Verifies the validity of the certificate.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_RCC.c_YUB(c_TFC)">
            <summary>
            Verifies the validity of the certificate, including its compliance with the specified criteria.
            </summary>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_RCC.c_YUB(System.String,c_TFC)">
            <summary>
            Verifies the validity of the certificate, including its compliance with the specified criteria.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_RCC.c_YUB(System.String,c_TFC,c_UFC)">
            <summary>
            Verifies the validity of the certificate, including its compliance with the specified criteria,
            using the specified chain engine.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_RCC.Dispose">
            <summary>
            Disposes the object and releases resources.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="P:c_RCC.c_PJC">
            <summary>
            Gets the certificates extensions collection.
            </summary>
            <value>Extensions collection.</value>
        </member>
        <member name="P:c_RCC.c_PGC">
            <summary>
            Returns the key algorithm for this certificate.
            </summary>
            <value>The key algorithm for this certificate.</value>
        </member>
        <member name="P:c_RCC.c_NKC">
            <summary>
            Gets the thumbprint of the certificate.
            </summary>
            <value>Certificate's thumbprint.</value>
        </member>
        <member name="P:c_RCC.c_OKC">
            <summary>
            Gets or sets the friendly name associated with the certificate.
            </summary>
            <value>Friendly name associated with the certificate.</value>
            <remarks>Not available in .NET CF.</remarks>
        </member>
        <member name="T:c_UFC">
            <summary>
            A chain engine (name space and cache) to be used to build and validate certificate chains.
            </summary>
        </member>
        <member name="F:c_UFC.c_VKC">
            <summary>
            The chain engine of the current user.
            </summary>
        </member>
        <member name="F:c_UFC.c_UKC">
            <summary>
            The chain engine of the local machine.
            </summary>
        </member>
        <member name="F:c_UFC.c_JMB">
            <summary>
            iOS / Android native security policy.
            </summary>
        </member>
        <member name="T:c_SFC">
            <summary>
            Represents a chain of certificates.
            </summary>
            <remarks>
            A chain starts by the end certificate and each following certificate
            must directly certify the one preceding it.
            The last certificate in the list is a self-signed root certificate, and
            may be optionally omitted under the assumption it must be known in any case.
            </remarks>
        </member>
        <member name="M:c_SFC.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="!:CertificateChain"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
        </member>
        <member name="M:c_SFC.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="!:CertificateChain"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:c_SFC.c_VFC(c_RCC)">
            <summary>
            Adds a certificate to the end of the chain.
            </summary>
            <param name="certificate">The certificate to be added to the chain.</param>
            <returns>The position of the certificate in the chain.</returns>
        </member>
        <member name="M:c_SFC.#ctor">
            <summary>
            Creates an empty certificate chain.
            </summary>
        </member>
        <member name="M:c_SFC.#ctor(c_RCC[])">
            <summary>
            Creates a certificate chain from an array of certificates.
            </summary>
            <param name="certificates">An array of certificates.</param>
        </member>
        <member name="M:c_SFC.c_PDC(System.String,System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_SFC.c_PDC(System.Byte[],System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_SFC.c_PDC(System.String,System.String,c_NDC)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_SFC.c_PDC(System.Byte[],System.String,c_NDC)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:c_SFC.c_AMC(System.String)">
            <summary>
            Loads <see cref="!:CertificateChain"/> from the specified p7b file.
            </summary>
            <param name="path">Path to the file.</param>
            <returns>Instance of <see cref="!:CertificateChain"/>, never null.</returns>
            <remarks>The p7b file can be saved using <see cref="!:Save(string)"/> method.</remarks>
        </member>
        <member name="M:c_SFC.c_AMC(System.IO.Stream)">
            <summary>
            Loads a p7b encoded <see cref="!:CertificateChain"/> from the specified file.
            </summary>
            <param name="stream">Stream to load a <see cref="!:CertificateChain"/> from.</param>
            <returns>Instance of <see cref="!:CertificateChain"/>, never null.</returns>
            <remarks>The p7b stream can be saved using <see cref="!:Save(Stream)"/> method.</remarks>
        </member>
        <member name="M:c_SFC.c_LFC(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="hash">The hash value of the signed data.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="signature">The RSA signature for the specified hash value.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
            <remarks>The hash algorithm parameter is ignored with managed RSA.</remarks>
        </member>
        <member name="M:c_SFC.c_ZKC(c_RCC)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:c_SFC.c_ZKC(c_RCC,c_UFC)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:c_SFC.c_ZKC(c_RCC,c_B)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <param name="store">Additional store to search in addition to system stores.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:c_SFC.c_ZKC(c_RCC,c_B,c_UFC)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <param name="engine">Certificate chain engine.</param>
            <param name="store">Additional store to search in addition to system stores.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:c_SFC.c_YUB">
            <summary>
            Verifies the validity of the certificate chain.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_SFC.c_YUB(c_TFC)">
            <summary>
            Verifies the validity of the certificate chain, including its compliance with the specified criteria.
            </summary>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_SFC.c_YUB(System.String,c_TFC)">
            <summary>
            Verifies the validity of the certificate chain, including its compliance with the specified criteria.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_SFC.c_YUB(System.String,c_TFC,c_UFC)">
            <summary>
            Verifies the validity of the certificate chain, including its compliance with the specified criteria,
            using the specified chain engine.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_SFC.c_CAC(System.String)">
            <summary>
            Saves the certificate chain to the specified path as a .P7B (PKCS #7) file.
            </summary>
            <param name="certificatePath">Path to save the certificate chain file to.</param>
        </member>
        <member name="M:c_SFC.c_CAC(System.IO.Stream)">
            <summary>
            Saves the certificate chain to the specified stream in .P7B (PKCS #7) format.
            </summary>
            <param name="output">Stream to write the certificate chain to.</param>
        </member>
        <member name="P:c_SFC.c_GKC">
            <summary>
            Gets the default certificate chain engine.
            </summary>
        </member>
        <member name="P:c_SFC.c_LHA">
            <summary>
            Gets the number of certificates in the chain.
            </summary>
            <value>The number of certificates in the chain.</value>
        </member>
        <member name="P:c_SFC.Item(System.Int32)">
            <summary>
            Gets or sets the certificate at the specified position.
            </summary>
            <value>The certificate at the specified position</value>
            <remarks>The certificate at the specified position.</remarks>
        </member>
        <member name="P:c_SFC.c_YMC">
            <summary>
            Gets the certificate of the root certification authority, if available.
            </summary>
            <value>Root CA certificate if available; null otherwise.</value>
        </member>
        <member name="P:c_SFC.c_ULC">
            <summary>
            Gets the first certificate in the chain, if not empty.
            </summary>
            <value>Leaf certificate; null of empty.</value>
        </member>
        <member name="T:c_VLC">
            <summary>
            Represents a collection of X509 v3 certificates.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.CryptographicCollection">
            <summary>
            A base class for various collections of cryptographic objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.CryptographicCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.CryptographicCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/> to a compatible one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.Count">
            <summary>
            Gets the number of items in the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.
            </summary>
            <value>The number of items in collection.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/> is synchronized.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.
            </summary>
        </member>
        <member name="M:c_VLC.#ctor">
            <summary>
            Creates a new instance of <see cref="!:CertificateCollection"/>.
            </summary>
        </member>
        <member name="M:c_VLC.c_VFC(c_RCC)">
            <summary>
            Adds a <see cref="!:Certificate"/> to the collection.
            </summary>
            <param name="certificate">A certificate to add.</param>
        </member>
        <member name="M:c_VLC.c_WLC(c_RCC)">
            <summary>
            Removes a <see cref="!:Certificate"/> from the collection.
            </summary>
            <param name="certificate">A certificate to remove.</param>
        </member>
        <member name="M:c_VLC.c_V3B">
            <summary>
            Removes all certificates from the collection.
            </summary>
        </member>
        <member name="M:c_VLC.c_BKB(c_RCC[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:CertificateCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:CertificateCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_VLC.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Certificate"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:Certificate"/> to get.</param>
            <value>A certificate.</value>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate-related error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:c_TCC">
            <summary>
            Represents a collection of X509 v3 certificate extensions.
            </summary>
        </member>
        <member name="M:c_TCC.#ctor(System.Byte[])">
            <summary>
            Creates a certificate extension collection from an ASN.1 block.
            </summary>
            <param name="data">ASN.1 block.</param>
        </member>
        <member name="M:c_TCC.c_VFC(c_GEC)">
            <summary>
            Adds a <see cref="!:CertificateExtension"/> to the collection.
            </summary>
            <param name="extension">A certificate extension to add.</param>
        </member>
        <member name="M:c_TCC.c_WLC(c_GEC)">
            <summary>
            Removes a <see cref="!:CertificateExtension"/> from the collection.
            </summary>
            <param name="extension">A certificate extension to remove.</param>
        </member>
        <member name="M:c_TCC.c_BKB(c_GEC[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:CertificateExtensionCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_TCC.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:CertificateExtension"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:CertificateExtension"/> to get or set.</param>
            <value>A certificate extension.</value>
        </member>
        <member name="P:c_TCC.Item(System.String)">
            <summary>
            Gets the first <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>A certificate extension, or null if not found.</value>
        </member>
        <member name="T:c_GEC">
            <summary>
            Represents an X509 v3 certificate extension.
            </summary>
        </member>
        <member name="M:c_GEC.#ctor(System.String,System.Boolean,System.Byte[])">
            <summary>
            Creates a new instance of <see cref="!:CertificateExtension"/>.
            </summary>
            <param name="oid">Extension object identifier.</param>
            <param name="critical">Specifies whether the extension is critical.</param>
            <param name="data">Extension data.</param>
        </member>
        <member name="P:c_GEC.c_N9B">
            <summary>
            Gets the object identifier that identifies the extension.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:c_GEC.c_NJC">
            <summary>
            Gets a value indicating whether the extension is critical.
            </summary>
            <value>True if critical; false otherwise.</value>
        </member>
        <member name="P:c_GEC.c_J3">
            <summary>
            Gets the extension value.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:c_NNC">
            <summary>
            Specifies the reason for inclusion in the certificate revocation list.
            </summary>
        </member>
        <member name="F:c_NNC.c_ONC">
            <summary>Unspecified.</summary>
        </member>
        <member name="F:c_NNC.c_XNC">
            <summary>Key was compromised.</summary>
        </member>
        <member name="F:c_NNC.c_YNC">
            <summary>CA was compromised.</summary>
        </member>
        <member name="F:c_NNC.c_ZNC">
            <summary>Affiliation changed.</summary>
        </member>
        <member name="F:c_NNC.c_AOC">
            <summary>Certificate was superseded.</summary>
        </member>
        <member name="F:c_NNC.c_BOC">
            <summary>Operation was ceased.</summary>
        </member>
        <member name="F:c_NNC.c_COC">
            <summary>Certificate hold.</summary>
        </member>
        <member name="F:c_NNC.c_DOC">
            <summary>Remove from CRL.</summary>
        </member>
        <member name="T:c_HNC">
            <summary>
            The certificate revocation list.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.PkcsBase">
            <summary>
            Base class for various PKCS objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.PkcsBase.c_XCC(System.IO.Stream,c_JHD,System.Boolean)">
            <summary>
            Loads a CMS/PKCS #7 signed or enveloped message from a stream.
            Returns an instance of <see cref="!:SignedData"/> for signed message, <see cref="!:EnvelopedData"/> for enveloped message, or null for
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the message.</param>
            <param name="finder">Gets or sets the <see cref="!:ICertificateFinder"/> to be used to find certificates corresponding to a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>.</param>
            <param name="silent">A value indicating whether Cryptographic Service Provider (CSP) operations are permitted to display any user interface.</param>
            <returns>An instance of <see cref="!:SignedData"/>, <see cref="!:EnvelopedData"/> or null.</returns>
        </member>
        <member name="M:c_HNC.#ctor(System.Byte[])">
            <summary>
            Creates a certificate revocation list from an ASN.1 block.
            </summary>
            <param name="crl">ASN.1 block.</param>
        </member>
        <member name="M:c_HNC.c_GKB">
            <summary>
            Converts a certificate revocation list into a byte array.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:c_HNC.c_W0A">
            <summary>
            Returns the certificate revocation list hash.
            </summary>
            <returns>CRL hash.</returns>
            <remarks>
            Use <see cref="!:SignatureHashAlgorithm"/> and the results of <see cref="!:GetHash"/> and <see cref="!:GetSignature"/> methods
            as an input to CA's Certificate's <see cref="!:Certificate.VerifyHash(byte[], HashAlgorithmType, byte[])"/> method to validate the CRL signature.
            </remarks>
        </member>
        <member name="M:c_HNC.c_SOC">
            <summary>
            Returns the certificate revocation list signature.
            </summary>
            <returns>CRL signature.</returns>
            <remarks>
            Use <see cref="!:SignatureHashAlgorithm"/> and the results of <see cref="!:GetHash"/> and <see cref="!:GetSignature"/> methods
            as an input to CA's Certificate's <see cref="!:Certificate.VerifyHash(byte[], HashAlgorithmType, byte[])"/> method to validate the CRL signature.
            </remarks>
        </member>
        <member name="P:c_HNC.c_WOC">
            <summary>
            Gets the DN of the issuer of this certificate revocation list.
            </summary>
            <value>DN of the issuer of this certificate revocation list.</value>
        </member>
        <member name="P:c_HNC.c_XOC">
            <summary>
            Gets the datetime of this CRL update.
            </summary>
            <value>Datetime of this CRL update.</value>
        </member>
        <member name="P:c_HNC.c_YOC">
            <summary>
            Gets the datetime of the next CRL update.
            </summary>
            <value>Datetime of the next CRL update.</value>
        </member>
        <member name="P:c_HNC.c_PJC">
            <summary>
            Gets the collection of CRL's extensions.
            </summary>
            <value>Extensions collection.</value>
        </member>
        <member name="P:c_HNC.c_OOC">
            <summary>
            Gets the colection of revoked certificates.
            </summary>
            <value>Revoked certificate collection.</value>
        </member>
        <member name="P:c_HNC.c_PGC">
            <summary>
            Returns the key algorithm used to sign this certificate revocation list.
            </summary>
            <value>The key algorithm.</value>
        </member>
        <member name="P:c_HNC.c_ZOC">
            <summary>
            Returns the hash algorithm used to create the signed hash value.
            </summary>
            <value>Hash algorithm.</value>
            <remarks>
            Use <see cref="!:SignatureHashAlgorithm"/> and the results of <see cref="!:GetHash"/> and <see cref="!:GetSignature"/> methods
            as an input to CA's Certificate's <see cref="!:Certificate.VerifyHash(byte[], HashAlgorithmType, byte[])"/> method to validate the CRL signature.
            </remarks>
        </member>
        <member name="T:c_SNC">
            <summary>
            Collection of information about revoked certificates. A part of <see cref="!:CertificateRevocationList"/>.
            </summary>
        </member>
        <member name="M:c_SNC.#ctor">
            <summary>
            Creates a new instance of <see cref="!:RevokedCertificateCollection"/>.
            </summary>
        </member>
        <member name="M:c_SNC.c_VFC(c_LNC)">
            <summary>
            Adds a <see cref="!:RevokedCertificate"/> to the collection.
            </summary>
            <param name="certificate">A certificate to add.</param>
        </member>
        <member name="M:c_SNC.c_WLC(c_LNC)">
            <summary>
            Removes a <see cref="!:RevokedCertificate"/> from the collection.
            </summary>
            <param name="certificate">A certificate to remove.</param>
        </member>
        <member name="M:c_SNC.c_V3B">
            <summary>
            Removes all certificates from the collection.
            </summary>
        </member>
        <member name="M:c_SNC.c_BKB(c_LNC[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:RevokedCertificateCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:RevokedCertificateCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_SNC.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Certificate"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:Certificate"/> to get.</param>
            <value>A certificate.</value>
        </member>
        <member name="T:c_LNC">
            <summary>
            Information about revoked certificate.
            </summary>
        </member>
        <member name="M:c_LNC.#ctor(System.Byte[],System.DateTime,c_NNC)">
            <summary>
            Creates a new instance of revoked certificate based on the supplied data.
            </summary>
            <param name="serialNumber">Serial number.</param>
            <param name="revocationDate">Revocation date.</param>
            <param name="reason">Revocation reason.</param>
        </member>
        <member name="M:c_LNC.#ctor(System.Int32,System.DateTime,c_NNC)">
            <summary>
            Creates a new instance of revoked certificate based on the supplied data.
            </summary>
            <param name="serialNumber">Serial number.</param>
            <param name="revocationDate">Revocation date.</param>
            <param name="reason">Revocation reason.</param>
        </member>
        <member name="M:c_LNC.c_QJC">
            <summary>
            Gets the certificate's serial number.
            </summary>
            <returns>Serial number.</returns>
        </member>
        <member name="P:c_LNC.c_MPC">
            <summary>
            Gets the revocation date.
            </summary>
            <value>Revocation date.</value>
        </member>
        <member name="P:c_LNC.c_PJC">
            <summary>
            Gets the collection of revoked certificate info's extensions.
            </summary>
            <value>Extensions collection.</value>
        </member>
        <member name="T:c_WNC">
            <summary>
            Collection of certifciate revocation lists.
            </summary>
        </member>
        <member name="P:c_WNC.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:CertificateRevocationList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:CertificateRevocationList"/> to get.</param>
            <value>A certificate revocation list.</value>
        </member>
        <member name="T:c_XKC">
            <summary>
            Options for <see cref="!:CertificateStore.FindCertificates(DistinguishedName[], CertificateFindOptions)"/> methods.
            </summary>
        </member>
        <member name="F:c_XKC.c_N0A">
            <summary>
            No filter.
            </summary>
        </member>
        <member name="F:c_XKC.c_QFC">
            <summary>
            Only find certificates that have a private key.
            </summary>
        </member>
        <member name="F:c_XKC.c_SJC">
            <summary>
            Only find certificates that are time valid.
            </summary>
        </member>
        <member name="F:c_XKC.c_ZPC">
            <summary>
            Only find certificates that can be used for client authentication.
            </summary>
        </member>
        <member name="F:c_XKC.c_AQC">
            <summary>
            Only find certificates that can be used for server authentication.
            </summary>
        </member>
        <member name="F:c_XKC.c_FQC">
            <summary>
            When searching by certificate issuer, include known subordinate CAs in the search as well.
            </summary>
        </member>
        <member name="T:c_DQC">
            <summary>
            The type of search for <see cref="!:CertificateStore.FindCertificates(CertificateFindType, byte[], CertificateFindOptions)"/> method.
            </summary>
        </member>
        <member name="F:c_DQC.c_JQC">
            <summary>
            Certificates whose subject key identifier (SKI) matches the specified value.
            </summary>
        </member>
        <member name="T:c_LPC">
            <summary>
            Specifies the location of the certificate store.
            </summary>
        </member>
        <member name="F:c_LPC.c_N0A">
            <summary>None.</summary>
        </member>
        <member name="F:c_LPC.c_VKC">
            <summary>The store located at HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_UKC">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_KQC">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\&lt;ServiceName>&gt;\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_MQC">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\&lt;ServiceName&gt;\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_LQC">
            <summary>The store located at HKEY_USERS\&lt;UserName&gt;\Software\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_NQC">
            <summary>The store located at HKEY_CURRENT_USER\Software\Policies\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_OQC">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:c_LPC.c_PQC">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\EnterpriseCertificates.</summary>
        </member>
        <member name="T:c_PPC">
            <summary>
            Specifies the name of the certificate store.
            </summary>
        </member>
        <member name="F:c_PPC.c_N0A">
            <summary>None.</summary>
        </member>
        <member name="F:c_PPC.c_QPC">
            <summary>Other users.</summary>
        </member>
        <member name="F:c_PPC.c_RPC">
            <summary>Third-party certificate authorities.</summary>
        </member>
        <member name="F:c_PPC.c_SPC">
            <summary>Intermediate certificate authorities.</summary>
        </member>
        <member name="F:c_PPC.c_TPC">
            <summary>Revoked certificates.</summary>
        </member>
        <member name="F:c_PPC.c_UPC">
            <summary>Personal certificates.</summary>
        </member>
        <member name="F:c_PPC.c_VPC">
            <summary>Trusted root certificate authorities.</summary>
        </member>
        <member name="F:c_PPC.c_WPC">
            <summary>Directly trusted people and resources.</summary>
        </member>
        <member name="F:c_PPC.c_XPC">
            <summary>Directly trusted publishers.</summary>
        </member>
        <member name="T:c_B">
            <summary>
            Represents a certificate store.
            </summary>
        </member>
        <member name="M:c_B.#ctor(System.String,c_LPC)">
            <summary>
            Opens a system certificate store of the specified name a the specified location.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <remarks>
            Some example system stores are:<br/>
            "CA" - Certification authority certificates.<br/>
            "My" - A certificate store that holds certificates with associated private keys.<br/>
            "Root" - Root certificates.<br/>
            "SPC" - Software publisher certificate.<br/>
            "Trust"<br/>
            "Disallowed"<br/>
            </remarks>
        </member>
        <member name="M:c_B.#ctor(c_PPC,c_LPC)">
            <summary>
            Opens a system certificate store of the specified name a the specified location.
            </summary>
            <param name="storeName">The store name value.</param>
            <param name="location">Specifies the location of the certificate store.</param>
        </member>
        <member name="M:c_B.#ctor(System.String)">
            <summary>
            Opens a system certificate store of the specified name.
            </summary>
            <param name="storeName">The store name.</param>
            <remarks>
            Some example system stores are:<br/>
            "CA" - Certification authority certificates.<br/>
            "My" - A certificate store that holds certificates with associated private keys.<br/>
            "Root" - Root certificates.<br/>
            "SPC" - Software publisher certificate.<br/>
            "Trust"<br/>
            "Disallowed"<br/>
            </remarks>
        </member>
        <member name="M:c_B.#ctor(c_PPC)">
            <summary>
            Opens a system certificate store of the specified name.
            </summary>
            <param name="storeName">The store name value.</param>
        </member>
        <member name="M:c_B.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a temporary memory-based certificate store
            and populates it with certificates from the specified collection.
            </summary>
            <param name="certificates">The certificate collection.</param>
        </member>
        <member name="M:c_B.c_YPC(System.String,c_LPC)">
            <summary>
            Checks possibility of existence a storage on Mono
            </summary>
            <param name="storeName">The store name.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <returns>True if the store is supported; false otherwise.</returns>
        </member>
        <member name="M:c_B.c_Y2B(System.String,c_LPC)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:c_B.c_Y2B(c_PPC,c_LPC)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name value.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:c_B.c_Y2B(System.String)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:c_B.c_Y2B(c_PPC)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name value.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:c_B.c_WKC(c_RCC)">
            <summary>
            Adds a certificate to this certificate store.
            </summary>
            <param name="cert">Certificate to be added.</param>
        </member>
        <member name="M:c_B.c_WLC(c_RCC)">
            <summary>
            Removes a certificate from this certificate store.
            </summary>
            <param name="cert">Certificate to be removed.</param>
        </member>
        <member name="M:c_B.c_YKC(c_DQC,System.Byte[],c_XKC)">
            <summary>
            Returns all certificates matching the specified criteria.
            </summary>
            <param name="findType">Specifies the type of search being made.</param>
            <param name="data">A byte array whose meaning is defined by 'findType'.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_YKC(c_JEC,c_XKC)">
            <summary>
            Returns all certificates issued by the specified issuer (or its subordinate issuer) and corresponding to the specified options.
            </summary>
            <param name="issuer">Issuer DN.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_YKC(c_JEC,System.Byte[],c_XKC)">
            <summary>
            Returns all certificates with the specified serial number issued by the specified issuer (or its subordinate issuer)
            and corresponding to the specified options.
            </summary>
            <param name="issuer">Issuer DN.</param>
            <param name="serialNumber">Certificate serial number.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_YKC(c_JEC[],c_XKC)">
            <summary>
            Returns all certificates issued by one of specified issuers (or their subordinate issuer) and corresponding to the specified options.
            </summary>
            <param name="issuers">An array of issuers' DNs.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_YKC(c_JEC[],System.Byte[],c_XKC)">
            <summary>
            Returns all certificates issued by one of specified issuers (or their subordinate issuer) and corresponding to the specified options.
            </summary>
            <param name="issuers">An array of issuers' DNs.</param>
            <param name="serialNumber">Certificate serial number.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_EQC(c_JEC[],System.Byte[],c_XKC)">
            <summary>
            Returns all certificates issued by one of specified issuers and corresponding to the specified options.
            </summary>
            <param name="issuers">An array of issuers' DNs.</param>
            <param name="serialNumber">Certificate serial number.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_YKC(c_RCC,c_XKC)">
            <summary>
            Returns all certificates matching the specified certificate and options.
            </summary>
            <param name="certificate">Certificate to find.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_YKC(c_XKC)">
            <summary>
            Returns all certificates corresponding to the specified options.
            </summary>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_HQC(System.String)">
            <summary>
            Returns all certificates corresponding to the specified e-mail address.
            </summary>
            <param name="address">E-mail address.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.c_HQC(System.String,c_XKC)">
            <summary>
            Returns all certificates corresponding to the specified e-mail address and options.
            </summary>
            <param name="address">E-mail address.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:c_B.Dispose">
            <summary>
            Disposes the object and releases resources.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:c_B.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:c_B.Finalize">
            <summary>
            Finalizer called by garbage collector.
            </summary>
        </member>
        <member name="T:c_VUC">
            <summary>
            Represents the base class from which all implementations of the ArcFour algorithm must derive.
            </summary>
        </member>
        <member name="M:c_VUC.#ctor">
            <summary>
            Initializes a new instance of ArcFour.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="!:ArcFourManaged"/> class instead.
            </remarks>
        </member>
        <member name="M:c_VUC.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>ArcFour is a stream cipher, it does not use IV.</remarks>
        </member>
        <member name="M:c_VUC.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="P:c_VUC.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size.</value>
            <remarks>ArcFour is a stream cipher, blocks can be of any size.</remarks>
        </member>
        <member name="P:c_VUC.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>Initialization vector.</value>
            <remarks>ArcFour is a stream cipher, it does not use IV.</remarks>
        </member>
        <member name="P:c_VUC.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation.</value>
            <remarks>ArcFour is a stream cipher, the only mode supported is CipherMode.OFB.</remarks>
        </member>
        <member name="P:c_VUC.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode.</value>
            <remarks>ArcFour is a stream cipher, no padding is done.</remarks>
        </member>
        <member name="T:c_XUC">
            <summary>
            The managed version of the ArcFour algorithm.
            </summary>
        </member>
        <member name="M:c_XUC.#ctor">
            <summary>
            Initializes a new instance of ArcFourManaged class.
            </summary>
        </member>
        <member name="M:c_XUC.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric ArcFour decryptor object with the specified Key and initialization vector (IV).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV. Not used by ArcFour.</param>
            <returns>A symmetric ArcFour decryptor object.</returns>
        </member>
        <member name="M:c_XUC.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric ArcFour encryptor object with the specified Key and initialization vector (IV).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV. Not used by ArcFour.</param>
            <returns>A symmetric ArcFour encryptor object.</returns>
        </member>
        <member name="T:c_BVC">
            <summary>
            The managed version of the algorithm defined by RFC 2268.
            </summary>
        </member>
        <member name="M:c_BVC.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:ArcTwoManaged"/> class.
            </summary>
        </member>
        <member name="M:c_BVC.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random initialization vector (IV) when none is specified.</remarks>
        </member>
        <member name="M:c_BVC.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:c_BVC.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a RC2 encryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A RC2 encryptor object.</returns>
        </member>
        <member name="M:c_BVC.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a RC2 decryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A RC2 decryptor object.</returns>
        </member>
        <member name="P:c_BVC.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:c_BVC.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
        </member>
        <member name="T:c_VVC">
            <summary>
            Specifies asymmetric algorithm.
            </summary>
        </member>
        <member name="F:c_VVC.c_ZCC">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:c_VVC.c_CDC">
            <summary>
            DSA.
            </summary>
        </member>
        <member name="F:c_VVC.c_YVC">
            <summary>
            Diffie-Hellman.
            </summary>
        </member>
        <member name="T:c_UCC">
            <summary>
            A platform-independent asymmetric algorithm object.
            </summary>
        </member>
        <member name="M:c_UCC.#ctor">
            <summary>
            Creates an instance of <see cref="!:AsymmetricKeyAlgorithm"/>.
            </summary>
        </member>
        <member name="M:c_UCC.Dispose">
            <summary>
            Frees the resources used by this object.
            </summary>
        </member>
        <member name="M:c_UCC.c_EDC(System.Security.Cryptography.AsymmetricAlgorithm,System.Boolean)">
            <summary>
            Creates an instance of <see cref="!:AsymmetricKeyAlgorithm"/> from the specified asymmetric algorithm object.
            </summary>
            <param name="algorithm">Asymmetric algorithm object.</param>
            <param name="ownsAlgorithm">True if the created object owns the asymmetric algorithm object.</param>
            <returns>An instance of <see cref="!:AsymmetricKeyAlgorithm"/>.</returns>
        </member>
        <member name="M:c_UCC.c_FFC">
            <summary>
            Exports a public key to the specified private key info object.
            </summary>
            <returns>Public key info object.</returns>
        </member>
        <member name="M:c_UCC.c_JFC">
            <summary>
            Exports a private key to the specified private key info object.
            </summary>
            <returns>Private key info object.</returns>
        </member>
        <member name="M:c_UCC.c_FDC(c_ZVC)">
            <summary>
            Imports a key from the specified public key info object.
            </summary>
            <param name="key">Public key info object.</param>
        </member>
        <member name="M:c_UCC.c_FDC(c_WCC)">
            <summary>
            Imports a key from the specified private key info object.
            </summary>
            <param name="key">Private key info object.</param>
        </member>
        <member name="M:c_UCC.c_FDC(System.Security.Cryptography.RSAParameters)">
            <summary>
            Imports a key from the specified RSA parameters.
            </summary>
            <param name="key">RSA key parameters.</param>
        </member>
        <member name="M:c_UCC.c_FDC(System.Security.Cryptography.DSAParameters)">
            <summary>
            Imports a key from the specified DSA parameters.
            </summary>
            <param name="key">DSA key parameters.</param>
        </member>
        <member name="M:c_UCC.c_FDC(c_CWC)">
            <summary>
            Imports a key from the specified Diffie-Hellman parameters.
            </summary>
            <param name="key">Diffie-Hellman key parameters.</param>
        </member>
        <member name="M:c_UCC.c_XWC(c_VVC,System.Int32)">
            <summary>
            Generates a private key for the specified asymmetric algorithm with of the specified key size.
            </summary>
            <param name="keyAlgorithm">Key algorithm.</param>
            <param name="keySize">Key size.</param>
        </member>
        <member name="M:c_UCC.c_NFC(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key.
            </summary>
            <param name="hash">The hash value of the data to be signed.</param>
            <param name="hashAlgorithm">A hash algorithm used to create the hash value.</param>
            <returns>The signature for the specified hash value.</returns>
            <remarks>
            <p>
            The private key must be available for this method to succeed.
            </p>
            </remarks>
        </member>
        <member name="M:c_UCC.c_LFC(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="hash">The hash value of the signed data.</param>
            <param name="hashAlgorithm">A hash algorithm used to create the hash value.</param>
            <param name="signature">The signature for the specified hash value.</param>
            <returns>True if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_UCC.c_OFC(System.Byte[])">
            <summary>
            Encrypts data.
            </summary>
            <param name="rgb">Data to be encrypted.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:c_UCC.c_PFC(System.Byte[])">
            <summary>
            Decrypts data.
            </summary>
            <param name="rgb">Data to be decrypted.</param>
            <returns>Decrypted data.</returns>
            <remarks>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </remarks>
        </member>
        <member name="P:c_UCC.c_W5B">
            <summary>
            Gets the current key size.
            </summary>
        </member>
        <member name="P:c_UCC.c_L1A">
            <summary>
            Gets the current key algorithm.
            </summary>
        </member>
        <member name="M:c_UBC.c_LXC(c_UBC,c_UBC,c_UBC@,c_UBC@)">
            <summary>
            The extended Euclidean algorithm is an extension to the Euclidean algorithm
            for finding the greatest common divisor (GCD) of integers a and b:
            it also finds the integers x and y in Bezout's identity.
            </summary>
        </member>
        <member name="M:c_UBC.c_RXC(System.UInt32[],System.UInt64,System.UInt32[])">
            <summary>
            r += a * b
            </summary>
        </member>
        <member name="M:c_UBC.c_QXC(System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32[],System.UInt64)">
            <summary>
            Montgomery multiplication:
              a = x * y * R^(-1) mod m
            (Handbook of Applied Cryptography, Algorithm 14.36)
            </summary>
        </member>
        <member name="M:c_UBC.c_YYC(System.Int32)">
            <summary>
            Primality test. 
            </summary>
            <param name="n">Number of iterations.</param>
            <returns>true if the number is probably prime; false if not prime.</returns>
            <remarks>
            <p>Uses Algorithm from FIPS PUB 186.</p>
            <p>It will produce a false prime with probability no greater than 1/4^n</p>
            </remarks>
        </member>
        <member name="M:c_DVC.Dispose">
            <summary>
            Empty method - this class doesn't encapsulate unmanaged
            resources.
            </summary>
        </member>
        <member name="T:c_NZC">
            <summary>
            Represents the base class from which all implementations of Bruce Schneier's Blowfish algorithm must derive.
            </summary>
        </member>
        <member name="M:c_NZC.#ctor">
            <summary>
            Initializes a new instance of Blowfish.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="!:BlowfishManaged"/> class instead.
            </remarks>
        </member>
        <member name="T:c_OZC">
            <summary>
            The managed version of the Blowfish algorithm.
            </summary>
        </member>
        <member name="M:c_OZC.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:BlowfishManaged"/> class.
            </summary>
        </member>
        <member name="M:c_OZC.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random initialization vector (IV) when none is specified.</remarks>
        </member>
        <member name="M:c_OZC.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:c_OZC.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Blowfish encryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Blowfish encryptor object.</returns>
        </member>
        <member name="M:c_OZC.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Blowfish decryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Blowfish decryptor object.</returns>
        </member>
        <member name="P:c_OZC.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:c_OZC.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
        </member>
        <member name="T:c_PZC">
            <summary>
            Implements Bruce Schneier's Blowfish block cipher.
            </summary>
        </member>
        <member name="T:c_KZA">
            <summary>
            Provides various cryptography-related helper methods.
            </summary>
        </member>
        <member name="M:c_KZA.c_BWC(System.String)">
            <summary>
            Creates a new instance of the specified asymmetric algorithm. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <returns>A new instance of the specified algorithm.</returns>
        </member>
        <member name="M:c_KZA.c_E0C(System.String)">
            <summary>
            Creates a new instance of the specified hash algorithm. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <returns>A new instance of the specified algorithm.</returns>
        </member>
        <member name="M:c_KZA.c_E0C(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the specified hash algorithm. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <param name="failIfNotAvailable">Specifies whether to fail if the algorithm is not available.</param>
            <returns>A new instance of the specified algorithm.</returns>
        </member>
        <member name="M:c_KZA.c_F0C(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates a new instance of the specified symmetric algorithm using the specified modes. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <param name="cipherMode">Block cipher mode.</param>
            <param name="paddingMode">Padding mode.</param>
            <returns>A new instance of the specified algorithm..</returns>
        </member>
        <member name="M:c_KZA.c_F0C(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,System.Boolean)">
            <summary>
            Creates a new instance of the specified symmetric algorithm using the specified modes. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <param name="cipherMode">Block cipher mode.</param>
            <param name="paddingMode">Padding mode.</param>
            <param name="failIfNotAvailable">Specifies whether to fail if the algorithm is not available.</param>
            <returns>A new instance of the specified algorithm..</returns>
        </member>
        <member name="M:c_KZA.c_D0C(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the specified cryptographic object.
            </summary>
            <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
            <param name="failIfNotAvailable">Specifies whether to fail if the algorithm is not available.</param>
            <returns>A new instance of the specified cryptographic object; or null if not available.</returns>
        </member>
        <member name="M:c_KZA.c_D0C(System.String)">
            <summary>
            Creates a new instance of the specified cryptographic object.
            </summary>
            <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
            <returns>A new instance of the specified cryptographic object; or null if not available.</returns>
        </member>
        <member name="M:c_KZA.c_S0C(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This method is not intended to be used directly. Use <see cref="!:ComponentPro.Security.Cryptography.DiffieHellmanManaged"/> instead.
            </summary>
            <param name="P">Prime.</param>
            <param name="privateKey">Private key.</param>
            <param name="otherPublicKey">Other public key.</param>
        </member>
        <member name="M:c_KZA.c_WZA">
            <summary>
            Creates an instance of default random number generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:c_KZA.c_B1C(System.Int32)">
            <summary>
            Returns a random array of the specified length.
            </summary>
            <param name="count">Array length.</param>
            <returns>Random array.</returns>
        </member>
        <member name="M:c_KZA.c_C1C(System.Byte[],c_SCC)">
            <summary>
            Decodes a signature from a PKCS #7 form.
            </summary>
            <param name="encodedSignature">Signature.</param>
            <param name="keyAlgorithm">Key algorithm.</param>
            <returns>Decoded signature.</returns>
        </member>
        <member name="M:c_KZA.c_QNC(System.Byte[],c_SCC)">
            <summary>
            Encodes a signature to a PKCS #7 form.
            </summary>
            <param name="signature">Signature.</param>
            <param name="keyAlgorithm">Key algorithm.</param>
            <returns>Encoded signature.</returns>
        </member>
        <member name="M:c_KZA.c_LFC(System.Security.Cryptography.RSA,System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="hash">The hash value of the signed data.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="signature">The signature for the specified hash value.</param>
            <returns>True if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_KZA.c_NFC(System.Security.Cryptography.RSA,System.Byte[],System.String,System.Boolean)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="hash">The hash value of the data to be signed.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI).</param>
            <returns>The signature for the specified hash value.</returns>
            <remarks>
            <p>
            The private key for a certificate must be available for this method to succeed.
            </p>
            <p>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="T:c_XVC">
            <summary>
            Implements Diffie-Hellman key agreement protocol (also called exponential key agreement).
            </summary>
            <remarks>
            This algorithm was developed by Diffie and Hellman in 1976. It allows two users
            to exchange a secret key over an insecure medium without any prior secrets.
            </remarks>
        </member>
        <member name="M:c_XVC.#ctor">
            <summary>
            Initializes a new instance of DiffieHellman.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="!:DiffieHellmanManaged"/> class instead.
            </remarks>
        </member>
        <member name="M:c_XVC.c_FFC">
            <summary>
            Returns the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:c_XVC.c_HWC(System.Byte[])">
            <summary>
            Calculates the shared secret key from the other side's public key.
            </summary>
            <param name="otherPublicKey">Other side's public key.</param>
            <returns>The shared secret key.</returns>
        </member>
        <member name="M:c_XVC.c_LWC(c_CWC)">
            <summary>
            Imports the specified <see cref="!:DiffieHellmanParameters"/>.
            </summary>
            <param name="param">The Diffie-Hellman parameters.</param>
        </member>
        <member name="M:c_XVC.c_V1C(System.Boolean)">
            <summary>
            Exports the <see cref="!:DiffieHellmanParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameter; otherwise, false.</param>
            <returns>The Diffie-Hellman parameters.</returns>
        </member>
        <member name="M:c_XVC.c_Z1C">
            <summary>
            Returns Oakley generator value.
            </summary>
            <returns>Oakley generator.</returns>
        </member>
        <member name="M:c_XVC.c_EWC">
            <summary>
            Returns Oakley group 2.
            </summary>
            <returns>Oakley group 2.</returns>
        </member>
        <member name="M:c_XVC.c_FWC">
            <summary>
            Returns Oakley group 14.
            </summary>
            <returns>Oakley group 14.</returns>
        </member>
        <member name="T:c_DWC">
            <summary>
            Managed implementation of Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="M:c_DWC.#ctor">
            <summary>
            Initializes a new instance of the DiffieHellmanManaged class.
            </summary>
        </member>
        <member name="M:c_DWC.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DiffieHellmanManaged class
            with a specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
        </member>
        <member name="M:c_DWC.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current object.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>An XML string encoding of the current object.</returns>
        </member>
        <member name="M:c_DWC.FromXmlString(System.String)">
            <summary>
            When overridden in a derived class, reconstructs a DiffieHellmanManaged object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellmanManaged object. </param>
        </member>
        <member name="M:c_DWC.c_FFC">
            <summary>
            Returns the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:c_DWC.c_LWC(c_CWC)">
            <summary>
            Imports the specified <see cref="!:DiffieHellmanParameters"/>.
            </summary>
            <param name="parameters">The Diffie-Hellman parameters.</param>
        </member>
        <member name="M:c_DWC.c_V1C(System.Boolean)">
            <summary>
            Exports the <see cref="!:DiffieHellmanParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameter; otherwise, false.</param>
            <returns>The Diffie-Hellman parameters.</returns>
        </member>
        <member name="M:c_DWC.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:c_DWC.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of DiffieHellman.
            </summary>
            <value>The name of the signature algorithm.</value>
            <remarks>DiffieHellman does not support signatures. This property will throw an exception.</remarks>
        </member>
        <member name="P:c_DWC.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of DiffieHellman.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:c_CWC">
            <summary>
            Contains the parameters for Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:c_CWC.c_AXC">
            <summary>
            The prime modulus used for the <see cref="!:DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="F:c_CWC.c_ZWC">
            <summary>
            The generator used for the <see cref="!:DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="F:c_CWC.c_U0C">
            <summary>
            The private key for the <see cref="!:DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="F:c_CWC.c_Y1C">
            <summary>
            The public key for the <see cref="!:DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="T:c_JWC">
            <summary>
            Managed implementation of DSA signature algorithm.
            </summary>
            <remarks>
            <p>
            The purpose of this class is to make it possible to verify
            signatures without the need to use CryptoAPI, which is not available
            in some scenarios.
            </p>
            <p>
            Even though it is possible to generate DSA keys and sign data using
            this class, but this process has not been optimized for speed and is
            very slow.
            </p>
            </remarks>
        </member>
        <member name="M:c_JWC.#ctor">
            <summary>
            Initializes a new instance of the DSAManaged class with the key size of 1024.
            </summary>
        </member>
        <member name="M:c_JWC.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DSAManaged class with the specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
        </member>
        <member name="M:c_JWC.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the DSAManaged class with the specified key size and seed.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
            <param name="seed">The initial seed to use for key generation.</param>
        </member>
        <member name="M:c_JWC.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current object.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>An XML string encoding of the current object.</returns>
        </member>
        <member name="M:c_JWC.FromXmlString(System.String)">
            <summary>
            When overridden in a derived class, reconstructs a DSAManaged object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DSAManaged object. </param>
        </member>
        <member name="M:c_JWC.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:System.Security.Cryptography.DSAParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The DSA parameters.</returns>
        </member>
        <member name="M:c_JWC.ImportParameters(System.Security.Cryptography.DSAParameters)">
            <summary>
            Imports the specified <see cref="T:System.Security.Cryptography.DSAParameters"/>.
            </summary>
            <param name="parameters">The DSA parameters.</param>
        </member>
        <member name="M:c_JWC.CreateSignature(System.Byte[])">
            <summary>
            Creates the DSA signature for the specified data.
            </summary>
            <param name="rgbHash">The SHA1 hash of data to be signed.</param>
            <returns>The DSA signature for the specified hash value.</returns>
            <remarks>
            DSA signature is a pair of numbers r and s.
            This method always returns an array of 40 bytes.
            Bytes 0..19 contain the value of r, bytes 20..39 contain the value of s.
            </remarks>
        </member>
        <member name="M:c_JWC.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the DSA signature for the specified data.
            </summary>
            <param name="rgbHash">The SHA1 hash of signed data to be verified.</param>
            <param name="rgbSignature">The signature to be verified for rgbData.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
            <remarks>
            DSA signature is a pair of numbers r and s.
            The rgbSignature parameter must be 40 bytes long.
            Bytes 0..19 must contain the value of r, bytes 20..39 must contain the value of s.
            </remarks>
        </member>
        <member name="M:c_JWC.c_NFC(System.Byte[])">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rgbHash">The SHA1 hash of data to be signed.</param>
            <returns>The DSA signature for the specified hash value.</returns>
        </member>
        <member name="M:c_JWC.c_LFC(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_JWC.c_R2C(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.
            </summary>
            <param name="buffer">The input data for which to compute the hash.</param>
            <param name="halg">The hash algorithm to use to create the hash value.</param>
            <returns>The DSA signature for the specified data.</returns>
        </member>
        <member name="M:c_JWC.c_S2C(System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified data.
            </summary>
            <param name="buffer">The signed data.</param>
            <param name="halg">The hash algorithm used to create the hash value of the data.</param>
            <param name="signature">The signature data to be verified. </param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_JWC.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:c_JWC.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of DSA.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="P:c_JWC.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of DSA.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:c_E0A">
            <summary>
            Specifies hash algorithm.
            </summary>
        </member>
        <member name="F:c_E0A.c_H0A">
            <summary>
            SHA-1.
            </summary>
        </member>
        <member name="F:c_E0A.c_J0A">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:c_E0A.c_K0A">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:c_E0A.c_M0A">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="F:c_E0A.c_F0A">
            <summary>
            MD4.
            </summary>
        </member>
        <member name="F:c_E0A.c_G0A">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="T:c_L0A">
            <summary>
            Specifies hash algorithm key mode.
            </summary>
        </member>
        <member name="F:c_L0A.c_N0A">
            <summary>
            No keyed hash.
            </summary>
        </member>
        <member name="F:c_L0A.c_O0A">
            <summary>
            HMAC.
            </summary>
        </member>
        <member name="T:c_B0A">
            <summary>
            Represents a hash algorithm.
            </summary>
        </member>
        <member name="M:c_B0A.c_G1A">
            <summary>
            Gets the current key.
            </summary>
            <returns>Key.</returns>
        </member>
        <member name="M:c_B0A.c_H1A(System.Byte[])">
            <summary>
            Sets the current key to the specified value.
            </summary>
            <param name="key">Key..</param>
        </member>
        <member name="M:c_B0A.#ctor(c_E0A)">
            <summary>
            Creates an instance of <see cref="!:HashingAlgorithmId"/> for the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm.</param>
        </member>
        <member name="M:c_B0A.c_J1A(c_E0A)">
            <summary>
            Gets a value indicating whether the specified algorithm is supported.
            </summary>
            <param name="algorithm">Algorithm.</param>
            <returns>True if supported; false if not supported.</returns>
        </member>
        <member name="M:c_B0A.c_U0A">
            <summary>
            Creates a hash transform object for this algorithm based on the currently set parameters.
            </summary>
            <returns>Hash transform object.</returns>
        </member>
        <member name="M:c_B0A.c_T0A(System.Byte[])">
            <summary>
            Computes the hash value for the specified data.
            </summary>
            <param name="input">Input data.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:c_B0A.c_T0A(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified data.
            </summary>
            <param name="input">Input data.</param>
            <param name="offset">Input offset.</param>
            <param name="count">Input length.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:c_B0A.c_T0A(c_E0A,System.Byte[])">
            <summary>
            Computes the hash value for the specified data using the specified algorithm.
            </summary>
            <param name="algorithm">Hash algorithm.</param>
            <param name="input">Input data.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:c_B0A.c_T0A(c_E0A,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified data using the specified algorithm.
            </summary>
            <param name="algorithm">Hash algorithm.</param>
            <param name="input">Input data.</param>
            <param name="offset">Input offset.</param>
            <param name="count">Input length.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:c_B0A.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:c_B0A.c_L1A">
            <summary>
            Gets algorithm ID.
            </summary>
        </member>
        <member name="P:c_B0A.c_Z0A">
            <summary>
            Gets the size of the computed hash code (in bits).
            </summary>
        </member>
        <member name="P:c_B0A.c_N1A">
            <summary>
            Gets or sets the algorithm's key mode.
            </summary>
        </member>
        <member name="T:c_P0A">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC)
            for the input data using the specified hash function.
            </summary>
            <remarks>
            HMAC is defined by RFC 2104 and look like this:
            alg(K XOR opad + alg(K XOR ipad + text))<br/>
            where alg is the base hash algorithm,<br/>
            K is an n byte key,<br/>
            ipad is the byte 0x36 repeated 64 times (or 128 times),<br/>
            opad is the byte 0x5c repeated 64 times (or 128 times),<br/>
            and text is the data being protected.<br/>
            </remarks>
        </member>
        <member name="M:c_P0A.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the HMAC class with the specified hash algorithm and key data.
            </summary>
            <param name="alg">A type of hash algorithm to use.</param>
            <param name="rgbKey">The secret key for HMAC encryption.</param>
        </member>
        <member name="M:c_P0A.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HMAC class with the specified hash algorithm and a randomly generated key.
            </summary>
            <param name="alg">A type of hash algorithm to use. Must be a subclass of HashAlgorithm.</param>
        </member>
        <member name="M:c_P0A.Initialize">
            <summary>
            Initializes an instance of HMAC.
            </summary>
        </member>
        <member name="M:c_P0A.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the HMAC.
            </summary>
            <param name="array">The input data.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:c_P0A.HashFinal">
            <summary>
            Returns the computed Hash-based Message Authentication Code (HMAC) after all data has been written to the object.
            </summary>
            <returns>The computed HMAC.</returns>
        </member>
        <member name="M:c_P0A.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the HMAC and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="P:c_P0A.Key">
            <summary>
            Gets or sets the key to be used in the hash algorithm.
            </summary>
            <value>The key to be used in the hash algorithm.</value>
        </member>
        <member name="T:c_V2C">
            <summary>
            Computes the combined MD5/SHA1 hash for the input data.
            </summary>
            <remarks>
            The resulting hash value is 36 bytes long.
            Bytes 0..15 contain the MD5 hash and bytes 16..35 contain the SHA1 hash.
            </remarks>
        </member>
        <member name="M:c_V2C.#ctor">
            <summary>
            Initializes a new instance of the MD5SHA1 class.
            </summary>
        </member>
        <member name="M:c_V2C.Initialize">
            <summary>
            Initializes an instance of MD5SHA1.
            </summary>
        </member>
        <member name="M:c_V2C.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into MD5 and SHA1 hash algorithms for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:c_V2C.HashFinal">
            <summary>
            Returns the computed MD5SHA1 hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
        </member>
        <member name="M:c_V2C.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MD5SHA1 and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:c_V2C.c_G0A">
            <summary>
            Returns the underlying instance of the MD5 object that is used to compute the MD5 part of the combined hash.
            </summary>
        </member>
        <member name="P:c_V2C.c_H0A">
            <summary>
            Returns the underlying instance of the SHA1 object that is used to compute the SHA1 part of the combined hash.
            </summary>
        </member>
        <member name="T:c_S0A">
            <summary>
            Managed implementation of MD5 algorithm.
            </summary>
        </member>
        <member name="M:c_S0A.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:c_S0A.Initialize">
            <summary>
            Initializes an instance of MD5.
            </summary>
        </member>
        <member name="M:c_S0A.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the MD5 hash code.
            </summary>
            <param name="buffer">The array of data bytes.</param>
            <param name="offset">The zero based offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:c_S0A.HashFinal">
            <summary>
            Returns the computed MD5 hash as an array of bytes.
            </summary>
            <returns>The computed MD5 hash value.</returns>
        </member>
        <member name="T:c_FBB">
            <summary>
            Managed implementation of MD4 algorithm.
            </summary>
        </member>
        <member name="M:c_FBB.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:c_FBB.Initialize">
            <summary>
            Initializes an instance of MD4.
            </summary>
        </member>
        <member name="M:c_FBB.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the MD4 hash code.
            </summary>
            <param name="buffer">The array of data bytes.</param>
            <param name="offset">The zero based offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:c_FBB.HashFinal">
            <summary>
            Returns the computed MD4 hash as an array of bytes.
            </summary>
            <returns>The computed MD4 hash value.</returns>
        </member>
        <member name="T:c_ANC">
            <summary>
            Represents a cryptographic object identifier.
            </summary>
        </member>
        <member name="M:c_ANC.#ctor(c_ANC)">
            <summary>
            Initializes a new instance of the <see cref="!:ObjectIdentifier"/> class using the specified object. 
            </summary>
            <param name="oid">The object identifier information to use to create the new object identifier.</param>
        </member>
        <member name="M:c_ANC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:ObjectIdentifier"/> class using the specified OID dotted number string.
            </summary>
            <param name="oid">An object identifier in dotted number format.</param>
        </member>
        <member name="M:c_ANC.op_Implicit(System.String)~c_ANC">
            <summary>
            Converts a <see cref="T:System.String"/> OID to an <see cref="!:ObjectIdentifier"/>.
            </summary>
            <param name="oid">An object identifier in dotted number format.</param>
            <returns>An <see cref="!:ObjectIdentifier"/>.</returns>
        </member>
        <member name="M:c_ANC.c_G5(System.Byte[])">
            <summary>
            Parses an OID from an ASN.1 encoded byte array.
            </summary>
            <param name="buffer">Byte array.</param>
            <returns>OID.</returns>
        </member>
        <member name="M:c_ANC.c_GKB">
            <summary>
            Gets an ASN.1 encoded byte array representaion of this OID.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:c_ANC.c_GKB(System.Boolean)">
            <summary>
            Gets an ASN.1 encoded byte array representaion of this OID.
            </summary>
            <param name="useDer">True if DER-formatting is to be used.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:c_ANC.ToString">
            <summary>
            Returns a string in dotted number format that represents the current <see cref="!:ObjectIdentifier"/>.
            </summary>
            <returns>A string representation of the current Oid.</returns>
        </member>
        <member name="P:c_ANC.c_J3">
            <summary>
            Gets the dotted number representation of the object identifier.
            </summary>
        </member>
        <member name="T:c_A3C">
            <summary>
            Implements password-based key derivation functionality PBKDF1 specified by RFC 2898,
            with extension of OpenSSL PBKD to allow longer keys to be generated.
            </summary>
        </member>
        <member name="M:c_A3C.Reset">
            <summary>Resets the state of the operation.</summary>
        </member>
        <member name="M:c_A3C.GetBytes(System.Int32)">
            <summary>Returns a pseudo-random key from a password, salt and iteration count.</summary>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
            <param name="cb">The number of pseudo-random key bytes to generate. </param>
        </member>
        <member name="P:c_A3C.c_F3C">
            <summary>Gets or sets the number of iterations for the operation.</summary>
            <returns>The number of iterations for the operation.</returns>
        </member>
        <member name="P:c_A3C.c_E3C">
            <summary>Gets or sets the key salt value for the operation.</summary>
            <returns>The key salt value for the operation.</returns>
        </member>
        <member name="T:c_J3C">
            <summary>
            PKCS #12 key derivation algorithm.
            </summary>
        </member>
        <member name="F:c_J3C.c_L3C">
            <summary>
            ID value for key material.
            </summary>
        </member>
        <member name="F:c_J3C.c_N3C">
            <summary>
            ID value for IV material.
            </summary>
        </member>
        <member name="F:c_J3C.c_O3C">
            <summary>
            ID value for MAC material.
            </summary>
        </member>
        <member name="M:c_J3C.Reset">
            <summary>Resets the state of the operation.</summary>
        </member>
        <member name="M:c_J3C.GetBytes(System.Int32)">
            <summary>Returns a pseudo-random key from a password, salt and iteration count.</summary>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
            <param name="cb">The number of pseudo-random key bytes to generate. </param>
        </member>
        <member name="T:c_GWC">
            <summary>
            Managed implementation of RSA algorithm.
            </summary>
            <p>
            The purpose of this class is to make it possible to verify
            signatures and encrypt data without the need to use CryptoAPI, which
            is not available in some scenarios.
            </p>
            <p>
            Even though it is possible to generate RSA keys and sign data using
            this class, it is not recommended because the generated keys are not
            being checked to ensure they are strong primes.
            </p>
        </member>
        <member name="M:c_GWC.#ctor">
            <summary>
            Initializes a new instance of the RSAManaged class with the key size of 1024.
            </summary>
        </member>
        <member name="M:c_GWC.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RSAManaged class with the specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
        </member>
        <member name="M:c_GWC.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The RSA parameters.</returns>
        </member>
        <member name="M:c_GWC.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            Imports the specified <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <param name="parameters">The RSA parameters.</param>
        </member>
        <member name="M:c_GWC.DecryptValue(System.Byte[])">
            <summary>
            Decrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be decrypted.</param>
            <returns>The decrypted data.</returns>
            <remarks>No processing of raw data is performed.</remarks>
        </member>
        <member name="M:c_GWC.EncryptValue(System.Byte[])">
            <summary>
            Encrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be encrypted.</param>
            <returns>The encrypted data.</returns>
            <remarks>No processing of raw data is performed.</remarks>
        </member>
        <member name="M:c_GWC.c_PFC(System.Byte[])">
            <summary>
            Decrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be decrypted.</param>
            <returns>The decrypted data.</returns>
            <remarks>Uses PKCS#1 v1.5 padding.</remarks>
        </member>
        <member name="M:c_GWC.c_OFC(System.Byte[])">
            <summary>
            Encrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be encrypted.</param>
            <returns>The encrypted data.</returns>
            <remarks>Uses PKCS#1 v1.5 padding.</remarks>
        </member>
        <member name="M:c_GWC.c_LFC(System.Security.Cryptography.RSA,System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_GWC.c_LFC(System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:c_GWC.c_NFC(System.Security.Cryptography.RSA,System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="rgbHash">The hash of data to be signed.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <returns>The RSA signature for the specified hash value.</returns>
        </member>
        <member name="M:c_GWC.c_NFC(System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rgbHash">The hash of data to be signed.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <returns>The RSA signature for the specified hash value.</returns>
        </member>
        <member name="M:c_GWC.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:c_GWC.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of RSA.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="P:c_GWC.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of RSA.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:c_Z4B">
            <summary>
            Specifies symmetric algorithm.
            </summary>
        </member>
        <member name="F:c_Z4B.c_B5B">
            <summary>
            AES.
            </summary>
        </member>
        <member name="F:c_Z4B.c_A5B">
            <summary>
            3DES.
            </summary>
        </member>
        <member name="F:c_Z4B.c_G5B">
            <summary>
            Twofish.
            </summary>
        </member>
        <member name="F:c_Z4B.c_R4C">
            <summary>
            DES.
            </summary>
        </member>
        <member name="F:c_Z4B.c_S4C">
            <summary>
            RC2.
            </summary>
        </member>
        <member name="F:c_Z4B.c_C5B">
            <summary>
            An algorithm compatible with RC4.
            </summary>
        </member>
        <member name="F:c_Z4B.c_F5B">
            <summary>
            Blowfish.
            </summary>
        </member>
        <member name="T:c_Y4B">
            <summary>
            Represents a symmetric cipher algorithm.
            </summary>
        </member>
        <member name="M:c_Y4B.c_Y4C">
            <summary>
            Gets the current initialization vector.
            </summary>
            <returns>Initialization vector.</returns>
        </member>
        <member name="M:c_Y4B.c_G1A">
            <summary>
            Gets the current key.
            </summary>
            <returns>Key.</returns>
        </member>
        <member name="M:c_Y4B.c_Z4C(System.Security.Cryptography.DeriveBytes)">
            <summary>
            Derives a key (of <see cref="!:KeySize"/> length) using the specified generator.
            </summary>
            <param name="generator">Generator algorithm.</param>
        </member>
        <member name="M:c_Y4B.c_B5C(System.Security.Cryptography.DeriveBytes)">
            <summary>
            Derives an initialization vector (of <see cref="!:BlockSize"/> length) using the specified generator.
            </summary>
            <param name="generator">Generator algorithm.</param>
        </member>
        <member name="M:c_Y4B.c_XWC">
            <summary>
            Generates a random key (of <see cref="!:KeySize"/> length).
            </summary>
        </member>
        <member name="M:c_Y4B.c_C5C">
            <summary>
            Generates a initialization vector (of <see cref="!:BlockSize"/> length).
            </summary>
        </member>
        <member name="M:c_Y4B.c_H1A(System.Byte[])">
            <summary>
            Sets the current key to the specified value and changes the <see cref="!:KeySize"/> accordingly.
            </summary>
            <param name="key">Key. Cannot be null.</param>
        </member>
        <member name="M:c_Y4B.c_K5B(System.Byte[])">
            <summary>
            Sets the current initialization vector to the specified value.
            </summary>
            <param name="iv">Initialization vector.</param>
        </member>
        <member name="M:c_Y4B.c_J5B">
            <summary>
            Creates an encryptor object for this algorithm based on the currently set parameters.
            </summary>
            <returns>Encryptor object.</returns>
        </member>
        <member name="M:c_Y4B.c_M5B">
            <summary>
            Creates a decryptor object for this algorithm based on the currently set parameters.
            </summary>
            <returns>Decryptor object.</returns>
        </member>
        <member name="M:c_Y4B.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:c_Y4B.#ctor(c_Z4B)">
            <summary>
            Creates an instance of <see cref="!:SymmetricKeyAlgorithmId"/> for the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm.</param>
        </member>
        <member name="M:c_Y4B.c_J1A(c_Z4B)">
            <summary>
            Gets a value indicating whether the specified algorithm is supported.
            </summary>
            <param name="algorithm">Algorithm.</param>
            <returns>True if supported; false if not supported.</returns>
        </member>
        <member name="P:c_Y4B.c_L1A">
            <summary>
            Gets algorithm ID.
            </summary>
        </member>
        <member name="P:c_Y4B.c_G6B">
            <summary>
            Gets or sets the desired block size.
            </summary>
        </member>
        <member name="P:c_Y4B.c_W5B">
            <summary>
            Gets or sets the desired key size.
            </summary>
        </member>
        <member name="P:c_Y4B.c_F5C">
            <summary>
            Gets or sets the desired effective key size.
            </summary>
        </member>
        <member name="P:c_Y4B.c_H6B">
            <summary>
            Gets or sets the desired block cipher padding mode.
            </summary>
        </member>
        <member name="P:c_Y4B.c_J6B">
            <summary>
            Gets or sets the desired block cipher mode.
            </summary>
        </member>
        <member name="T:c_G5C">
            <summary>
            Represents the base class from which all implementations of Bruce Schneier's Twofish algorithm must derive.
            </summary>
        </member>
        <member name="M:c_G5C.#ctor">
            <summary>
            Initializes a new instance of Twofish.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="!:TwofishManaged"/> class instead.
            </remarks>
        </member>
        <member name="T:c_G0C">
            <summary>
            The managed version of the Twofish algorithm.
            </summary>
        </member>
        <member name="M:c_G0C.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:TwofishManaged"/> class.
            </summary>
        </member>
        <member name="M:c_G0C.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random initialization vector (IV) when none is specified.</remarks>
        </member>
        <member name="M:c_G0C.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:c_G0C.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Twofish encryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Twofish encryptor object.</returns>
        </member>
        <member name="M:c_G0C.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Twofish decryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Twofish decryptor object.</returns>
        </member>
        <member name="P:c_G0C.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:c_G0C.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
        </member>
        <member name="T:c_JEC">
            <summary>
            Represents a distinguished name.
            </summary>
        </member>
        <member name="M:c_JEC.#ctor(System.Byte[])">
            <summary>
            Creates an instance of distingushed name from an ASN.1 block.
            </summary>
            <param name="dn">ASN.1 block.</param>
        </member>
        <member name="M:c_JEC.#ctor(System.String)">
            <summary>
            Creates an instance of distingushed name from a DN string.
            </summary>
            <param name="dn">DN string.</param>
        </member>
        <member name="M:c_JEC.c_OEC">
            <summary>
            Returns the DN's common name, if available.
            </summary>
            <returns>Common name; or null if not available.</returns>
        </member>
        <member name="M:c_JEC.c_TEC">
            <summary>
            Returns the list of DN's e-mail addresses.
            </summary>
            <returns>The list of addresses.</returns>
        </member>
        <member name="M:c_JEC.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">Object to compare with the current object.</param>
            <returns>True if equal; false if not equal.</returns>
        </member>
        <member name="M:c_JEC.GetHashCode">
            <summary>
            Servers as a hash function for a particular type. Suitable for use in hashing algorithms and hash tables.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:c_JEC.c_GKB">
            <summary>
            Converts a distinguished name into a byte array.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:c_JEC.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A DN string.</returns>
        </member>
        <member name="M:c_JEC.c_Q8C(System.String)">
            <summary>
            Converts string DN to its BER-encoded representation.
            </summary>
            <param name="dn">String DN.</param>
            <returns>BER-encoded DN.</returns>
        </member>
        <member name="M:c_JEC.c_YL(System.Byte[])">
            <summary>
            Converts BER-encoded representation of DB to its string representation.
            </summary>
            <param name="dn">BER-encoded DN.</param>
            <returns>String DN.</returns>
        </member>
        <member name="P:c_JEC.c_RK">
            <summary>
            Gets the distinguished name.
            </summary>
        </member>
        <member name="T:c_EEC">
            <summary>
            Represents a collection of CRL distribution points.
            </summary>
        </member>
        <member name="M:c_EEC.#ctor">
            <summary>
            Creates a new instance of <see cref="!:CrlDistributionPointCollection"/>.
            </summary>
        </member>
        <member name="M:c_EEC.c_VFC(c_XAD)">
            <summary>
            Adds a <see cref="!:CrlDistributionPoint"/> to the collection.
            </summary>
            <param name="distributionPoint">A distribution point to add.</param>
        </member>
        <member name="M:c_EEC.c_WLC(c_XAD)">
            <summary>
            Removes a <see cref="!:CrlDistributionPoint"/> from the collection.
            </summary>
            <param name="distributionPoint">A distribution point to remove.</param>
        </member>
        <member name="M:c_EEC.c_V3B">
            <summary>
            Removes all certificates from the collection.
            </summary>
        </member>
        <member name="M:c_EEC.c_BKB(c_XAD[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:CrlDistributionPointCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:CrlDistributionPointCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_EEC.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:CrlDistributionPoint"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:CrlDistributionPoint"/> to get.</param>
            <value>A distribution point.</value>
        </member>
        <member name="T:c_XAD">
            <summary>
            A CRL distribution point.
            </summary>
        </member>
        <member name="M:c_XAD.#ctor(System.String)">
            <summary>
            Create a new instance of a CRL distribution point that represents the specified URL.
            </summary>
            <param name="url">CRL URL.</param>
        </member>
        <member name="P:c_XAD.c_CBD">
            <summary>
            Gets distribution point URL, if available.
            </summary>
            <value>Distribution point URL, or null if not available.</value>
        </member>
        <member name="T:c_KNC">
            <summary>
            The AlgorithmIdentifier class defines an algorithm used for a cryptographic operation.
            </summary>
        </member>
        <member name="M:c_KNC.#ctor(c_ANC)">
            <summary>
            Creates an instance of the <see cref="!:AlgorithmIdentifier"/> class
            with the specified algorithm identifier.
            </summary>
            <param name="oid">An object identifier for the algorithm.</param>
        </member>
        <member name="M:c_KNC.#ctor(c_ANC,System.Byte[])">
            <summary>
            Creates an instance of the <see cref="!:AlgorithmIdentifier"/> class with
            the specified algorithm identifier and parameters.
            </summary>
            <param name="oid">An object identifier for the algorithm.</param>
            <param name="parameters">ASN.1 DER encoded parameters.</param>
        </member>
        <member name="P:c_KNC.c_N9B">
            <summary>
            Gets the object identifier for the algorithm.
            </summary>
            <value>On <see cref="T:System.Security.Cryptography.Oid"/> that represents the algorithm.</value>
        </member>
        <member name="P:c_KNC.c_BJC">
            <summary>
            Gets the algorithm parameters.
            </summary>
            <value>The alogirithm parameters.</value>
        </member>
        <member name="T:c_SCD">
            <summary>
            A collection of values associated with a <see cref="!:CryptographicAttributeNode"/>.
            </summary>
        </member>
        <member name="M:c_SCD.c_BKB(System.Byte[][],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:CryptographicAttributeValueCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:CryptographicAttributeValueCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_SCD.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:c_TCD">
            <summary>
            A cryptographic attribute that contains a type and a collection of associated values.
            </summary>
        </member>
        <member name="M:c_TCD.#ctor(c_ANC,System.Collections.ICollection)">
            <summary>
            Initializes an instance of a <see cref="!:CryptographicAttributeNode"/>.
            </summary>
            <param name="oid">The object identifier that identifies the attribute type.</param>
            <param name="values">Parameters in ASN.1 format, in a form of one or more byte arrays.</param>
        </member>
        <member name="M:c_TCD.#ctor(c_ANC,System.Byte[][])">
            <summary>
            Initializes an instance of a <see cref="!:CryptographicAttributeNode"/>.
            </summary>
            <param name="oid">The object identifier that identifies the attribute type.</param>
            <param name="values">Parameters in ASN.1 format.</param>
            <remarks>Not supported in .NET 1.0, use <see cref="!:CryptographicAttributeNode(ObjectIdentifier, ICollection)"/> instead.</remarks>
        </member>
        <member name="P:c_TCD.c_N9B">
            <summary>
            Gets the object identifier that identifies the attribute type.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:c_TCD.c_YCD">
            <summary>
            Gets the collection of values associated with the attribute. 
            </summary>
            <value>A <see cref="!:CryptographicAttributeValueCollection"/>.</value>
        </member>
        <member name="T:c_VCD">
            <summary>
            A collection of <see cref="!:CryptographicAttributeNode"/> objects.
            </summary>
        </member>
        <member name="M:c_VCD.c_VFC(c_TCD)">
            <summary>
            Adds a <see cref="!:CryptographicAttributeNode"/> to the collection.
            </summary>
            <param name="attribute">A cryptographic attribute to add.</param>
        </member>
        <member name="M:c_VCD.c_WLC(c_TCD)">
            <summary>
            Removes a <see cref="!:CryptographicAttributeNode"/> from the collection.
            </summary>
            <param name="attribute">A cryptographic attribute to remove.</param>
        </member>
        <member name="M:c_VCD.c_BKB(c_TCD[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:CryptographicAttributeCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:CryptographicAttributeCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_VCD.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:CryptographicAttributeNode"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:CryptographicAttributeNode"/> to get or set.</param>
            <value>A cryptographic attribute.</value>
        </member>
        <member name="P:c_VCD.Item(System.String)">
            <summary>
            Gets the first <see cref="!:CryptographicAttributeNode"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>A cryptographic attribute if found, or null if not found.</value>
        </member>
        <member name="T:c_BQC">
            <summary>
            Contains string representations of common extended usage OIDs.
            </summary>
        </member>
        <member name="F:c_BQC.c_ZQC">
            <summary>Any purpose.</summary>
        </member>
        <member name="F:c_BQC.c_AQC">
            <summary>TLS Web server authentication.</summary>
        </member>
        <member name="F:c_BQC.c_ZPC">
            <summary>TLS Web client authentication.</summary>
        </member>
        <member name="F:c_BQC.c_FDD">
            <summary>Code signing.</summary>
        </member>
        <member name="F:c_BQC.c_GDD">
            <summary>E-mail protection.</summary>
        </member>
        <member name="F:c_BQC.c_HDD">
            <summary>Timestamping.</summary>
        </member>
        <member name="F:c_BQC.c_JDD">
            <summary>OCSPstamping.</summary>
        </member>
        <member name="T:c_CFC">
            <summary>
            A collection of <see cref="!:ObjectIdentifierCollection"/> objects.
            </summary>
        </member>
        <member name="M:c_CFC.c_VFC(c_ANC)">
            <summary>
            Adds a <see cref="!:ObjectIdentifierCollection"/> to the collection.
            </summary>
            <param name="oid">An object identifier to add.</param>
        </member>
        <member name="P:c_CFC.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:ObjectIdentifierCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:ObjectIdentifierCollection"/> to get or set.</param>
            <value>An object identifier.</value>
        </member>
        <member name="T:c_JED">
            <summary>
            A utility class that features a certificate issuer functionality. This can be used as a base of simple custom certification authority.
            </summary>
        </member>
        <member name="M:c_JED.c_MED(c_RCC,ComponentPro.Security.Certificates.HashAlgorithmType,c_ZVC,c_KED)">
            <summary>
            Issues a certificate signed by the specified certification authority using the specified signature hash algorithm.
            </summary>
            <param name="certificationAuthority">Certification authority certificate to issue and sign the certificate.</param>
            <param name="signatureHashAlgorithm">Signature hash algorithm.</param>
            <param name="publicKey">Certificate public key.</param>
            <param name="certificateInfo">Certificate info.</param>
            <returns>A new certificate.</returns>
        </member>
        <member name="M:c_JED.c_MED(c_SCC,System.Int32,ComponentPro.Security.Certificates.HashAlgorithmType,c_KED,c_WCC@)">
            <summary>
            Issues a self-signed certificate, signed using the specified algorithm. Also passes back the private key info.
            </summary>
            <param name="keyAlgorithm">Signature algorithm.</param>
            <param name="keySize">Key size.</param>
            <param name="signatureHashAlgorithm">Signature hash algorithm.</param>
            <param name="certificateInfo">Certificate info.</param>
            <param name="privateKey">This will contain the <see cref="!:PrivateKeyInfo"/> on return.</param>
            <returns>A new certificate.</returns>
        </member>
        <member name="M:c_JED.c_GFD(c_RCC,ComponentPro.Security.Certificates.HashAlgorithmType,c_QED,System.Collections.IEnumerable)">
            <summary>
            Issues a certificate signed by the specified certification authority using the specified signature hash algorithm.
            </summary>
            <param name="certificationAuthority">Certification authority certificate to issue and sign the certificate.</param>
            <param name="signatureHashAlgorithm">Signature hash algorithm.</param>
            <param name="revocationListInfo">Certificate revocation list info.</param>
            <param name="revokedCertificates">A collection of <see cref="!:RevokedCertificate"/> objects.</param>
            <returns>A new certificate.</returns>
        </member>
        <member name="T:c_KED">
            <summary>
            Contains information describing the certificate for the <see cref="!:CertificateIssuer"/>.<see cref="!:CertificateIssuer.Issue(Certificate, HashAlgorithmType, PublicKeyInfo, CertificateInfo)">Issue</see> method.
            </summary>
        </member>
        <member name="M:c_KED.#ctor">
            <summary>
            Creates an instance of <see cref="!:CertificateInfo"/> class.
            </summary>
        </member>
        <member name="M:c_KED.c_QJC">
            <summary>
            Gets the certificate serial number.
            </summary>
            <returns>Serial number.</returns>
        </member>
        <member name="M:c_KED.c_RED(System.Byte[])">
            <summary>
            Sets the certificate serial number.
            </summary>
            <param name="serialNumber">Serial number.</param>
        </member>
        <member name="M:c_KED.c_RED(System.Int32)">
            <summary>
            Sets the certificate serial number.
            </summary>
            <param name="serialNumber">Serial number.</param>
        </member>
        <member name="M:c_KED.c_LED">
            <summary>
            Gets the extended certificate usage.
            </summary>
            <value>Extended certificate usage.</value>
        </member>
        <member name="M:c_KED.c_QFD(System.String[])">
            <summary>
            Sets the extended certificate usage.
            </summary>
            <param name="extendedUsage">Extended certificate usage.</param>
        </member>
        <member name="M:c_KED.c_RFD(System.String[])">
            <summary>
            Sets alternative hostnames.
            </summary>
            <param name="hostnames">Alternative hostnames.</param>
        </member>
        <member name="M:c_KED.c_NED">
            <summary>
            Sets alternative hostnames.
            </summary>
            <returns>Alternative hostnames.</returns>
        </member>
        <member name="P:c_KED.c_YDD">
            <summary>
            Gets or sets the certificate subject.
            </summary>
            <value>Certificate subject.</value>
        </member>
        <member name="P:c_KED.c_XED">
            <summary>
            Gets or sets the basic certificate usage.
            </summary>
            <value>Basic certificate usage.</value>
        </member>
        <member name="P:c_KED.c_ZDD">
            <summary>
            Gets or sets the certificate effective date.
            </summary>
            <value>Certificate effective date.</value>
        </member>
        <member name="P:c_KED.c_AED">
            <summary>
            Gets or sets the certificate expiration date.
            </summary>
            <value>Certificate expiration date.</value>
        </member>
        <member name="P:c_KED.c_PJC">
            <summary>
            Gets the certificate extensions collection.
            </summary>
            <value>Certificate extensions collection.</value>
        </member>
        <member name="P:c_KED.c_VED">
            <summary>
            Gets the CRL distribution points collection.
            </summary>
            <value>CRL distribution points collection.</value>
        </member>
        <member name="P:c_KED.c_AFD">
            <summary>
            Gets or sets the certificate owner's e-mail address.
            </summary>
            <value>E-mail address.</value>
        </member>
        <member name="T:c_QED">
            <summary>
            Contains information describing the certificate for the <see cref="!:CertificateIssuer"/>.<see cref="!:CertificateIssuer.IssueRevocationList(Certificate, HashAlgorithmType, RevocationListInfo, IEnumerable)">IssueRevocationList</see> method.
            </summary>
        </member>
        <member name="M:c_QED.#ctor">
            <summary>
            Creates an instance of <see cref="!:RevocationListInfo"/> class.
            </summary>
        </member>
        <member name="P:c_QED.c_XOC">
            <summary>
            Gets or sets the datetime of this CRL update.
            </summary>
            <value>Datetime of this CRL update.</value>
        </member>
        <member name="P:c_QED.c_YOC">
            <summary>
            Gets or sets the datetime of the next CRL update.
            </summary>
            <value>Datetime of the next CRL update.</value>
        </member>
        <member name="T:c_TFD">
            <summary>
            A SPKAC certificate request. This is used by Mozilla, Opera and other browsers except Internet Explorer.
            For Internet Explorer, use <see cref="!:CertificationRequest"/>.
            </summary>
        </member>
        <member name="M:c_TFD.#ctor(System.Byte[])">
            <summary>
            Creates a SPKAC request from an ASN.1 block.
            </summary>
            <param name="request">ASN.1 block.</param>
        </member>
        <member name="M:c_TFD.c_YUB(System.String)">
            <summary>
            Validates the SPKAC request's signature.
            </summary>
            <param name="challenge">Challenge string.</param>
            <returns>True if valid; false if not valid.</returns>
        </member>
        <member name="P:c_TFD.c_BGD">
            <summary>
            Gets the SPKAC request's public key info. This includes the key itself.
            </summary>
            <value>Public key info.</value>
        </member>
        <member name="T:c_VFD">
            <summary>
            PKCS #10 certificate request. This is the standard certificate format and is used by Internet Explorer's XEnroll control.
            Non-IE browsers generally use <see cref="!:SignedPublicKeyAndChallenge"/> instead.
            </summary>
        </member>
        <member name="M:c_VFD.#ctor(System.Byte[])">
            <summary>
            Creates a PKCS #10 request from an ASN.1 block.
            </summary>
            <param name="request">ASN.1 block.</param>
        </member>
        <member name="M:c_VFD.c_YUB(c_JEC)">
            <summary>
            Validates the PKCS #10 request's signature.
            </summary>
            <param name="subject">Subject - in practice, this is used in place of a challenge string.</param>
            <returns>True if valid; false if not valid.</returns>
        </member>
        <member name="M:c_VFD.c_NED">
            <summary>
            Gets list of alternative hostnames.
            </summary>
            <returns>List of alternative hostnames.</returns>
        </member>
        <member name="P:c_VFD.c_BGD">
            <summary>
            Gets the PKCS #10 request's public key info. This includes the key itself.
            </summary>
            <value>Public key info.</value>
        </member>
        <member name="P:c_VFD.c_YDD">
            <summary>
            Gets the PKCS #10 request's subject.
            </summary>
            <value>Request subject.</value>
        </member>
        <member name="P:c_VFD.c_DGD">
            <summary>
            Gets the PKCS #10 request's subject.
            </summary>
            <value>Request attributes.</value>
        </member>
        <member name="T:c_JGD">
            <summary>
            The <see cref="!:ContentInfo"/> class represents the CMS/PKCS #7 ContentInfo data structure.
            It encapsulates the content of <see cref="!:SignedData"/> or <see cref="!:EnvelopedData"/> messages.
            </summary>
        </member>
        <member name="M:c_JGD.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="!:ContentInfo"/> using the specified array of bytes
            as content and an object identifier "data" as content type. 
            </summary>
            <param name="content">The message content.</param>
        </member>
        <member name="M:c_JGD.#ctor(c_ANC,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="!:ContentInfo"/> using the specified array of bytes
            as content and the specified object identifier as content type. 
            </summary>
            <param name="contentType">The message content type.</param>
            <param name="content">The message content.</param>
        </member>
        <member name="P:c_JGD.c_QGD">
            <summary>
            Gets the object identifier of the CMS/PKCS #7 message content type.
            </summary>
        </member>
        <member name="P:c_JGD.c_GEA">
            <summary>
            Gets the content of the CMS/PKCS #7 message.
            </summary>
            <value>An array of bytes that represent the content data.</value>
        </member>
        <member name="T:c_CHD">
            <summary>
            Represents a CMS/PKCS #7 encrypted data.
            </summary>
        </member>
        <member name="M:c_CHD.c_MHD">
            <summary>
            Gets the symmetric key used to encrypt the message,
            or null if it is cannot be retrieved.
            </summary>
            <returns>The symmetric key used to encrypt the message, or null.</returns>
        </member>
        <member name="M:c_CHD.c_WGD">
            <summary>
            Gets the symmetric algorithm used to encrypt or decrypt the content,
            or null if it cannot be retrieved.
            </summary>
            <returns>The <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</returns>
        </member>
        <member name="M:c_CHD.c_OFC">
            <summary>
            Encrypts the contents of the CMS/PKCS #7 message.
            </summary>
        </member>
        <member name="M:c_CHD.c_PFC">
            <summary>
            Decrypts the contents of the CMS/PKCS #7 message.
            </summary>
            <remarks>For a successful decryption, a symmetric key must be available.</remarks>
        </member>
        <member name="M:c_CHD.c_OHD">
            <summary>
            Creates a receiving stream for this CMS/PKCS #7 message.
            </summary>
            <returns>A write-only receiving stream.</returns>
            <remarks>
            Receiving stream accepts raw CMS/PKCS #7 signed message data.
            Before all the data has been written and the stream has been closed,
            no methods or properties of <see cref="!:SignedData"/> should be accessed.
            </remarks>
        </member>
        <member name="M:c_CHD.c_NAC(System.Byte[])">
            <summary>
            Decodes an encoded CMS/PKCS #7 encrypted message from raw data.
            Upon successful decoding, information can be retrieved using <see cref="!:EnvelopedData"/>
            methods and properties.
            </summary>
            <param name="encodedMessage">Arrays of bytes representing a CMS/PKCS #7 message.</param>
        </member>
        <member name="M:c_CHD.c_QBC">
            <summary>
            Encodes the <see cref="!:EnvelopedData"/> object into CMS/PKCS #7 message data.
            </summary>
            <returns>Array of bytes representing a CMS/PKCS #7 message.</returns>
        </member>
        <member name="M:c_CHD.c_LJD(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Determines whether the specified content info ASN.1 sequence is an enveloped data sequence.
            </summary>
            <param name="data">Sequence data.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
            <returns>True if yes; false if not.</returns>
        </member>
        <member name="M:c_CHD.c_XCC(System.IO.Stream)">
            <summary>
            Loads a CMS/PKCS #7 encrypted message from a stream.
            Upon successful decoding, information can be retrieved using <see cref="!:EnvelopedData"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the message.</param>
        </member>
        <member name="M:c_CHD.c_CAC(System.IO.Stream)">
            <summary>
            Saves <see cref="!:EnvelopedData"/> into a stream.
            </summary>
            <param name="output">A stream to which to save the message.</param>
        </member>
        <member name="M:c_CHD.c_XAB">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A new object.</returns>
        </member>
        <member name="M:c_CHD.#ctor">
            <summary>
            Creates an instance of <see cref="!:EnvelopedData"/> class.
            It must be initialized using <see cref="!:Load"/> or <see cref="!:Decode"/> methods before
            any other methods and properties can be accessed.
            </summary>
        </member>
        <member name="M:c_CHD.#ctor(c_JGD)">
            <summary>
            Creates an instance of <see cref="!:SignedData"/> class using the specified content
            information as the inner content.
            </summary>
            <param name="contentInfo">The inner content of the encrypted message.</param>
        </member>
        <member name="M:c_CHD.#ctor(c_JGD,c_ANC)">
            <summary>
            Creates an instance of <see cref="!:EnvelopedData"/> class using the specified content
            information and encryption algorithm.
            </summary>
            <param name="contentInfo">The inner content of the encrypted message.</param>
            <param name="encryptionAlgorithm">Encryption algorithm identifier (see remarks).</param>
            <remarks>
            Currently, 3DES ("1.2.840.113549.3.7"),
            AES ("2.16.840.1.101.3.4.1.2" for 128-bit, "2.16.840.1.101.3.4.1.22" for 192-bit and "2.16.840.1.101.3.4.1.42" for 256-bit),
            DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") algorithms are supported.
            </remarks>
        </member>
        <member name="M:c_CHD.#ctor(c_JGD,c_ANC,System.Int32)">
            <summary>
            Creates an instance of <see cref="!:EnvelopedData"/> class using the specified content
            information and encryption algorithm.
            </summary>
            <param name="contentInfo">The inner content of the encrypted message.</param>
            <param name="encryptionAlgorithm">Encryption algorithm identifier (see remarks).</param>
            <param name="keyLength">The effective key length in bits (only used by RC2 algorithm).</param>
            <remarks>
            Currently, 3DES ("1.2.840.113549.3.7"),
            AES ("2.16.840.1.101.3.4.1.2" for 128-bit, "2.16.840.1.101.3.4.1.22" for 192-bit and "2.16.840.1.101.3.4.1.42" for 256-bit),
            DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") algorithms are supported.
            </remarks>
        </member>
        <member name="P:c_CHD.c_OJD">
            <summary>
            Gets or sets the <see cref="!:ICertificateFinder"/> to be used to find certificates
            corresponding to a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>.
            </summary>
            <value>The certificate finder.</value>
        </member>
        <member name="P:c_CHD.c_PJD">
            <summary>
            Gets or sets a value indicating whether Cryptographic Service Provider (CSP) operations
            are permitted to display any user interface.
            </summary>
            <value>A value indicating whether CSP can display UI.</value>
        </member>
        <member name="P:c_CHD.c_QJD">
            <summary>
            Gets a value indicating whether the content is encrypted.
            </summary>
            <value>A value indicating whether the content is encrypted.</value>
        </member>
        <member name="P:c_CHD.c_RJD">
            <summary>
            Gets the collection of unprotected (unencrypted) attributes associated with this CMS/PKCS #7 message.
            </summary>
            <value>Unprotected attribute collection.</value>
        </member>
        <member name="P:c_CHD.c_SMC">
            <summary>
            Gets the collection of certificates that are embedded in the message.
            </summary>
            <value>Collection of certificates</value>
        </member>
        <member name="P:c_CHD.c_THD">
            <summary>
            Gets the collection of certificate revocation lists (CRLs) that are embedded in the message.
            </summary>
            <value>Collection of CRLs</value>
        </member>
        <member name="P:c_CHD.c_SJD">
            <summary>
            Gets the collection of recipients associated with this CMS/PKCS #7 message.
            </summary>
            <value>A collection of recipients.</value>
        </member>
        <member name="P:c_CHD.c_CJD">
            <summary>
            Gets the inner content information for this CMS/PKCS #7 message.
            It contains the content type identifier and content data.
            </summary>
            <value>The inner content.</value>
            <remarks>
            This method returns the encrypted content for parsed messages
            and unencrypted content for newly created messages. To encrypt or decrypt
            the content, use <see cref="!:Encrypt"/> and <see cref="!:Decrypt"/> methods.
            </remarks>
        </member>
        <member name="P:c_CHD.c_XGD">
            <summary>
            Gets the identifier of the algorithm used to encrypt the content.
            </summary>
            <value>An <see cref="!:AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:c_CHD.c_QFC">
            <summary>
            Returns a value indicating whether the private key to decrypt the symmetric key
            and encrypted content is available.
            </summary>
            <value>True if the private key is available, false if it isn't.</value>
        </member>
        <member name="T:c_JHD">
            <summary>
            Defines the interface that certificate finder classes must implement.
            </summary>
        </member>
        <member name="M:c_JHD.c_VJD(ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier,c_B)">
            <summary>
            Finds a certificate corresponding to the specified subject indentifier.
            </summary>
            <param name="subjectIdentifier">Identifier of the subject certificate.</param>
            <param name="additionalStore">A certificate store containing the certificates that were included with the message.</param>
            <returns>Certificate chain if found, or null (Nothing in Visual Basic).</returns>
        </member>
        <member name="T:c_HHD">
            <summary>
            Provides a set of common certificate finders.
            </summary>
        </member>
        <member name="M:c_HHD.c_GKD(c_SFC[])">
            <summary>
            Certificate finder.
            </summary>
            <param name="certificates">CertificateChain array.</param>
            <returns>A new instance of ICertificateFinder.</returns>
        </member>
        <member name="F:c_HHD.c_NNA">
            <summary>
            Default certificate finder.
            </summary>
            <remarks>
            Searches for certificates in the current user's "My",
            "Trusted people" and "Other people" stores.
            </remarks>
        </member>
        <member name="T:c_AEC">
            <summary>
            Specifies private key file format.
            </summary>
        </member>
        <member name="F:c_AEC.c_TMD">
            <summary>Base64-encoded PKCS #8 format.</summary>
        </member>
        <member name="F:c_AEC.c_YKD">
            <summary>PuTTY PPKv2 format.</summary>
        </member>
        <member name="F:c_AEC.c_AMD">
            <summary>OpenSSH/OpenSSL SSLeay format.</summary>
        </member>
        <member name="F:c_AEC.c_CMD">
            <summary>Raw PKCS #8 format.</summary>
        </member>
        <member name="T:c_WCC">
            <summary>
            Represents an RSA or DSA private key.
            </summary>
        </member>
        <member name="M:c_WCC.#ctor">
            <summary>
            Creates a new instance of <see cref="!:PrivateKeyInfo"/>. Use the <see cref="!:Load"/> method to load a private key.
            </summary>
        </member>
        <member name="M:c_WCC.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates a new instance of <see cref="!:PrivateKeyInfo"/> based on the specified RSA parameters.
            </summary>
            <param name="parameters">RSA parameters including private keys.</param>
        </member>
        <member name="M:c_WCC.#ctor(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates a new instance of <see cref="!:PrivateKeyInfo"/> based on the specified DSA parameters.
            </summary>
            <param name="parameters">DSA parameters including private keys.</param>
        </member>
        <member name="M:c_WCC.c_JFC">
            <summary>
            Gets the raw form of the private key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:c_WCC.c_DDC">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA private keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:c_WCC.c_BDC">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA private keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:c_WCC.c_QBC">
            <summary>
            Gets ASN.1 encoded form of this <see cref="!:PrivateKeyInfo"/> object.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:c_WCC.c_CAC(System.IO.Stream,System.String,c_AEC)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:c_WCC.c_CAC(System.IO.Stream,System.String,c_ANC)">
            <summary>
            Saves the private key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">Encryption algorithm identifier. Ignored if password is null.</param>
            <remarks>
            Currently, 3DES ("1.2.840.113549.3.7"), DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") algorithms are supported.
            </remarks>
        </member>
        <member name="M:c_WCC.c_GMD">
            <summary>
            Gets the private key in PuTTY format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:c_WCC.c_FMD">
            <summary>
            Gets the public key in SSH format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:c_WCC.c_XCC(System.IO.Stream,System.String)">
            <summary>
            Loads a PKCS #8, PuTTY or SSLeay (OpenSSL/OpenSSH) format private key from a stream.
            Upon successful decoding, information can be retrieved using <see cref="!:PrivateKeyInfo"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if no password needed.</param>
        </member>
        <member name="P:c_WCC.c_PGC">
            <summary>
            Gets the key algorithm identifier.
            </summary>
            <value>Key algorithm identifier.</value>
        </member>
        <member name="P:c_WCC.c_JFA">
            <summary>
            Gets or ets the key comment. The comment is used while saving in some formats.
            </summary>
            <value>Key comment.</value>
        </member>
        <member name="T:c_ZVC">
            <summary>
            Represents an RSA or DSA public key.
            </summary>
        </member>
        <member name="M:c_ZVC.#ctor">
            <summary>
            Creates a new instance of <see cref="!:PublicKeyInfo"/>. Use the <see cref="!:PublicKeyInfo.Load"/> method to load a public key.
            </summary>
        </member>
        <member name="M:c_ZVC.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates a new instance of <see cref="!:PublicKeyInfo"/> based on the specified RSA parameters.
            </summary>
            <param name="parameters">RSA parameters.</param>
        </member>
        <member name="M:c_ZVC.#ctor(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates a new instance of <see cref="!:PublicKeyInfo"/> based on the specified DSA parameters.
            </summary>
            <param name="parameters">DSA parameters.</param>
        </member>
        <member name="M:c_ZVC.c_FFC">
            <summary>
            Gets the raw form of the public key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:c_ZVC.c_QBC">
            <summary>
            Gets ASN.1 encoded form of this <see cref="!:PublicKeyInfo"/> object.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:c_ZVC.c_DDC">
            <summary>
            Gets the DSA parameters for a DSA public key. May only be used for DSA public keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:c_ZVC.c_BDC">
            <summary>
            Gets the RSA parameters for a RSA public key. May only be used for RSA public keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:c_ZVC.c_DKC">
            <summary>
            Returns the size of the key in bits.
            </summary>
            <returns>Size of the key in bits.</returns>
        </member>
        <member name="M:c_ZVC.c_SND">
            <summary>
            Returns the key algorithm.
            </summary>
            <returns>Key algorithm.</returns>
        </member>
        <member name="M:c_ZVC.c_CAC(System.IO.Stream)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
        </member>
        <member name="M:c_ZVC.c_XCC(System.IO.Stream)">
            <summary>
            Loads a PKCS #8 public key from a stream.
            Upon successful decoding, information can be retrieved using <see cref="!:PublicKeyInfo"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the private key.</param>
        </member>
        <member name="P:c_ZVC.c_PGC">
            <summary>
            Gets the key algorithm identifier.
            </summary>
            <value>Key algorithm identifier.</value>
        </member>
        <member name="T:c_GHD">
            <summary>
            Represents a CMS/PKCS #7 encrypted message recipient.
            This class is inherited by <see cref="!:KeyAgreeRecipientInfo"/> and <see cref="!:KeyTransRecipientInfo"/> classes. 
            </summary>
        </member>
        <member name="P:c_GHD.c_ZPD">
            <summary>
            Gets the identifier of the recipient.
            </summary>
            <value>Identifier of the recipient.</value>
        </member>
        <member name="P:c_GHD.c_AQD">
            <summary>
            Gets the identifier of the algorithm used to encrypt the symmetric key.
            </summary>
            <value>An <see cref="!:AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:c_GHD.c_BQD">
            <summary>
            Gets the encrypted key for the recipient.
            </summary>
            <value>Encrypted key.</value>
        </member>
        <member name="P:c_GHD.c_CQD">
            <summary>
            Gets the certificate associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate, or null.</remarks>
        </member>
        <member name="P:c_GHD.c_DQD">
            <summary>
            Gets the certificate chain associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate chain, or null.</remarks>
        </member>
        <member name="T:c_QPD">
            <summary>
            Defines key transport recipient information, typically using the RSA algorithm to
            encrypt the shared symmetric key to transport.
            </summary>
        </member>
        <member name="M:c_QPD.#ctor(c_RCC)">
            <summary>
            Creates a new instance of <see cref="!:KeyTransRecipientInfo"/> that defines the
            key transport recipient information for the owner of the specified RSA certificate.
            </summary>
            <param name="recipientCertificate">The recipient's certificate.</param>
        </member>
        <member name="M:c_QPD.#ctor(c_RCC,ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType)">
            <summary>
            Creates a new instance of <see cref="!:KeyTransRecipientInfo"/> that defines the
            key transport recipient information for the owner of the specified RSA certificate
            and subject identifier type.
            </summary>
            <param name="recipientCertificate">The recipient's certificate.</param>
            <param name="recipientIdentifierType">Subject identifier type - only IssuerAndSerialNumber and SubjectKeyIdentifier values are accepted.</param>
        </member>
        <member name="P:c_QPD.c_ZPD">
            <summary>
            Gets the identifier of the recipient.
            </summary>
            <value>Identifier of the recipient.</value>
        </member>
        <member name="P:c_QPD.c_AQD">
            <summary>
            Gets the identifier of the algorithm used to encrypt the symmetric key.
            </summary>
            <value>An <see cref="!:AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:c_QPD.c_BQD">
            <summary>
            Gets the encrypted key for the recipient.
            </summary>
            <value>Encrypted key.</value>
        </member>
        <member name="P:c_QPD.c_CQD">
            <summary>
            Gets the certificate associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate, or null.</remarks>
        </member>
        <member name="P:c_QPD.c_DQD">
            <summary>
            Gets the certificate chain associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate chain, or null.</remarks>
        </member>
        <member name="T:c_SPD">
            <summary>
            Defines key agreement algorithm recipient information. The key itself is not transported - the two
            parties that will be using a symmetric key both take part in its generation. Please note that
            this method is not yet fully supported by ComponentPro Security library.
            </summary>
        </member>
        <member name="P:c_SPD.c_UQD">
            <summary>
            Gets the identifier of the key originator.
            </summary>
            <value>Identifier of the key originator.</value>
        </member>
        <member name="P:c_SPD.c_ZPD">
            <summary>
            Gets the identifier of the recipient.
            </summary>
            <value>Identifier of the recipient.</value>
        </member>
        <member name="P:c_SPD.c_AQD">
            <summary>
            Gets the identifier of the algorithm used to encrypt the symmetric key.
            </summary>
            <value>An <see cref="!:AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:c_SPD.c_BQD">
            <summary>
            Gets the encrypted key for the recipient.
            </summary>
            <value>Encrypted key.</value>
        </member>
        <member name="P:c_SPD.c_CQD">
            <summary>
            Gets the certificate associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate, or null.</remarks>
        </member>
        <member name="P:c_SPD.c_DQD">
            <summary>
            Gets the certificate chain associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate chain, or null.</remarks>
        </member>
        <member name="T:c_FHD">
            <summary>
            A collection of <see cref="!:RecipientInfo"/> objects.
            </summary>
        </member>
        <member name="M:c_FHD.#ctor">
            <summary>
            Creates an empty and read-only instance of <see cref="!:RecipientInfoCollection"/>.
            </summary>
        </member>
        <member name="M:c_FHD.c_VFC(c_GHD)">
            <summary>
            Adds a <see cref="!:RecipientInfo"/> to the collection.
            </summary>
            <param name="recipientInfo">A recipient info to add.</param>
        </member>
        <member name="M:c_FHD.c_WLC(c_GHD)">
            <summary>
            Removes a <see cref="!:RecipientInfo"/> from the collection.
            </summary>
            <param name="recipientInfo">A recipient info to remove.</param>
        </member>
        <member name="M:c_FHD.c_RCD(System.Int32)">
            <summary>
            Removes a recipient info at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of a recipient info to remove..</param>
        </member>
        <member name="M:c_FHD.c_BKB(c_GHD[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:RecipientInfoCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:RecipientInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_FHD.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:RecipientInfo"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:RecipientInfo"/> to get.</param>
            <value>A recipient info.</value>
        </member>
        <member name="T:c_BMC">
            <summary>
            Represents a CMS/PKCS #7 signed data.
            </summary>
        </member>
        <member name="M:c_BMC.c_PNC">
            <summary>
            Creates a signatures for all signers that do not have one yet.
            </summary>
        </member>
        <member name="M:c_BMC.c_PNC(c_FRD)">
            <summary>
            Creates a signatures for all signers that do not have one yet.
            </summary>
            <param name="options">Signature options.</param>
        </member>
        <member name="M:c_BMC.c_YUB">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message
            and validates all the signers' certificates.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_BMC.c_YUB(System.Boolean,c_TFC)">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_BMC.c_YUB(System.Boolean,c_TFC,c_UFC)">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_BMC.c_OHD">
            <summary>
            Creates a receiving stream for this CMS/PKCS #7 message.
            </summary>
            <returns>A write-only receiving stream.</returns>
            <remarks>
            Receiving stream accepts raw CMS/PKCS #7 signed message data.
            Before all the data has been written and the stream has been closed,
            no methods or properties of <see cref="!:SignedData"/> should be accessed.
            </remarks>
        </member>
        <member name="M:c_BMC.c_NAC(System.Byte[])">
            <summary>
            Decodes an encoded CMS/PKCS #7 signed message from raw data.
            Upon successful decoding, information can be retrieved using <see cref="!:SignedData"/>
            methods and properties.
            </summary>
            <param name="encodedMessage">Array of bytes representing a CMS/PKCS #7 message.</param>
        </member>
        <member name="M:c_BMC.c_QBC">
            <summary>
            Encodes the <see cref="!:SignedData"/> object into CMS/PKCS #7 message data.
            </summary>
            <returns>Array of bytes representing a CMS/PKCS #7 message.</returns>
        </member>
        <member name="M:c_BMC.c_XRD(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Determines whether the specified content info ASN.1 sequence is a signed data sequence.
            </summary>
            <param name="data">Sequence data.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
            <returns>True if yes; false if not.</returns>
        </member>
        <member name="M:c_BMC.c_XCC(System.IO.Stream)">
            <summary>
            Loads a CMS/PKCS #7 signed message from a stream.
            Upon successful decoding, information can be retrieved using <see cref="!:SignedData"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the message.</param>
        </member>
        <member name="M:c_BMC.c_CAC(System.IO.Stream)">
            <summary>
            Saves <see cref="!:SignedData"/> into a stream.
            </summary>
            <param name="output">A stream to which to save the message.</param>
        </member>
        <member name="M:c_BMC.c_XAB">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A new object.</returns>
        </member>
        <member name="M:c_BMC.#ctor">
            <summary>
            Creates an instance of <see cref="!:SignedData"/> class.
            </summary>
        </member>
        <member name="M:c_BMC.#ctor(c_JGD)">
            <summary>
            Creates an instance of <see cref="!:SignedData"/> class using the specified content
            information as the inner content.
            </summary>
            <param name="contentInfo">The inner content of the signed message.</param>
        </member>
        <member name="M:c_BMC.#ctor(c_JGD,System.Boolean)">
            <summary>
            Creates an instance of <see cref="!:SignedData"/> class using the specified content
            information as the inner content.
            </summary>
            <param name="contentInfo">The inner content of the signed message.</param>
            <param name="detached">
            Specifies whether the signature is detached.
            If detached, the actual content is not included within the signed message.
            </param>
        </member>
        <member name="P:c_BMC.c_ZRD">
            <summary>
            Specifies what parts of the certificate chain should be included in the signed data.
            </summary>
            <value>Certificate include option.</value>
        </member>
        <member name="P:c_BMC.c_OJD">
            <summary>
            Gets or sets the <see cref="!:ICertificateFinder"/> to be used to find certificates
            corresponding to a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>.
            </summary>
            <value>The certificate finder.</value>
        </member>
        <member name="P:c_BMC.c_PJD">
            <summary>
            Gets or sets a value indicating whether CSP operations are permitted to display any user interface.
            </summary>
            <value>A value indicating whether CSP can display UI.</value>
        </member>
        <member name="P:c_BMC.c_SMC">
            <summary>
            Gets the collection of certificates that are embedded in the message.
            </summary>
            <value>Collection of certificates</value>
        </member>
        <member name="P:c_BMC.c_THD">
            <summary>
            Gets the collection of certificate revocation lists (CRLs) that are embedded in the message.
            </summary>
            <value>Collection of CRLs</value>
        </member>
        <member name="P:c_BMC.c_ASD">
            <summary>
            Gets the collection of signers associated with this CMS/PKCS #7 message.
            </summary>
            <value>A collection of signers.</value>
        </member>
        <member name="P:c_BMC.c_CJD">
            <summary>
            Gets or sets the inner content information for this CMS/PKCS #7 message.
            It contains the content type identifier and content data.
            </summary>
            <value>The inner content.</value>
        </member>
        <member name="P:c_BMC.c_BSD">
            <summary>
            Gets or sets a value indicating whether the actual content is detached from the message.
            </summary>
            <value>True if the content is detached; False if the content is embedded within the message.</value>
        </member>
        <member name="T:c_CRD">
            <summary>
            Specifies what parts of the certificate chain should be included in the message.
            </summary>
        </member>
        <member name="F:c_CRD.c_JRD">
            <summary>Leave the existing certificate in the collection.</summary>
        </member>
        <member name="F:c_CRD.c_N0A">
            <summary>The certificate chain is not included.</summary>
        </member>
        <member name="F:c_CRD.c_LRD">
            <summary>The certificate chain is included, except for the root certificate.</summary>
        </member>
        <member name="F:c_CRD.c_NRD">
            <summary>Only the end certificate is included.</summary>
        </member>
        <member name="F:c_CRD.c_DRD">
            <summary>The certificate chain, including the root certificate, is included.</summary>
        </member>
        <member name="M:c_GRD.c_UNC">
            <summary>
            Gets a value that identifies the digest algorithm.
            </summary>
            <returns>Digest algorithm.</returns>
        </member>
        <member name="M:c_GRD.c_YUB">
            <summary>
            Validates the signer's digital signature and validates the certificate.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_GRD.c_YUB(System.Boolean,c_TFC)">
            <summary>
            Validates the signer's digital signatures.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_GRD.c_YUB(System.Boolean,c_TFC,c_UFC)">
            <summary>
            Validates the signer's digital signatures.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_GRD.c_PNC">
            <summary>
            Creates a signatures for the signer.
            </summary>
        </member>
        <member name="M:c_GRD.c_PNC(c_FRD)">
            <summary>
            Creates a signatures for the signer.
            </summary>
            <param name="options">Signature options.</param>
        </member>
        <member name="M:c_GRD.#ctor(c_RCC)">
            <summary>
            Creates a new instance of <see cref="!:SignerInfo"/> that defines
            a signer corresponding to the specified certificate. An associated private
            key for the certificate must be available.
            </summary>
            <param name="signerCertificate">The signer's certificate.</param>
        </member>
        <member name="M:c_GRD.#ctor(c_RCC,ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType)">
            <summary>
            Creates a new instance of <see cref="!:SignerInfo"/> that defines
            a signer corresponding to the specified certificate using the
            specified subject identifier type. An associated private
            key for the certificate must be available. 
            </summary>
            <param name="signerCertificate">The signer's certificate.</param>
            <param name="signerIdentifierType">Subject identifier type - only IssuerAndSerialNumber and SubjectKeyIdentifier values are accepted.</param>
        </member>
        <member name="M:c_GRD.#ctor(c_RCC,ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType,ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Creates a new instance of <see cref="!:SignerInfo"/> that defines
            a signer corresponding to the specified certificate using the
            specified subject identifier type. An associated private
            key for the certificate must be available. 
            </summary>
            <param name="signerCertificate">The signer's certificate.</param>
            <param name="signerIdentifierType">Subject identifier type - only IssuerAndSerialNumber and SubjectKeyIdentifier values are accepted.</param>
            <param name="digestAlgorithm">Digest algorithm.</param>
        </member>
        <member name="P:c_GRD.c_WTD">
            <summary>
            Gets the identifier of the signer.
            </summary>
            <value>Identifier of the signer.</value>
        </member>
        <member name="P:c_GRD.c_Q4C">
            <summary>
            Gets the identifier of the digest algorithm.
            </summary>
            <value>An <see cref="!:ObjectIdentifier"/> object.</value>
        </member>
        <member name="P:c_GRD.c_RDD">
            <summary>
            Gets the identifier of the signature algorithm.
            </summary>
            <value>An <see cref="!:AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:c_GRD.c_VOC">
            <summary>
            Gets the signature, or null if it is not available yet.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:c_GRD.c_XTD">
            <summary>
            Gets the collection of signed attributes associated with this CMS/PKCS #7 message.
            </summary>
            <value>Signed attribute collection.</value>
        </member>
        <member name="P:c_GRD.c_YTD">
            <summary>
            Gets the collection of unsigned attributes associated with this CMS/PKCS #7 message.
            </summary>
            <value>Unsigned attribute collection.</value>
        </member>
        <member name="P:c_GRD.c_CQD">
            <summary>
            Gets the certificate associated with the signer, or null if not available.
            </summary>
            <remarks>The signer's certificate, or null.</remarks>
        </member>
        <member name="P:c_GRD.c_DQD">
            <summary>
            Gets the certificate chain associated with the signer, or null if not available.
            </summary>
            <remarks>The signer's certificate chain, or null.</remarks>
        </member>
        <member name="P:c_GRD.c_SOD">
            <summary>
            Gets the signing time, or 1970-01-01 if not available.
            </summary>
            <value>Singing time.</value>
        </member>
        <member name="P:c_GRD.c_ZTD">
            <summary>
            Gets the preferred subject identifier for key encryption.
            </summary>
            <value>The preferred subject identifier.</value>
        </member>
        <member name="P:c_GRD.c_AUD">
            <summary>
            Gets the collection of S/MIME capabilities the signer supports.
            </summary>
            <value>Collection of supported S/MIME capabilities.</value>
        </member>
        <member name="M:c_ERD.#ctor">
            <summary>
            Creates an empty and read-only instance of <see cref="!:SignerInfoCollection"/>.
            </summary>
        </member>
        <member name="M:c_ERD.c_VFC(c_GRD)">
            <summary>
            Adds a <see cref="!:SignerInfo"/> to the collection.
            </summary>
            <param name="signerInfo">A signer info to add.</param>
        </member>
        <member name="M:c_ERD.c_WLC(c_GRD)">
            <summary>
            Removes a <see cref="!:SignerInfo"/> from the collection.
            </summary>
            <param name="signerInfo">A signer info to remove.</param>
        </member>
        <member name="M:c_ERD.c_RCD(System.Int32)">
            <summary>
            Removes a signer info at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of a signer info to remove..</param>
        </member>
        <member name="M:c_ERD.c_BKB(c_GRD[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:SignerInfoCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:SignerInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_ERD.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:SignerInfo"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:SignerInfo"/> to get.</param>
            <value>A signer info.</value>
        </member>
        <member name="F:c_FRD.c_HSD">
            <summary>Don't include any signed attributes in the signature. Not recommended.</summary>
        </member>
        <member name="F:c_FRD.c_NSD">
            <summary>Don't include key Microsoft extensions in the signature attributes.</summary>
        </member>
        <member name="F:c_FRD.c_LSD">
            <summary>Don't include S/MIME capabilities extensions in the signature attributes.</summary>
        </member>
        <member name="F:c_FRD.c_GSD">
            <summary>Skip certificate usage check.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus">
            <summary>
            Signature validation status.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.CertificateNotValid">
            <summary>Certificate is not valid.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.CertificateNotAvailable">
            <summary>Certificate is not available.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.UnsupportedDigestAlgorithm">
            <summary>A digest algorithm is not supported.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.UnsupportedSignatureAlgorithm">
            <summary>A signature algorithm is not supported.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.InvalidSignature">
            <summary>A signature is invalid.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.InvalidKeyUsage">
            <summary>Invalid key usage. The certificate usage doesn't include message signing.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.ContentTypeMismatch">
            <summary>Content type mismatch.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult">
            <summary>
            Represents the result of signature validation.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.Status">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.CertificateValidationStatus">
            <summary>
            Gets the certificate validation status mask.
            </summary>
            <value>Certificate validation status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.Valid">
            <summary>
            Gets the certificate chain validity status.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability">
            <summary>
            Represents an S/MIME capability.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.#ctor(c_ANC)">
            <summary>
            Initializes an instance of a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> with no parameters.
            </summary>
            <param name="oid">The object identifier that identifies the S//MIME capability.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.#ctor(c_ANC,System.Byte[])">
            <summary>
            Initializes an instance of a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/>.
            </summary>
            <param name="oid">The object identifier that identifies the S//MIME capability.</param>
            <param name="parameters">Capability parameters in ASN.1 format.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.c_N9B">
            <summary>
            Gets the object identifier that identifies the S/MIME capability.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.Parameters">
            <summary>
            Gets the S/MIME capability parameters.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection">
            <summary>
            A collection of <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Add(ComponentPro.Security.Cryptography.Pkcs.SmimeCapability)">
            <summary>
            Adds a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> to the collection.
            </summary>
            <param name="capability">An S/MIME capability to add.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Remove(ComponentPro.Security.Cryptography.Pkcs.SmimeCapability)">
            <summary>
            Removes a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> from the collection.
            </summary>
            <param name="capability">An S/MIME capability to remove.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.CopyTo(ComponentPro.Security.Cryptography.Pkcs.SmimeCapability[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> to get or set.</param>
            <value>An S/MIME capability.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Item(System.String)">
            <summary>
            Gets the first <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>An S/MIME capability if found, or null if not found.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType">
            <summary>
            Defines the type of subject identifier that identifies a subject and a certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.Unknown">
            <summary>
            The type of subject identifier is unknown.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.IssuerAndSerialNumber">
            <summary>
            The subject is identified by the certificate issuer and serial number.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.SubjectKeyIdentifier">
            <summary>
            The subject is identified by the hash of the subject's public key. The hash algorithm used is determined by the signature algorithm suite in the subject's certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.PublicKey">
            <summary>
            The subject is identified by the subject's public key.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier">
            <summary>
            The <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/> class identifies a subject, either by certificate issuer
            and serial number, by the subject key identifier or by a public key.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.#ctor(c_RCC)">
            <summary>
            Initializes an instance of <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/> that identifies the subject
            of the specified certificate by its issuer and serial number.
            </summary>
            <param name="certificate">The certificate of the subject to identify.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.#ctor(c_RCC,ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType)">
            <summary>
            Initializes an instance of <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/> that identifies the subject
            of the specified certificate by the specified identifier type.
            </summary>
            <param name="certificate">The certificate of the subject to identify.</param>
            <param name="subjectIdentifierType">The type of the subject identifier.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.Type">
            <summary>
            Gets the type of the subject identifier.
            </summary>
            <value>The type of the subject identifier.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.c_WOC">
            <summary>
            Gets the <see cref="!:DistinguishedName"/> of the certificate issuer if
            this subject identifier is identified by the issuer name and serial number.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate issuer.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.SerialNumber">
            <summary>
            Gets the serial number of the certificate if
            this subject identifier is identified by the issuer name and serial number.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate serial number.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.SubjectKeyIdentifier">
            <summary>
            Gets the subject key identifier of the certificate if
            this subject identifier is identified by the subject key identifier.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate subject key identifier.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.c_AJC">
            <summary>
            Gets the public algorithm of the certificate if
            this subject identifier is identified by the public key.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate public key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.PublicKey">
            <summary>
            Gets the public of the certificate if
            this subject identifier is identified by the public key.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate public key.</value>
        </member>
        <member name="T:ComponentPro.Security.SecuritySettings">
            <summary>
            Provides security settings.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.SecuritySettings.ForceManagedAes">
            <summary>
            Forces RijndaelManaged to be used even when AesCryptoServiceProvider is available.
            </summary>
            <value>True if RijndaelManaged is to be used instead of AesCryptoServiceProvider; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Security.SecuritySettings.FipsAlgorithmsOnly">
            <summary>
            Enables or disables an option that specifies whether only FIPS 140-2 compliant cryptographic algorithm providers are to be used.
            </summary>
            <value>True if only FIPS 140-2 compliant algorithms are to be used; false to allow all supported algorithms.</value>
            <remarks>
            In .NET 2.0 and higher, this option reflects the Windows OS settings unless explicitly set to a different value.
            </remarks>
        </member>
        <member name="P:ComponentPro.Security.SecuritySettings.MediumTrust">
            <summary>
            Gets or sets a boolean value indicating whether to run the application in Medium Trust environment.
            </summary>
        </member>
        <member name="F:c_TFC.c_N0A">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:c_TFC.c_HMC">
            <summary>
            Ignore an invalid time.
            </summary>
        </member>
        <member name="F:c_TFC.c_GMC">
            <summary>
            Ignore an invalid certificate trust list time.
            </summary>
        </member>
        <member name="F:c_TFC.c_JMC">
            <summary>
            Ignore an invalid time nesting.
            </summary>
        </member>
        <member name="F:c_TFC.c_AVD">
            <summary>
            Ignore all invalid time checks.
            </summary>
        </member>
        <member name="F:c_TFC.c_BVD">
            <summary>
            Ignore invalid basic constraints.
            </summary>
        </member>
        <member name="F:c_TFC.c_CVD">
            <summary>
            Allow unknown certification authority.
            </summary>
        </member>
        <member name="F:c_TFC.c_KMC">
            <summary>
            Ignore wrong usage of the certificate.
            </summary>
        </member>
        <member name="F:c_TFC.c_DVD">
            <summary>
            Ignore invalid policy.
            </summary>
        </member>
        <member name="F:c_TFC.c_EVD">
            <summary>
            Ignore an unknown revocation status of the end certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:c_TFC.c_FVD">
            <summary>
            Ignore an unknown revocation status of the certificate trust list signer.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:c_TFC.c_GVD">
            <summary>
            Ignore an unknown revocation status of the CA certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:c_TFC.c_HVD">
            <summary>
            Ignore an unknown revocation status of a root certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:c_TFC.c_JVD">
            <summary>
            Ignore all unknown revocation statuses.
            </summary>
        </member>
        <member name="F:c_TFC.c_KVD">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:c_TFC.c_MVD">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:c_TFC.c_FMC">
            <summary>
            Only use local cache, do not access the network.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:c_TFC.c_MMC">
            <summary>
            Ignore invalid common name.
            </summary>
        </member>
        <member name="F:c_TFC.c_CMC">
            <summary>
            Skip certificate revocation check.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateVerificationStatus">
            <summary>
            Certificate validation status.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.TimeNotValid">
            <summary>
            This certificate or one of the certificates in the certificate chain is not time valid.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.TimeNotNested">
            <summary>
            Certificates in the chain are not properly time nested.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Revoked">
            <summary>
            Trust for this certificate or one of the certificates in the certificate chain has been revoked.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.SignatureNotValid">
            <summary>
            The certificate or one of the certificates in the certificate chain does not have a valid signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.WrongUsage">
            <summary>
            The certificate or certificate chain is not valid for its proposed usage.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.RootNotTrusted">
            <summary>
            The certificate or certificate chain is based on an untrusted root.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownRev">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is unknown.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CyclicChain">
            <summary>
            One of the certificates in the chain was issued by a certification authority that the original certificate had certified.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidExtension">
            <summary>
            One of the certificates has an invalid extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidPolicyConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            a policy constraints extension, and one of the issued certificates has
            a disallowed policy mapping extension or does not have a required issuance
            policies extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidBasicConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            a basic constraints extension and either the certificate cannot be used
            to issue other certificates or the chain path length has been exceeded.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidNameConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            an invalid name constraints extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnsupportedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension containing unsupported fields.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotDefinedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and a name constraint is missing for one of the name choices in the end certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotPermittedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and there is not a permitted name constraint for one of the name choices in the end certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.ExcludedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and one of the name choices in the end certificate is explicitly excluded.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.IncompleteChain">
            <summary>
            The certificate chain is not compete.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlTimeNotValid">
            <summary>
            A CTL used to create this chain was not time valid.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlSignatureNotValid">
            <summary>
            A CTL used to create this chain did not have a valid signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlWrongUsage">
            <summary>
            A CTL used to create this chain is not valid for this usage.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.OfflineRev">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is either off-line or stale.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NoIssuanceChainPolicy">
            <summary>
            The end certificate does not have any resultant issuance policies, and one of the issuing CA certificates has a policy constraints extension requiring it.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CNNotMatch">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CANotTrusted">
            <summary>
            A certification chain processed correctly, but one of the CA certificates
            is not trusted by the policy provider.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.ExplicitDistrust">
            <summary>
            The certificate was explicitly marked as untrusted by the user.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Malformed">
            <summary>
            A certificate is missing or has an empty value for an important field,
            such as a subject or issuer name.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.MoreErrors">
            <summary>
            There might be more errors apart from those reported.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.WeakAlgorithm">
            <summary>
            Certificate uses algorithm which is not considered secure on this platform.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotTrusted">
            <summary>
            Certificate is not trusted.
            </summary>
        </member>
        <member name="P:c_RFC.c_JLC">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:c_RFC.c_HLC">
            <summary>
            Gets the certificate chain validity status.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="P:c_RFC.c_KLC">
            <summary>
            Gets the native error code returned by the validation function (only supported on .NET CF and Xamarin.iOS).
            </summary>
            <value>The error code returned by the validation function.</value>
        </member>
        <member name="T:c_E5A">
            <summary>
            Cryptography algorithm for DIGEST-MD5 cryptography.<BR></BR>
            RFC 1321, RFC 2831
            </summary>
        </member>
        <member name="F:c_E5A.c_CEB">
             <summary>
             Description of digest algorithm:
             <example>
             <code>
            digest-challenge  =
            1#( realm | nonce | qop-options | stale | maxbuf | charset
            algorithm | cipher-opts | auth-param )
            realm             = "realm" "=" " realm-value "
            realm-value       = qdstr-val
            nonce             = "nonce" "=" "nonce-value "
            nonce-value       = qdstr-val
            qop-options       = "qop" "=" " qop-list "
            qop-list          = 1#qop-value
            qop-value         = "auth" | "auth-int" | "auth-conf" |
            token
            stale             = "stale" "=" "true"
            maxbuf            = "maxbuf" "=" maxbuf-value
            maxbuf-value      = 1*DIGIT
            charset           = "charset" "=" "utf-8"
            algorithm         = "algorithm" "=" "md5-sess"
            cipher-opts       = "cipher" "=" "1#cipher-value"
            cipher-value      = "3des" | "des" | "rc4-40" | "rc4" |
            "rc4-56" | token
            auth-param        = token "=" ( token | quoted-string )
             </code></example>
             </summary>
        </member>
        <member name="F:c_E5A.c_EEB">
            <summary>
            Array after parsing digest challenge from server.
            </summary>
        </member>
        <member name="F:c_E5A.c_FEB">
            <summary>
            Digest-uri value  imap/servername.com.
            </summary>
        </member>
        <member name="F:c_E5A.c_HEB">
            <summary>
            Client string unique for each response.
            </summary>
        </member>
        <member name="F:c_E5A.c_JEB">
            <summary>
            Response value from server after send client authentication string.
            </summary>
        </member>
        <member name="M:c_E5A.c_F5A(System.String,System.String)">
            <summary>
            Create Digest-MD5 hash string.
            </summary>
            <param name="username">User name.</param>
            <param name="password">Password.</param>
            <returns>Digest-MD5 hash string.</returns>
        </member>
        <member name="M:c_E5A.c_F5A(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create Digest-MD5 hash string.
            </summary>
            <param name="username">User name.</param>
            <param name="password">Password.</param>
            <param name="method">Method (typically 'GET' or 'AUTHENTICATE').</param>
            <param name="uri">Uri.</param>
            <param name="uriName">Uri name.</param>
            <param name="oldStyle">Old style (old style for RFC 2617, otherwise RFC 2831).</param>
            <returns>Digest-MD5 hash string.</returns>
        </member>
        <member name="M:c_E5A.c_ODB">
            <summary>
            Selects the best "quality of protection" from the list
            sent by server.
            </summary>
            <returns>One of "auth", "auth-int". "auth-conf" is not supported.</returns>
        </member>
        <member name="M:c_E5A.c_PDB(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create digest response string.
            </summary>
            <param name="username">User name to server.</param>
            <param name="password">Password to server.</param>
            <param name="method">Method.</param>
            <param name="uri">Uri.</param>
            <param name="oldStyle">Old style.</param>
            <returns></returns>
        </member>
        <member name="M:c_E5A.c_RDB(System.String)">
            <summary>
            Username and password encoding, as specified by RFC 2831:
            Even if "charset=UTF-8" is present, if all the characters 
            are in the ISO 8859-1 character set, then the value must be
            converted to ISO 8859-1 before being hashed.
            </summary>
        </member>
        <member name="M:c_E5A.c_JFB(System.String)">
            <summary>
            Compare computing client digest-value and value from the server.
            </summary>
            <param name="data">BASE64 encoding string digest-response from the server.
            </param>
            <returns>True if response from server equals
            the response string generated by client.
            </returns>
        </member>
        <member name="M:c_E5A.c_NDB(System.String)">
            <summary>
            Return digest val from values sent from server.
            </summary>
            <param name="command">digest property.</param>
            <returns>Value of digest property.</returns>
        </member>
        <member name="M:c_E5A.c_MDB(System.Byte[])">
            <summary>
            Casts bytes to characters without changing their
            numerical values.
            </summary>
            <remarks>
            Encoding.GetString gives
            the same results as this method for ASCII data,
            but not in general (i.e. Windows 1250 converts
            byte 135 into character 8825).
            </remarks>
        </member>
        <member name="T:c_WDB">
            <summary>
            The ways DIGEST-MD5 can fail (currently just one).
            </summary>
        </member>
        <member name="F:c_WDB.c_XDB">
            <summary>
            Authentication data doesn't fit into Latin 1, but
            server doesn't support any other charset.
            </summary>
        </member>
        <member name="F:c_WDB.c_YDB">
            <summary>
            Server offers no recognizable quality of
            protection values.
            </summary>
        </member>
        <member name="M:c_H0B.c_WVD">
            <summary>
            Performs frequence analysis, computes dynamic tree and decides which method to use.
            </summary>
        </member>
        <member name="M:c_H0B.c_PWD">
            <summary>
            Decides what to do next (block has been completely flushed).
            </summary>
        </member>
        <member name="M:c_Y1B.c_NZD(System.Int32)">
            <summary>
            Read next (one to _bits) bits from the input buffer.
            </summary>
        </member>
        <member name="M:c_Y1B.c_RZD(System.Int32)">
            <summary>
            Decodes running length. Value is stored in _codeLengthBuffer. More bits can be read during decoding.
            </summary>
            <param name="value">Value of the running length.</param>
            <returns>True if the running length was decoded. False if more input is needed.</returns>
        </member>
        <member name="M:c_Y1B.c_TZD(System.Int32@)">
            <returns>True if the end of block was reached; false otherwise.</returns>
        </member>
        <member name="M:c_Y1B.c_UZD(System.Int32)">
            <summary>
            Decodes LZ77 length value. Sets internal properties to correct continuation of the LZ77 copying.
            </summary>
            <param name="value">Value of the LZ77 length to be decoded (HAS TO be greater than 256).</param>
        </member>
        <member name="M:c_Y1B.c_VZD(System.Int32)">
            <summary>
            Decodes LZ77 distance value. Sets internal properties to correct continuation of the LZ77 copying.
            </summary>
            <param name="value">Value of the LZ77 distance to be decoded.</param>
        </member>
        <member name="T:c_OZD">
            <summary>
            The exception that is thrown when an invalid compressed data occurs while decompressing.
            </summary>
        </member>
        <member name="M:c_KWD.c_NAC(System.Int32@,System.Int32@)">
            <summary>
            Returns the value of the specified huffman code.
            </summary>
        </member>
        <member name="M:c_KWD.c_MWD(System.Int32[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Builds dynamic legth limited huffman tree.
            </summary>
            <param name="frequency">Frequencies of the values.</param>
            <param name="codeLengths">An array to fill. It will contain code lengths.</param>
            <param name="codes">An array to fill. It will contain codes.</param>
            <param name="maxTreeLength">Maximum tree length.</param>
            <returns>Number of computed code lengths (and codes).</returns>
        </member>
        <member name="T:c_X1A">
            <summary>
            Provides methods for constructing exception messages.
            </summary>
        </member>
        <member name="T:c_P6A">
            <summary>
            Universal class for asynchronous method invocation.
            </summary>
        </member>
        <member name="M:c_P6A.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"> If true, is called by IDisposable.Dispose. 
            Otherwise it is called by finalizer.</param>
        </member>
        <member name="M:c_P6A.Dispose">
            <summary>
            Implementation of IDisposable.Dispose()
            </summary>
        </member>
        <member name="M:c_JBD.c_KBD(System.String)">
            <summary>
            Gets the bytes array from specified hexadecimal string representation. 
            </summary>
            <param name="data">Hexadecimal string in format AABBCC.</param>
            <returns>An array of bytes converted from specified hexadecimal string.</returns>
        </member>
        <member name="T:c_A">
            <summary>
            Represents a block of unmanaged memory.
            </summary>
        </member>
        <member name="M:c_A.#ctor(System.Int32)">
            <summary>
            Allocates a block of unmanaged memory with the specified length.
            </summary>
            <param name="length">The length of unmanaged memory block.</param>
        </member>
        <member name="M:c_A.c_LJB">
            <summary>
            Returns a pointer to the current unmanaged memory block.
            </summary>
            <returns>A pointer to unamanged memory block.</returns>
        </member>
        <member name="M:c_A.c_NJB(System.Int32,System.Byte)">
            <summary>
            Writes an 8-bit unsigned integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:c_A.c_PJB(System.Int32)">
            <summary>
            Reads an 8-bit unsigned integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:c_A.c_QJB(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Writes a 64-bit signed integer value to unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory to which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:c_A.c_RJB(System.IntPtr,System.Int32)">
            <summary>
            Reads a 64-bit signed integer value from unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before reading.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:c_A.c_QJB(System.Int32,System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:c_A.c_RJB(System.Int32)">
            <summary>
            Reads a 64-bit signed integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:c_A.c_SJB(System.Int32,System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:c_A.c_TJB(System.Int32)">
            <summary>
            Reads a 32-bit signed integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:c_A.c_HJB(System.Int32,System.Int16)">
            <summary>
            Writes a 16-bit unsigned integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:c_A.c_UJB(System.Int32)">
            <summary>
            Reads a 16-bit unsigned integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:c_A.c_VJB(System.Int32,System.IntPtr)">
            <summary>
            Writes a pointer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:c_A.c_FJB(System.Int32)">
            <summary>
            Reads a pointer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:c_A.c_XJB(System.IntPtr)">
            <summary>
            Reads a string from an unmanaged pointer.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:c_A.c_XJB(System.IntPtr,System.Int32)">
            <summary>
            Reads a string of the specified length from an unmanaged pointer.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read.</param>
            <param name="length">The length of the string.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:c_A.c_NG(System.Byte[])">
            <summary>
            Allocates a block of an unmanaged memory for the data contained in the specified byte array.
            </summary>
            <param name="buffer">A byte array.</param>
            <returns>An <see cref="!:UnmanagedBlock"/>.</returns>
        </member>
        <member name="M:c_A.c_FKB(System.String)">
            <summary>
            Allocates a block of an unmanaged memory for the specified string (in Unicode).
            </summary>
            <param name="value">A string.</param>
            <returns>An <see cref="!:UnmanagedBlock"/>.</returns>
        </member>
        <member name="M:c_A.c_GKB">
            <summary>
            Allocates a byte array for the data contained in the unmanaged memory block.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:c_A.Dispose">
            <summary>
            Disposes the object and releases resources.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:c_A.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:c_A.Finalize">
            <summary>
            Finalizer called by garbage collector.
            </summary>
        </member>
        <member name="P:c_A.c_HKB">
            <summary>
            Gets the block length, if available.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ISecureShellClient">
            <summary>
            Standardizes members of SSH client classes.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using a combination of password and pkey. If password is null reference (Nothing in VB.NET), the <paramref name="privateKey"/> must be specified to authenticate.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">The RSA or DSA private key data stream for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">The RSA or DSA private key data stream for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the specified user on the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>An <see cref="T:ComponentPro.Net.SecureShellChangePasswordResult"/> that represents the result of change password operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>        
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Re-uses the specified <paramref name="connection"/> without having to connect to the SSH server and authenticate the user.
            </summary>
            <param name="connection">An SSH connection that is already connected and authenticated.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Re-uses the underlying connection of the specified <paramref name="sshClient"/> without having to connect to the SSH server and authenticate the user.
            </summary>
            <param name="sshClient">An SSH connection that is already connected and authenticated.</param>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.HostKey">
            <summary>
            Gets the server's host key string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session has already been authenticated.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.Connection">
            <summary>
            Gets or sets the underlying SSH connection.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannel">
            <summary>
            Represents an SSH channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestPseudoTerminal(System.String,System.Int32,System.Int32)">
            <summary>
            Requests a pseudo-terminal.
            </summary>
            <param name="terminal">Terminal name, e.g. "vt100".</param>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.PassEnvironmentVariable(System.String,System.String)">
            <summary>
            Passes an environment variable to the shell/command to be started later.
            </summary>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestPseudoTerminal">
            <summary>
            Requests an 80x25 vt100 pseudo-terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SetTerminalSize(System.Int32,System.Int32)">
            <summary>
            Sets a new terminal size.
            </summary>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SendEof">
            <summary>
            Sends EOF (end-of-file) indicator to the server. No further data should be sent after this.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SendBreak(System.Int32)">
            <summary>
            Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestShell">
            <summary>
            Requests a shell.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestExec(System.String)">
            <summary>
            Requests an execution of the specified command.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestSubsystem(System.String)">
            <summary>
            Requests a specified subsystem.
            </summary>
            <param name="subsystem">Subsystem name, such as &quot;sftp&quot;.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Close">
            <summary>
            Closes the current channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.c_PLE">
            <summary>
            Creates an ISocket representation of this channel.
            </summary>
            <returns>An ISocket.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.GetAvailable">
            <summary>
            Gets the number of bytes available in the receive buffer. 
            If no data is available, the method will process any pending incoming packets.
            </summary>
            <returns>Number of bytes available.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives data send by the server through this channel.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The offset to the array at which to place the received data.</param>
            <param name="count">Number of bytes to receive.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to the server through this channel.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The offset to the array at which the data starts.</param>
            <param name="count">Number of bytes to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.ToString">
            <summary>
            Returns a string representation of this channel.
            </summary>
            <returns>Local channel ID.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Dispose">
            <summary>
            Implementation of IDisposable.Dispose()
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.Type">
            <summary>
            Gets the type of this channel.
            </summary>
            <value>Channel type.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.State">
            <summary>
            Gets the state of this channel.
            </summary>
            <value>Channel state.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.ExitStatus">
            <summary>
            Gets the channel exit status, if available. Otherwise, it returns null.
            </summary>
            <value>Channel exit status.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.c_XLE">
            <summary>
            Gets or sets the value indicating how to tread extended channel data.
            </summary>
            <value>Extended data mode.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.TerminalWidth">
            <summary>
            Gets the terminal width.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.TerminalHeight">
            <summary>
            Gets the terminal height.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.Available">
            <summary>
            Gets the number of bytes available in the receive buffer.
            </summary>
            <returns>Number of bytes available.</returns>
            <remarks>Unlike the <see cref="M:ComponentPro.Net.SecureShellChannel.GetAvailable"/> method, this property will not process any pending incoming packets.</remarks>
        </member>
        <member name="M:c_RKE.c_P3B(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="T:ComponentPro.Net.SecureShellCipher">
            <summary>
            Represents an SSH cipher.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellCipher.ToString">
            <summary>
            Returns a description of the cipher.
            </summary>
            <returns>Description of the cipher.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingMacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingEncryptionAlgorithm">
            <summary>
            Gets the active encryption algorithm.
            </summary>
            <value>Active encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingMacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingEncryptionAlgorithm">
            <summary>
            Gets the active encryption algorithm.
            </summary>
            <value>Active encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.KeyExchangeAlgorithm">
            <summary>
            Gets the key exchange algorithm used during key negotiation.
            </summary>
            <value>Key exchange algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.HostKeyAlgorithm">
            <summary>
            Gets the host key algorithm used during key negotiation.
            </summary>
            <value>Host key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingCompressionEnabled">
            <summary>
            Gets the value indicating whether outgoing compression is used.
            </summary>
            <value>True if outgoing compression is enabled; false otehrwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingCompressionEnabled">
            <summary>
            Gets the value indicating whether incoming compression is used.
            </summary>
            <value>True if incoming compression is enabled; false otehrwise.</value>
        </member>
        <member name="T:ComponentPro.Net.BannerEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.Banner"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.BannerEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.Banner"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.BannerEventArgs.Banner">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ComponentPro.Net.HostKeyVerifyingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.HostKeyVerifyingEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.ServerKey">
            <summary>
            Gets the server key.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKeyData">
            <summary>
            Gets the server's host key raw data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKey">
            <summary>
            Gets the server's host key string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKeyAlgorithm">
            <summary>
            Gets the server's host key algorithm.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.Accept">
            <summary>
            Gets and sets a value that indicates the application has verified the host key.
            </summary>
            <remarks>
            By default, this property is set to false. If you do not set this to true, then the connection establishment stops and an <see cref="T:ComponentPro.Net.SecureShellException"/> is thrown.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Ignore">
            <summary>
            Ignore the authentication request. Equivalent to no event being initialized at all.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Name">
            <summary>
            Gets the SSH server name.
            </summary>
            <value>Server name.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Instructions">
            <summary>
            Gets instructions.
            </summary>
            <value>Instructions.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the authentication.
            </summary>
            <value>True to cancel the authentication; false to continue with the authentication (default).</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Requests">
            <summary>
            Collection of prompts and answers for the authentication request.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.PasswordChangeRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.PasswordChangeRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest"/> event of 
            a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.LastAttemptFailed">
            <summary>
            Gets a boolean value indicating that the last password change attempt has failed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Prompt">
            <summary>
            Gets the server's prompt.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Language">
            <summary>
            Gets the prompt's language.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.NewPassword">
            <summary>
            Gets or sets the new password to change.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the password change and throw an exception.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellException">
            <summary>
            The exception that is thrown when an SSH error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String,System.Exception,ComponentPro.Net.SecureShellExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with the specified error message, status, 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.SecureShellExceptionStatus"/> values.</param>
        </member>
        <member name="P:ComponentPro.Net.SecureShellException.Status">
            <summary>
            Gets the exception status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.SecureShellExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellException.c_YDE">
            <summary>
            Gets the SSH disconnect error reason.
            </summary>
            <value>Error reason.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellFingerprint">
            <summary>
            Represents the server public key fingerprint.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.Compute(System.Byte[])">
            <summary>
            Computes a fingerprint of the specified key.
            </summary>
            <param name="key">Key data.</param>
            <returns>Fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.FromBase64String(System.String)">
            <summary>
            Computes a fingerprint of the specified Base64-encoded key.
            </summary>
            <param name="encodedKey">Base64-encoded key data.</param>
            <returns>Fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToArray">
            <summary>
            Returns the fingerprint as a byte array.
            </summary>
            <returns>Fingerprint as a byte array.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToString">
            <summary>
            Returns a string representation of the fingerprint.
            </summary>
            <returns>A string representation of the fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToArray(ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Returns the fingerprint produced using the specified algorithm as a byte array.
            </summary>
            <param name="algorithm">Algorithm to be used to compute the fingerprint.</param>
            <returns>Fingerprint as a byte array.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToString(ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Returns a string representation of the fingerprint produced using the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm to be used to compute the fingerprint.</param>
            <returns>A string representation of the fingerprint.</returns>
        </member>
        <member name="T:ComponentPro.Net.SecureShellExitStatus">
            <summary>
            Channel exit status.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
            <value>Process exit code.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.SignalName">
            <summary>
            Gets the process signal name if available; or null.
            </summary>
            <value>Process signal name.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.CoreDumped">
            <summary>
            Gets a value indicating whether the process failed with a core dump.
            </summary>
            <value>True if core-dumped; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.ErrorMessage">
            <summary>
            Gets the process error message if available; or null.
            </summary>
            <value>Process error message.</value>
        </member>
        <member name="F:c_AKE.c_HPE">
            <summary>
            Discard extended data.
            </summary>
        </member>
        <member name="F:c_AKE.c_EKE">
            <summary>
            Treat extended data as normal data.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChangePasswordResult">
            <summary>
            Defines the the result of change password operation.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.Success">
            <summary>
            Password of the user has been changed and the user has been authenticated. User does not need to authenticate again.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.ChangedButNotAuthenticated">
            <summary>
            Password of the user has been changed, but the user needs to be authenticated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.Failure">
            <summary>
            Change password operation failed because either password changing was not supported, or the old password was not correct.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellMacAlgorithm">
            <summary>
            MAC algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.None">
            <summary>
            No MAC algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.MD5">
            <summary>
            MD5 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.SHA1">
            <summary>
            SHA1 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellEncryptionAlgorithm">
            <summary>
            Encryption algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.RC4">
            <summary>
            RC4.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.TripleDES">
            <summary>
            TripleDES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.AES">
            <summary>
            AES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Twofish">
            <summary>
            Twofish.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellEncryptionMode">
            <summary>
            Encryption mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.CBC">
            <summary>
            CBC mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.CTR">
            <summary>
            CTR mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.Any">
            <summary>
            Any mode.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellAuthenticationMethod">
            <summary>
            Authentication method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.Password">
            <summary>
            Authentication method "password".
            </summary>		
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.KeyboardInteractive">
            <summary>
            Authentication method "keyboard-interactive".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.PublicKey">
            <summary>
            Authentication method "publickey".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.GssapiWithMic">
            <summary>
            Authentication method "gssapi-with-mic".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.Any">
            <summary>
            Any method.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellKeyExchangeAlgorithm">
            <summary>
            Key exchange algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.None">
            <summary>
            No algorithm
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroup1SHA1">
            <summary>
            Diffie-Hellman (Oakley Group 2) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroup14SHA1">
            <summary>
            Diffie-Hellman (Oakley Group 14) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroupExchangeSHA1">
            <summary>
            Diffie-Hellman (Group Exchange) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroupExchangeSHA256">
            <summary>
            Diffie-Hellman (Group Exchange) with SHA256.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellHostKeyAlgorithm">
            <summary>
            Host key algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.None">
            <summary>
            No algorithm
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.RSA">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.DSS">
            <summary>
            DSS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.Certificate">
            <summary>
            X509 certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="F:c_UJE.c_N0A">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:c_UJE.c_VJE">
            <summary>
            Do not split channel data packets unless they are larger than maximum packet size.
            </summary>
        </member>
        <member name="F:c_UJE.c_JPE">
            <summary>
            Wait for server SSH protocol welcome message before sending the client one.
            </summary>
        </member>
        <member name="F:c_UJE.c_KPE">
            <summary>
            When authenticating using both password and private key, try password authentication first (default is to try the private key first).
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.SecureShellException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="T:ComponentPro.Net.SecureShellExceptionStatus"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.UnexpectedMessage">
            <summary>
            The response received from the server was complete but unexpected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.OperationFailure">
            <summary>
            The requested operation could not be completed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.PasswordChangeRequired">
            <summary>
            Password needs to be changed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:c_X8D.c_EDB">
            <summary>Unknown reason.</summary>
        </member>
        <member name="F:c_X8D.c_ONC">
            <summary>No reason specified.</summary>
        </member>
        <member name="F:c_X8D.c_LOE">
            <summary>Host not allowed to connect.</summary>
        </member>
        <member name="F:c_X8D.c_Y8D">
            <summary>Protocol error.</summary>
        </member>
        <member name="F:c_X8D.c_NOE">
            <summary>Key exchange failed.</summary>
        </member>
        <member name="F:c_X8D.c_VK">
            <summary>Reserved.</summary>
        </member>
        <member name="F:c_X8D.c_C9D">
            <summary>Message authentication code error.</summary>
        </member>
        <member name="F:c_X8D.c_D9D">
            <summary>Compression error.</summary>
        </member>
        <member name="F:c_X8D.c_OOE">
            <summary>Service not available.</summary>
        </member>
        <member name="F:c_X8D.c_POE">
            <summary>Protocol version not supported.</summary>
        </member>
        <member name="F:c_X8D.c_QOE">
            <summary>Host key not verifiable.</summary>
        </member>
        <member name="F:c_X8D.c_VOE">
            <summary>Connection lost.</summary>
        </member>
        <member name="F:c_X8D.c_WOE">
            <summary>Disconnect by application.</summary>
        </member>
        <member name="F:c_X8D.c_ROE">
            <summary>Too many connections.</summary>
        </member>
        <member name="F:c_X8D.c_SOE">
            <summary>Authentication cancelled by user.</summary>
        </member>
        <member name="F:c_X8D.c_TOE">
            <summary>No more authentication methods avaialbe.</summary>
        </member>
        <member name="F:c_X8D.c_UOE">
            <summary>Illegal user name.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellSessionState">
            <summary>
            Defines the SSH session state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.None">
            <summary>
            Not connected to the SSH server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.Connecting">
            <summary>
            Connecting to the SSH server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.KeyExchange">
            <summary>
            In key exchange mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.Ready">
            <summary>
            The server is ready.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.Closed">
            <summary>
            The session has been closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelType">
            <summary>
            SSH channel type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.Session">
            <summary>
            Session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.DirectTcpIp">
            <summary>
            Direct TCP/IP tunnel.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.ForwardedTcpIp">
            <summary>
            Forwarder TCP/IP tunnel.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelState">
            <summary>
            SSH channel state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TcpIpForwardingRule">
            <summary>
            Represents a single TCP forwarding rule.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.TcpIpForwardingRule.Address">
            <summary>
            Gets the listening IP address.
            </summary>
            <value>Listening IP address.</value>
        </member>
        <member name="P:ComponentPro.Net.TcpIpForwardingRule.Port">
            <summary>
            Gets the listening port.
            </summary>
            <value>Listening port.</value>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveRequest">
            <summary>
            Represents one question/answer pair for the <see cref="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication">KeyboardInteractiveAuthentication</see> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequest"/>.
            </summary>
            <param name="prompt">Prompt.</param>
            <param name="echo">A value indicationg whether the prompt at the specified index should be displayed.</param>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Prompt">
            <summary>
            Gets the authentication prompt (question).
            </summary>
            <value>Authentication prompt.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Response">
            <summary>
            Gets or sets response to the prompt.
            </summary>
            <value>Response.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Echo">
            <summary>
            Gets a value indicating whether the response should be displayed.
            </summary>
            <value><c>true</c> if the response should be displayed; otherwise <c>false</c>.</value>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveRequestCollection">
            <summary>
            Collection of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequest"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveRequestCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequestCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveRequestCollection.#ctor(System.String[],System.Boolean[])">
            <summary>
            Creates a new instance of KeyboardInteractiveRequestCollection.
            </summary>
            <param name="prompt">Prompts.</param>
            <param name="echo">Should echo be displayed.</param>
        </member>
        <member name="T:ComponentPro.Net.SecureShellConfig">
            <summary>
            Represents the SSH configuration.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.GetSshConfig">
            <summary>
            Returns a shallow copy of the current parameters.
            </summary>
            <returns>A shallow copy of current parameters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.GetEncryptionAlgorithms">
            <summary>
            Gets a list of allowed encryption algorithms IDs and their order. See <see cref="M:ComponentPro.Net.SecureShellConfig.SetEncryptionAlgorithms(System.String[])"/> for more info.
            </summary>
            <returns>List of encryption algorithm IDs.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.SetEncryptionAlgorithms(System.String[])">
            <summary>
            Specifies a list of allowed encryption algorithms IDs and their order.
            <see cref="P:ComponentPro.Net.SecureShellConfig.EncryptionAlgorithms"/> and <see cref="P:ComponentPro.Net.SecureShellConfig.EncryptionModes"/> still apply.
            Setting to null (Nothing in VB.NET) or an empty list specifies that the default list and order is to be used.
            See the remarks for a list of supported algorithm IDs.
            </summary>
            <param name="algorithmIds">List of algorithm IDs</param>
            <remarks>
            Currently, supported algorithms are:
            "aes256-ctr", "aes192-ctr", "aes128-ctr", "aes256-cbc",
            "aes192-cbc", "aes128-cbc", "3des-ctr", "3des-cbc",
            "twofish256-ctr", "twofish192-ctr", "twofish128-ctr",
            "twofish256-cbc", "twofish192-cbc", "twofish128-cbc",
            "twofish-cbc", "blowfish-ctr", "blowfish-cbc", "arcfour256",
            "arcfour128", "arcfour"
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.MacAlgorithms">
            <summary>
            Get or sets the allowed message authentication code algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EncryptionAlgorithms">
            <summary>
            Gets or sets the group of allowed encryption algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EncryptionModes">
            <summary>
            Gets or sets the group of allowed encryption modes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.AuthenticationMethods">
            <summary>
            Gets or sets the group of allowed authentication methods.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.KeyExchangeAlgorithms">
            <summary>
            Gets or sets the group of allowed key exchange algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.HostKeyAlgorithms">
            <summary>
            Gets or sets the group of allowed host key algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.PreferredHostKeyAlgorithm">
            <summary>
            Gets or sets the preferred host key (server key) algorithm.
            </summary>
            <value>Preferred host key algorithm. Only one value can be specified.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.CompressionEnabled">
            <summary>
            Gets or sets a value indicating whether transfer compression is to be used if supported by the server.
            </summary>
            <value><c>true</c> to use compression; <c>false</c> to not use compression (default).</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPublicKeyFormat">
            <summary>
            Specifies public key file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPublicKeyFormat.Ssh2Base64">
            <summary>Base64-encoded SSH2 public key format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPublicKeyFormat.Ssh2Raw">
            <summary>Raw SSH2 public ket format.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPublicKey">
            <summary>
            Represents SSH RSA or DSA public key.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.Byte[])">
            <summary>
            Loads a SSH2 public key from the specified raw data.
            </summary>
            <param name="data">Raw private key data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.String)">
            <summary>
            Loads a SSH2 public key from the specified file.
            </summary>
            <param name="path">A path to file with the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.IO.Stream)">
            <summary>
            Loads a SSH2 public key from the specified stream.
            </summary>
            <param name="input">A stream with the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA public keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA public keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.String)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded SSH2 public key format.
            </summary>
            <param name="path">A path to a file to which to save the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.String,ComponentPro.Net.SecureShellPublicKeyFormat)">
            <summary>
            Saves the public key into the supplied stream in the specified format.
            </summary>
            <param name="path">A path to a file to which to save the public key.</param>
            <param name="format">Public key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.IO.Stream)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded SSH2 public key format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.IO.Stream,ComponentPro.Net.SecureShellPublicKeyFormat)">
            <summary>
            Saves the public key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
            <param name="format">Public key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetPublicKey">
            <summary>
            Gets the public key in SSH format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.VerifySignature(System.Byte[],System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Verifies an SSH authentication signature for the specified hash.
            </summary>
            <param name="hash">Hash.</param>
            <param name="signature">Signature to verify.</param>
            <param name="algorithm">Signature algorithm (only SHA1 is supported at the moment).</param>
            <returns>SSH authentication signature.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.KeyAlgorithm">
            <summary>
            Gets the key algorithm.
            </summary>
            <value>Key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.KeyAlgorithmId">
            <summary>
            Gets the key algorithm ID
            </summary>
            <value>Key algorithm ID.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.Comment">
            <summary>
            Gets or sets the key comment. The comment is used while saving in some formats.
            </summary>
            <value>Key comment.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.Fingerprint">
            <summary>
            Gets the public key fingerprint.
            </summary>
            <value>Public key fingerprint.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPrivateKeyFormat">
            <summary>
            Specifies private key file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.Pkcs8">
            <summary>PKCS #8 format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.Putty">
            <summary>PuTTY PPKv2 format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.OpenSsh">
            <summary>OpenSSH/OpenSSL SSLeay format.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPrivateKey">
            <summary>
            Represents SSH RSA or DSA private key. Private key data also includes the public key.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Create">
            <summary>
            Generates an SSH private key using the RSA algorithm with a key size of 1024 bits.
            </summary>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Create(ComponentPro.Net.SecureShellHostKeyAlgorithm,System.Int32)">
            <summary>
            Generates an SSH private key using the specified algorithm and key size.
            </summary>
            <param name="algorithm">Key algorithm. RSA or DSA.</param>
            <param name="keySize">Key size.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateFrom(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates an SSH private key from the specified RSA parameters.
            </summary>
            <param name="parameters">The RSA parameters.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateFrom(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates an SSH private key from the specified DSA parameters.
            </summary>
            <param name="parameters">The DSA parameters.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a certificate-based SSH key for use with SSH/SFTP servers that support X509 certificate authentication.
            </summary>
            <param name="certificate">X509 certificate.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(c_RCC)">
            <summary>
            Creates a certificate-based SSH key for use with SSH/SFTP servers that support X509 certificate authentication.
            </summary>
            <param name="certificate">X509 certificate.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.String,System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified path.
            </summary>
            <param name="path">A path to the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if not password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.IO.Stream,System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified stream.
            </summary>
            <param name="input">A stream from which to load the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if not password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Byte[],System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified raw data.
            </summary>
            <param name="data">Raw private key data.</param>
            <param name="password">Password used to encrypted the private key, or null if not password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an SSH private key based on the specified <see cref="T:System.Security.Cryptography.RSA"/> or <see cref="T:System.Security.Cryptography.DSA"/> object.
            </summary>
            <param name="algorithm">An <see cref="T:System.Security.Cryptography.RSA"/> or <see cref="T:System.Security.Cryptography.DSA"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.IO.Stream,System.String,System.Object)">
            <summary>
            Saves the private key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">The algorithm to use for encryption. Ignored if password is null. Null defaults to "3DES".</param>
            <remarks>
            The encryptionAlgorithm can accepts a String or a Type.
            Currently, the following strings and types are accepted:<br/>
            TripleDES: null, "3DES", "TripleDES", "1.2.840.113549.3.7", typeof(System.Security.Cryptography.TripleDES)<br/>
            DES: "DES", "1.3.14.3.2.7", typeof(System.Security.Cryptography.DES)<br/>
            RC2: "RC2", "1.2.840.113549.3.2", typeof(System.Security.Cryptography.RC2)<br/>
            To save the key in PuTTY format, pass the "putty" string to the encryptionAlgorithm argument.<br/>
            To save the key on OpenSSH/OpenSSL SSLeay format, pass the "ssleay" or "openssh" string to the encryptionAlgorithm argument.<br/>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.String,System.String,System.Object)">
            <summary>
            Saves the private key into the specified file in Base64-encoded PKCS #8 format.
            </summary>
            <param name="path">A path to stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">The algorithm to use for encryption. Ignored if password is null. Null defaults to "3DES".</param>
            <remarks>
            The encryptionAlgorithm can accepts a String or a Type.
            Currently, the following strings and types are accepted:<br/>
            TripleDES: null, "3DES", "TripleDES", "1.2.840.113549.3.7", typeof(System.Security.Cryptography.TripleDES)<br/>
            DES: "DES", "1.3.14.3.2.7", typeof(System.Security.Cryptography.DES)<br/>
            RC2: "RC2", "1.2.840.113549.3.2", typeof(System.Security.Cryptography.RC2)<br/>
            To save the key in PuTTY format, pass the "putty" string to the encryptionAlgorithm argument.<br/>
            To save the key on OpenSSH/OpenSSL SSLeay format, pass the "ssleay" or "openssh" string to the encryptionAlgorithm argument.<br/>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.IO.Stream,System.String,ComponentPro.Net.SecureShellPrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.String,System.String,ComponentPro.Net.SecureShellPrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="path">A path to stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetPrivateKey">
            <summary>
            Gets the raw form of the private key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA private keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA private keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateSignature(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Creates an SSH authentication signature from the specified hash.
            </summary>
            <param name="hash">Hash.</param>
            <param name="algorithm">Signature algorithm (only SHA1 is supported at the moment).</param>
            <returns>SSH authentication signature.</returns>
        </member>
        <member name="T:ComponentPro.Net.SecureShellConnection">
            <summary>
            Represents a client-side SSH 2.0 session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellConnection.DefaultPort">
            <summary>
            Default SSH port (22).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.PasswordChangeRequest"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnBannerReceived(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.Banner"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.HostKeyVerifying"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/> class.
            </summary>
            <remarks>
            The default constructor initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor(c_O3B)">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Disconnect">
            <summary>
            Terminates the SSH session.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Dispose">
            <summary>
            Disposes the <see cref="T:ComponentPro.Net.SecureShellConnection"/> object and the underlying socket object.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.String)">
            <summary>
            Establishes a connection to port 22 of an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (e.g. 22).</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to an SSH server.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Negotiate">
            <summary>
            Requests and performs an additional key exchange. Not all SSH servers support this.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">Username.</param>
            <param name="oldPassword">Old password.</param>
            <param name="newPassword">New password.</param>
            <returns>Password change result.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates to the SSH server using a username and an RSA or DSA private key.
            </summary>
            <param name="userName">Username.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,System.String)">
            <summary>
            Authenticates to the SSH server using a username and password.
            </summary>
            <param name="userName">Username.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates to the SSH server using a username and an RSA or DSA private key and a password.
            </summary>
            <param name="userName">Username.</param>
            <param name="password">Password.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
            <remarks>This method is supported by GlobalScape SFTP server.</remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenChannel(ComponentPro.Net.SecureShellChannelType,System.Int32)">
            <summary>
            Opoens an SSH channel of the specified type.
            </summary>
            <param name="type">Channel type.</param>
            <param name="bufferSize">Buffer size.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenSession">
            <summary>
            Opens an SSH session channel.
            </summary>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenTcpIpTunnel(System.Net.IPEndPoint)">
            <summary>
            Opens an outgoing TCP/IP tunnel to the specified remote endpoint.
            </summary>
            <param name="remoteEP">Remote endpoint.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenTcpIpTunnel(System.String,System.Int32)">
            <summary>
            Opens an outgoing TCP/IP tunnel to the specified remote endpoint.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="port">Port.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.KeepAlive">
            <summary>
            Sends an SSH_MSG_IGNORE packet to the server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)">
            <summary>
            Starts incoming TCP/IP tunnel on the specified IP address and port at the SSH server.
            </summary>
            <param name="address">Remote IP address to bind to. Most SSH installations only allow 127.0.0.1.</param>
            <param name="port">Remote port to bind to. Set this to 0 to get a random port automatically.</param>
            <returns>A forwarding handle.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.EndTcpIpForwarding(ComponentPro.Net.TcpIpForwardingRule)">
            <summary>
            Stops an incoming TCP/IP tunnel.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)"/>.</param>
            <returns>A forwarding handle.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.AcceptTcpIpForwarding(ComponentPro.Net.TcpIpForwardingRule,System.Int32)">
            <summary>
            Accepts a forwarded incoming connection.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)"/>.</param>
            <param name="timeout">
            Specifies an amount of time (in milliseconds) to wait for incoming connections. Use -1 to specify an infinite time and 1 to just return
            as soon as the current queue status is checked, or a higher value to wait for the specified amount of time.
            </param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.AcceptTcpIpForwarding(ComponentPro.Net.TcpIpForwardingRule)">
            <summary>
            Accepts a forwarded incoming connection. If there is no incoming connection in the queue, waits indefinitely.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)"/>.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.c_YLE">
            <summary>
            Gets a socket factory that creates socket tunneled through this SSH session.
            </summary>
            <returns>A socket factory.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.UserName">
            <summary>
            Gets the authenticated user name, if available.
            </summary>
            <value>User name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerName">
            <summary>
            Gets the server name, if available.
            </summary>
            <value>Server name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerPort">
            <summary>
            Gets the server port, if available.
            </summary>
            <value>server port, or 0.</value>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.c_S4A">
            <summary>
            Gets the internal <see cref="!:ComponentPro.Net.ISocket"/> value.
            </summary>
            <value>The internal <see cref="!:ComponentPro.Net.ISocket"/> value.</value>
            <remarks>Use with care.</remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.UTF8</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <remarks>
            <p>
            This property returns the latest known state of the session. 
            When it returns false, the session was either never connected, or no longer connected. 
            When it returns true, the session was connected at the time of the last I/O operation.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session  is still connected even though
            <see cref="P:ComponentPro.Net.SecureShellConnection.IsConnected"/> returns true.
            </p>
            </remarks>
            <value>True if connected; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session is authenticated.
            </summary>
            <value>True if authenticated; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Parameters">
            <summary>
            Gets or sets the security parameters of the current socket.
            </summary>
            <value>The security parameters of the current socket.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.c_EME">
            <summary>
            Gets or sets SshSession options.
            </summary>
            <value>SshSession options.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Cipher">
            <summary>
            Gets the active cipher.
            </summary>
            <value>Active cipher.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Fingerprint">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerKey">
            <summary>
            Gets the server public key.
            </summary>
            <value>Server public key.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.State">
            <summary>
            Gets the current session state.
            </summary>
            <value>Session state.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerIdentification">
            <summary>
            Gets the server's identification string it returns after connected.
            </summary>
            <value>Server's identification string.</value>
        </member>
        <member name="T:ComponentPro.Net.SecurityMode">
            <summary>
            Specifies TLS/SSL security mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecurityMode.None">
            <summary>
            Unsecured connection. No TLS/SSL.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecurityMode.Implicit">
            <summary>
            Implicitly secured TLS/SSL connection.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecurityMode.Explicit">
            <summary>
            Explicitly secured TLS/SSL connection.
            </summary>
        </member>
        <member name="T:c_HYE">
            <summary>
            The event group.
            </summary>
        </member>
        <member name="F:c_HYE.c_H0">
            <summary>
            Debug info.
            </summary>
        </member>
        <member name="F:c_HYE.c_KYE">
            <summary>
            Handshake message.
            </summary>
        </member>
        <member name="F:c_HYE.c_MYE">
            <summary>
            Alert message.
            </summary>
        </member>
        <member name="F:c_HYE.c_LYE">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="F:c_HYE.c_NYE">
            <summary>
            Cipher specification messages.
            </summary>
        </member>
        <member name="T:c_DYE">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="F:c_DYE.c_OYE">
            <summary>A cached session is being re-established.</summary>
        </member>
        <member name="F:c_DYE.c_PYE">
            <summary>Received data of unknown message type.</summary>
        </member>
        <member name="F:c_DYE.c_QYE">
            <summary>Unexpected exception encountered.</summary>
        </member>
        <member name="F:c_DYE.c_RYE">
            <summary>HelloRequest handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_SYE">
            <summary>ClientHello handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_TYE">
            <summary>ServerHello handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_CQD">
            <summary>Certificate handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_UYE">
            <summary>ServerKeyExchange handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_VYE">
            <summary>CertificateRequest handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_WYE">
            <summary>ServerHelloDone handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_XYE">
            <summary>CertificateVerify handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_YYE">
            <summary>ClientKeyExchange handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_ZYE">
            <summary>Finished handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_AZE">
            <summary>Unknown handshake message.</summary>
        </member>
        <member name="F:c_DYE.c_MYE">
            <summary>Alert message.</summary>
        </member>
        <member name="F:c_DYE.c_BZE">
            <summary>Cipher negotiation has begun.</summary>
        </member>
        <member name="F:c_DYE.c_CZE">
            <summary>Socket was secured.</summary>
        </member>
        <member name="F:c_DYE.c_DZE">
            <summary>Socket was closed.</summary>
        </member>
        <member name="F:c_DYE.c_EZE">
            <summary>ChangeCipherSpec message.</summary>
        </member>
        <member name="T:c_EYE">
            <summary>
            The source of the event.
            </summary>
        </member>
        <member name="F:c_EYE.c_ONC">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:c_EYE.c_FZE">
            <summary>
            Sent by the local computer.
            </summary>
        </member>
        <member name="F:c_EYE.c_GZE">
            <summary>
            Received from the remote computer.
            </summary>
        </member>
        <member name="T:c_FYE">
            <summary>
            Debug level.
            </summary>
        </member>
        <member name="F:c_FYE.c_N0A">
            <summary>
            No debug events.
            </summary>
        </member>
        <member name="F:c_FYE.c_HZE">
            <summary>
            Important events only. This is the default.
            </summary>
        </member>
        <member name="F:c_FYE.c_JZE">
            <summary>
            All events.
            </summary>
        </member>
        <member name="T:c_JYE">
            <summary>
            Represents the method that will handle the <see cref="!:TlsSocket.Debug">Debug</see> event of a <see cref="!:TlsSocket"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="!:TlsDebugEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:c_CYE">
            <summary>
            Provides data for the <see cref="!:TlsSocket.Debug">Message</see> event.
            </summary>
        </member>
        <member name="M:c_CYE.c_MZE">
            <summary>
            Returns the raw data of the message, if available.
            </summary>
            <returns>Raw data of the message.</returns>
        </member>
        <member name="M:c_CYE.#ctor(c_DYE,c_EYE,c_FYE)">
            <summary>
            Initializes a new instance of the <see cref="!:TlsDebugEventArgs"/> class.
            </summary>
            <param name="type">Event type.</param>
            <param name="source">Event source.</param>
            <param name="level">Event level.</param>
        </member>
        <member name="M:c_CYE.#ctor(c_DYE,c_EYE,c_FYE,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:TlsDebugEventArgs"/> class.
            </summary>
            <param name="type">Event type.</param>
            <param name="source">Event source.</param>
            <param name="level">Event level.</param>
            <param name="buffer">Buffer containing the unparsed message.</param>
            <param name="offset">Offset of the message in buffer.</param>
            <param name="count">Length of the message.</param>
        </member>
        <member name="P:c_CYE.c_OK">
            <summary>
            Gets the event type.
            </summary>
            <value>The event type.</value>
        </member>
        <member name="P:c_CYE.c_SZB">
            <summary>
            Gets the event group.
            </summary>
            <value>The event group.</value>
        </member>
        <member name="P:c_CYE.c_LZE">
            <summary>
            Gets the event source.
            </summary>
            <value>The event source.</value>
        </member>
        <member name="P:c_CYE.c_NZE">
            <summary>
            Gets the event level.
            </summary>
            <value>The event level.</value>
        </member>
        <member name="T:c_QZE">
            <summary>
            Defines an interface for a certificate verifiers used to verify TLS/SSL server certificates.
            The <see cref="!:CertificateVerifier"/> class provides several common verifiers.
            </summary>
        </member>
        <member name="M:c_QZE.c_C0E(c_RZE,System.String,c_SFC)">
            <summary>
            Validates a certificate.
            </summary>
            <param name="socket">The socket that needs the certificate verification.</param>
            <param name="commonName">Common name of the server.</param>
            <param name="certificateChain">Certificate chain to be validated.</param>
            <returns>True to accept the chain, False to reject.</returns>
        </member>
        <member name="T:c_XZE">
            <summary>
            Defines an interface for a certificate request handlers used to select a client certifiacte to be used to authenticate to a TLS/SSL server.
            The <see cref="!:CertificateRequestHandler"/> class provides several common verifiers.
            </summary>
        </member>
        <member name="M:c_XZE.c_XPE(c_RZE,c_JEC[])">
            <summary>
            Called by an instance of <see cref="!:TlsSocket"/> when the TLS/SSL server requests client certificate authentication.
            </summary>
            <param name="socket">The socket that needs the certificate verification.</param>
            <param name="issuers">A list of acceptable certificate issuers.</param>
            <returns>Certificate chain representing the client certificate, or <code>null</code> if the client does not wish to (or cannot) authenticate using a certifiacte.</returns>
        </member>
        <member name="T:c_OZE">
            <summary>
            Provides a set of common verifiers.
            </summary>
        </member>
        <member name="F:c_OZE.c_G0E">
            <summary>
            A verifier that accepts all certificates - no verification is done.
            </summary>
            <remarks>This is very insecure. Only use this during debugging.</remarks>
        </member>
        <member name="F:c_OZE.c_NNA">
            <summary>
            Default verifier. Recommended.
            </summary>
            <remarks>Uses the SSPI provider to validate the certificate chain.</remarks>
        </member>
        <member name="T:c_VZE">
            <summary>
            Provides a set of common certificate request handlers.
            </summary>
        </member>
        <member name="F:c_VZE.c_K0E">
            <summary>
            A certificate request handler that selects no certificate.
            </summary>
            <remarks>Use this if you don't want to authenticate using the client certificate.</remarks>
        </member>
        <member name="F:c_VZE.c_M0E">
            <summary>
            Inteligent certificate request handler. Recommended for non-GUI applications.
            </summary>
            <remarks>Uses the SSPI provider to select a first suitable certificate found in user's certificate store.</remarks>
        </member>
        <member name="M:c_VZE.c_B0E(c_SFC)">
            <summary>
            A certificate request handler that returns the certificate specified by the supplied chain.
            </summary>
            <param name="certificateChain">Certificate chain with an associated private key.</param>
            <returns>A new instance of ICertificateRequestHandler.</returns>
        </member>
        <member name="M:c_VZE.c_B0E(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            A certificate request handler that returns the certificate specified by the supplied chain.
            </summary>
            <param name="certificateChain">Certificate chain with an associated private key.</param>
            <returns>A new instance of ICertificateRequestHandler.</returns>
        </member>
        <member name="T:ComponentPro.Security.CertificateReceivedEventHandler">
            <summary>Represents that method that will handle the <b>CertificateReceived</b> event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Security.CertificateReceivedEventArgs">
            <summary>
            Provides information on the certificate that is received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.ServerCertificates">
            <summary>
            Gets the certificate received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.Status">
            <summary>
            Gets the verification status of the certificate received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.Accept">
            <summary>
            Gets or sets a boolean value indicating whether to accept <see cref="P:ComponentPro.Security.CertificateReceivedEventArgs.ServerCertificates">the certificated</see> received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.ErrorCode">
            <summary>
            Gets the verification error code.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.AddToTrustedRoot">
            <summary>
            Gets or sets a boolean value indicating whether to add this certificate to the trusted list.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.CertificateRequiredEventHandler">
            <summary>Represents that method that will handle the <b>CertificateRequired</b> event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Security.CertificateRequiredEventArgs">
            <summary>
            Provides information on the certificate that the server requires from the client.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateRequiredEventArgs.Certificates">
            <summary>
            Gets or sets the client's certificate that is required by the server, or null to try to search for the certificate in the store.
            </summary>
        </member>
        <member name="F:c_G7E.c_H8E">
            <summary>
            The TLS socket.
            </summary>
        </member>
        <member name="F:c_G7E.c_DWA">
            <summary>
            The underlying socket.
            </summary>
        </member>
        <member name="F:c_G7E.c_JH">
            <summary>
            Timeout fields.
            </summary>
        </member>
        <member name="F:c_G7E.c_QE">
            <summary>
            Specifies the current socket state.
            </summary>
        </member>
        <member name="F:c_G7E.c_HCD">
            <summary>
            Security parameters.
            </summary>
        </member>
        <member name="T:c_Q2E">
            <summary>
            Represents a TLS/SSL cipher.
            </summary>
        </member>
        <member name="M:c_Q2E.ToString">
            <summary>
            Returns a description of the cipher.
            </summary>
            <returns>Description of the cipher.</returns>
        </member>
        <member name="P:c_Q2E.c_W6E">
            <summary>
            Gets the active cipher algorithm.
            </summary>
            <value>Active cipher algorithm.</value>
        </member>
        <member name="P:c_Q2E.c_T6E">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:c_Q2E.c_Q6E">
            <summary>
            Gets the value indicating whether the cipher is a block cipher in CBC mode.
            </summary>
            <value>true if block cipher, false if stream cipher.</value>
        </member>
        <member name="P:c_Q2E.c_K6E">
            <summary>
            Gets the size of key material.
            </summary>
            <value>Size of key material.</value>
        </member>
        <member name="P:c_Q2E.c_W5B">
            <summary>
            Gets the key size.
            </summary>
            <value>Key size.</value>
        </member>
        <member name="P:c_Q2E.c_F5C">
            <summary>
            Gets the effective key size.
            </summary>
            <value>Effective key size.</value>
        </member>
        <member name="P:c_Q2E.c_G6B">
            <summary>
            Gets the cipher's block size.
            </summary>
            <value>Block size.</value>
        </member>
        <member name="P:c_Q2E.c_M9D">
            <summary>
            Gets the MAC algorithm block size.
            </summary>
            <value>MAC algorithm block size.</value>
        </member>
        <member name="P:c_Q2E.c_SDC">
            <summary>
            Gets the value indicating whether the cipher is exportable.
            </summary>
            <value>true if exportable, false if not exportable.</value>
        </member>
        <member name="P:c_Q2E.c_X5E">
            <summary>
            Gets the active protocol version.
            </summary>
            <value>The active protocol version.</value>
        </member>
        <member name="P:c_Q2E.c_DAF">
            <summary>
            Gets the selected key exchange algorithm.
            </summary>
            <value>Selected key exchange algorithm.</value>
        </member>
        <member name="P:c_Q2E.c_EAF">
            <summary>
            Returns the cipher suite ID.
            </summary>
            <value>Cipher suite ID.</value>
        </member>
        <member name="T:c_YXE">
            <summary>
            The exception that is thrown when a TLS/SSL error occurs.
            </summary>
        </member>
        <member name="M:c_YXE.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:TlsException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:c_YXE.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="!:TlsException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ComponentPro.Net.SslConfig">
            <summary>
            Represents the SSL configuration.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SslConfig.GetSslConfig">
            <summary>
            Returns a shallow copy of the current parameters.
            </summary>
            <returns>A shallow copy of current parameters.</returns>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.AllowedTlsSslVersion">
            <summary>
            Gets or sets the allowed protocol versions.
            </summary>
            <value>Allowed protocol versions.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.c_AEF">
            <summary>
            Gets or sets a boolean value indicating whether to send empty record after sucessful handshake with CBC ciphers. Default value is to send.
            </summary>
            <remarks>For compatibility with broken implementations.</remarks>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.c_F0E">
            <summary>
            Gets or sets the entity of a socket.
            </summary>
            <value>Connection entity.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.c_EME">
            <summary>
            Gets or sets the connection options.
            </summary>
            <value>Connection options.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.AllowedTlsSslCipherSuites">
            <summary>
            Gets or sets the group of allowed cipher suites.
            </summary>
            <value>The group of allowed cipher suites.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.CommonName">
            <summary>
            Gets or sets the common name of the server.
            </summary>
            <value>The common name of the server.</value>
        </member>
        <member name="T:c_OAF">
            <summary>
            Represents a cached TLS/SSL session.
            </summary>
        </member>
        <member name="T:c_RZE">
            <summary>
            Represents a TLS/SSL-enabled TCP socket.
            </summary>
            <remarks>
            <p>
            This class is suitable for securing your socket communication using
            the TLS 1.0 protocol or its predecesor SSL 3.0.
            </p>
            <p>
            Only TCP protocol is supported.
            </p>
            </remarks>
        </member>
        <member name="M:c_RZE.c_P3B(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:c_RZE.#ctor">
            <summary>
            Initializes an instance of the <see cref="!:TlsSocket"/> class.
            </summary>
            <remarks>
            The default constructor initializes an instance of the <see cref="!:TlsSocket"/>.
            </remarks>
        </member>
        <member name="M:c_RZE.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes an instance of the <see cref="!:TlsSocket"/> class with the specified address family.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:c_RZE.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an instance of the <see cref="!:TlsSocket"/> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
            <remarks>Use this if you need to upgrade an existing socket to use TLS/SSL.</remarks>
        </member>
        <member name="M:c_RZE.#ctor(c_O3B)">
            <summary>
            Initializes an instance of the <see cref="!:TlsSocket"/> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
            <remarks>Use this if you need to upgrade an existing socket to use TLS/SSL.</remarks>
        </member>
        <member name="M:c_RZE.c_PWA(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="!:TlsSocket"/>.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:c_RZE.c_PWA(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="!:TlsSocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:c_RZE.c_PWA(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to a connected <see cref="!:TlsSocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:c_RZE.c_QWA(System.Byte[])">
            <summary>
            Receives data from a connected <see cref="!:TlsSocket"/>.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:c_RZE.c_QWA(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="!:TlsSocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:c_RZE.c_QWA(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from a connected <see cref="!:TlsSocket"/> using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:c_RZE.c_HQE">
            <summary>
            Negotiates TLS/SSL cipher.
            </summary>
        </member>
        <member name="M:c_RZE.c_M9E">
            <summary>
            Reverts back to an unencrypted socket.
            </summary>
        </member>
        <member name="M:c_RZE.c_X6A(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <remarks>
            The Connect method establishes a network connection to a device identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_RZE.c_X6A(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:c_RZE.c_PWA(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to a connected <see cref="!:TlsSocket"/> starting at the indicated location in the data and using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:c_RZE.c_QWA(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from a connected <see cref="!:TlsSocket"/> into a specific location of the receive buffer and using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:c_RZE.c_AFF(System.Object)">
            <summary>
            Used internally by ComponentPro components.
            </summary>
            <param name="arg">Argument.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:c_RZE.c_J8A(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on a <see cref="!:TlsSocket"/>.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown"/> value specifying the operation that will no longer be allowed.</param>
            <remarks>
            See the reference for <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)"/> for details.
            </remarks>
        </member>
        <member name="M:c_RZE.c_R4A">
            <summary>
            Forces a <see cref="!:TlsSocket"/> connection to close.
            </summary>
            <remarks>
            <p>
            The application should call <see cref="!:Shutdown"/> before calling Close to ensure that
            all pending data is sent or received before the Socket is closed.
            </p>
            </remarks>
        </member>
        <member name="P:c_RZE.c_S4A">
            <summary>
            Gets the internal <see cref="T:System.Net.Sockets.Socket"/> value (only for sockets based on Socket or ProxySocket, otherwise null is returned).
            </summary>
            <value>The internal <see cref="T:System.Net.Sockets.Socket"/> value.</value>
            <remarks>Use with care.</remarks>
        </member>
        <member name="P:c_RZE.c_G4A">
            <summary>
            Gets or sets the length of time before the operation times out.
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="T:System.Threading.Timeout"/> property only affects synchronous methods.
            </p>
            <p>
            Minimal value is 500. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:c_RZE.c_T8A">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="!:TlsSocket"/> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            either the remote host or the proxy server.
            RemoteEndPoint is set by <see cref="!:TlsSocket"/> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="P:c_RZE.c_U8A">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="!:TlsSocket"/> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:c_RZE.c_V8A">
            <summary>
            Gets a value indicating whether a <see cref="!:TlsSocket"/> is connected to a remote resource.
            </summary>
            <value>true if the <see cref="!:TlsSocket"/> is connected to a remote resource; otherwise, false.</value>
            <remarks>
            <p>
            Gets the connection state of the <see cref="!:TlsSocket"/>. This property will return
            the latest known state of the SecureSocket. When it returns false, the socket was either never
            connected, or no longer connected.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session is still connected even though
            Connected returns true.
            </p>
            </remarks>
        </member>
        <member name="P:c_RZE.c_FHE">
            <summary>
            Gets the connection session
            </summary>
            <value>The connection session.</value>
        </member>
        <member name="P:c_RZE.c_O6B">
            <summary>
            Gets the active cipher.
            </summary>
            <value>Active cipher.</value>
        </member>
        <member name="P:c_RZE.c_LCF">
            <summary>
            Gets the server's certificate chain.
            </summary>
            <value>The server's certificate chain.</value>
            <remarks>The first certificate in the chain is the server's certificate.</remarks>
        </member>
        <member name="P:c_RZE.c_NCF">
            <summary>
            Gets the client's certificate chain.
            </summary>
            <value>The client's certificate chain.</value>
            <remarks>The first certificate in the chain is the client's certificate.</remarks>
        </member>
        <member name="P:c_RZE.c_CFF">
            <summary>
            Gets the current security state of the connection.
            </summary>
            <value>True if all data (send or received) is beign encrypted.</value>
            <remarks>
            Use <see cref="!:Negotiate"/> method to secure the connection.
            </remarks>
        </member>
        <member name="P:c_RZE.c_F0E">
            <summary>
            Gets the entity.
            </summary>
            <value>Entity.</value>
            <remarks>Entity is Client for client sockets and Server for server sockets.</remarks>
        </member>
        <member name="P:c_RZE.c_DFF">
            <summary>
            Gets the active data compression method.
            </summary>
            <value>Active data compression method.</value>
            <remarks>No data compression is currently supported.</remarks>
        </member>
        <member name="P:c_RZE.c_BJC">
            <summary>
            Gets or sets the security parameters of the current socket.
            </summary>
            <value>The security parameters of the current socket.</value>
        </member>
        <member name="P:c_RZE.c_R3B">
            <summary>
            Gets the instance of <see cref="!:ISocketFactory"/> that created this <see cref="!:ISocket"/>.
            </summary>
            <value>An instance of <see cref="!:ISocketFactory"/>.</value>
        </member>
        <member name="T:ComponentPro.Net.TlsSslProtocol">
            <summary>
            TLS/SSL protocol version.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.None">
            <summary>
            No SSL/TLS used.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.SSL30">
            <summary>
            SSL 3.0 protocol. Deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS10">
            <summary>
            TLS 1.0 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS11">
            <summary>
            TLS 1.1 protocol. Experimental.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslVersion">
            <summary>
            Defines the TLS/SSL protocol version flags.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.SSL30">
            <summary>
            SSL 3.0 protocol. Deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS10">
            <summary>
            TLS 1.0 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS11">
            <summary>
            TLS 1.1 protocol. Experimental.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.Any">
            <summary>
            Use any supported protocol
            </summary>
        </member>
        <member name="F:c_UZE.c_N0A">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:c_UZE.c_S3A">
            <summary>
            Server socket.
            </summary>
        </member>
        <member name="F:c_UZE.c_T5E">
            <summary>
            Client socket.
            </summary>
        </member>
        <member name="F:c_R2E.c_N0A">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:c_R2E.c_T2E">
            <summary>
            RC4.
            </summary>
        </member>
        <member name="F:c_R2E.c_JCD">
            <summary>
            RC2.
            </summary>
        </member>
        <member name="F:c_R2E.c_R4C">
            <summary>
            DES.
            </summary>
        </member>
        <member name="F:c_R2E.c_A5B">
            <summary>
            TripleDES.
            </summary>
        </member>
        <member name="F:c_R2E.c_B5B">
            <summary>
            AES.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslMacAlgorithm">
            <summary>
            Specifies the MAC algorithm in use.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslMacAlgorithm.None">
            <summary>
            No MAC algorithm in use.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslMacAlgorithm.MD5">
            <summary>
            MD5 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslMacAlgorithm.SHA1">
            <summary>
            SHA1 algorithm.
            </summary>
        </member>
        <member name="F:c_UEF.c_N0A">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:c_S2E.c_N0A">
            <summary>
            No key exchange.
            </summary>
        </member>
        <member name="F:c_S2E.c_ZCC">
            <summary>
            RSA signature, RSA encryption.
            </summary>
        </member>
        <member name="F:c_S2E.c_U2E">
            <summary>
            RSA signature, ephemeral Diffie-Hellman.
            </summary>
        </member>
        <member name="F:c_S2E.c_V2E">
            <summary>
            DSS signature, ephemeral Diffie-Hellman.
            </summary>
        </member>
        <member name="F:c_S2E.c_W2E">
            <summary>
            Anonymous Diffie-Hellman.
            </summary>
        </member>
        <member name="F:c_H7E.c_V7E">
            <summary>
            Connection is not secured yet.
            </summary>
        </member>
        <member name="F:c_H7E.c_BZE">
            <summary>
            Security parameters negotiation is in progress.
            </summary>
        </member>
        <member name="F:c_H7E.c_O7E">
            <summary>
            Connection is secured, transfers are encrypted.
            </summary>
        </member>
        <member name="F:c_H7E.c_DZE">
            <summary>
            Connection has been closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslCipherSuite">
            <summary>
            Defines the cipher suites.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.None">
            <summary>
            No cipher suite.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT_WITH_RC4_40_MD5">
            <summary>
            Exportable 40bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_RC4_128_MD5">
            <summary>
            128bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_RC4_128_SHA">
            <summary>
            128bit RC4 with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT_WITH_RC2_CBC_40_MD5">
            <summary>
            Exportable 40bit RC2 in CBC mode with MD5 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT1024_WITH_DES_CBC_SHA">
            <summary>
            Exportable 56bit DES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT1024_WITH_RC4_56_SHA">
            <summary>
            Exportable 56bit RC4 mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA">
            <summary>
            Exportable 56bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_EXPORT1024_WITH_RC4_56_SHA">
            <summary>
            Exportable 40bit RC4 with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_RC4_128_SHA">
            <summary>
            128bit RC4 with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_WITH_RC4_128_MD5">
            <summary>
            Anonymous 128bit RC4 with MD5 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_WITH_3DES_EDE_CBC_SHA">
            <summary>
            Anonymous TripleDES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_WITH_DES_CBC_SHA">
            <summary>
            Anonymous DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_EXPORT_WITH_RC4_40_MD5">
            <summary>
            Anonymous exportable 40bit RC4 with MD5 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.Secure">
            <summary>
            Specifies all ciphers that are currently considered secure.
            </summary>
            <remarks>See <see cref="T:ComponentPro.Net.TlsSslCipherSuite"/> for the list.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.Anonymous">
            <summary>
            Specifies anonymous ciphers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.All">
            <summary>
            Specifies all ciphers, including the weak ciphers, excluding anonymous ciphers.
            </summary>
        </member>
        <member name="F:c_VAF.c_WAF">
            <summary>
            Don't request a client certificate.
            </summary>
        </member>
        <member name="F:c_VAF.c_KFF">
            <summary>
            Request a client certificate, but do not fail if none is provided.
            </summary>
        </member>
        <member name="F:c_VAF.c_XAF">
            <summary>
            Request a client certificate and fail if none is provided.
            </summary>
        </member>
        <member name="F:c_SZE.Accept">
            <summary>
            A certificate is to be accepted.
            </summary>
        </member>
        <member name="F:c_SZE.CommonNameMismatch">
            <summary>
            The certificate common name does not match the server's name.
            </summary>
        </member>
        <member name="F:c_SZE.RevocationCheckFailed">
            <summary>
            Unable to perform revocation check of the server certificate.
            </summary>
        </member>
        <member name="F:c_SZE.Bad">
            <summary>
            A certificate is corrupt, contains signatures that do not verify correctly, etc.
            </summary>
        </member>
        <member name="F:c_SZE.Unsupported">
            <summary>
            A certificate is of an unsupported type.
            </summary>
        </member>
        <member name="F:c_SZE.Revoked">
            <summary>
            A certificate was revoked by its signer.
            </summary>
        </member>
        <member name="F:c_SZE.Expired">
            <summary>
            A certificate has expired or is not currently valid.
            </summary>
        </member>
        <member name="F:c_SZE.UnknownAuthority">
            <summary>
            A CA certificate could not be found or untrusted CA.
            </summary>
        </member>
        <member name="F:c_SZE.Other">
            <summary>
            Some other issue arose in processing the certificate, rendering it unacceptable.
            </summary>
        </member>
        <member name="F:c_Y7E.c_N0A">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:c_Y7E.c_BBF">
            <summary>
            Do not cache any sessions.
            </summary>
            <remarks>Mostly useful for debugging purposes.</remarks>
        </member>
        <member name="F:c_Y7E.c_RFF">
            <summary>
            Do not shutdown and close the underlying socket after sending
            or receiving fatal alert or close notify.
            </summary>
            <remarks>Protocols like FTP use this feature.</remarks>
        </member>
        <member name="F:c_Y7E.c_ABF">
            <summary>
            Do not send empty record after sucessful handshake with CBC ciphers.
            </summary>
            <remarks>For compatibility with broken implementations.</remarks>
        </member>
        <member name="F:c_Y7E.c_YAF">
            <summary>
            Ignore the client version in premaster secret. This only affects server sockets.
            </summary>
            <remarks>For compatibility with broken client implementations.</remarks>
        </member>
        <member name="F:c_Y7E.c_A8E">
            <summary>
            Forces the <see cref="!:TlsSocket.Unprotect"/> method to do immediate unprotect without exchange
            of CloseNotify alert messages. This is in violation of the RFC, but some broken servers need it,
            unfortunately.
            </summary>
        </member>
        <member name="F:c_Y7E.c_VK">
            <summary>
            This option is currently unused.
            </summary>
        </member>
        <member name="F:c_Y7E.c_Z7E">
            <summary>
            Causes an exception not to be thrown when a socket is closed by the server during negotiation.
            Instead, the negotiation will appear as successful, followed by an immediate socket closure.
            </summary>
            <remarks>
            This is needed by Serv-U FTP server that behaves like this when downloading an empty file
            or directory listing. Even though this behavior is almost certainly bad and could pose
            a potential security threat, we have to enable this option for this server to be able to work
            with it.
            </remarks>
        </member>
        <member name="F:c_Y7E.c_B8E">
            <summary>
            Forces the <see cref="!:TlsSocket.Close"/> method to do immediate close without exchange
            of CloseNotify alert messages. This is in violation of the RFC, but some broken servers (IIS with TLS 1.1)
            need it, unfortunately.
            </summary>
        </member>
    </members>
</doc>
