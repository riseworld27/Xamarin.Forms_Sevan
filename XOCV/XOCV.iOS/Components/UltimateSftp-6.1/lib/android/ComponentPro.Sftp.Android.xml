<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Sftp.Android</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Net.Scp">
            <summary>
            Provides methods for communication using SCP.
            </summary>
            <remarks>All members of this class are thread-safe.</remarks>
        </member>
        <member name="F:ComponentPro.Net.Scp.DefaultPort">
            <summary>
            Default SCP port (22).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Scp.Download(System.String,System.String)">
            <summary>
            Downloads files, directories, and subdirectories in the specified path to the specified local directory. If the local directory does not exist, it will be created.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory.</param>
            <param name="destinationDirectoryPath">The path of the local directory.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>        
        </member>
        <member name="M:ComponentPro.Net.Scp.ListDirectory">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListDirectoryAsync">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListDirectory(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DeleteFiles(System.String,System.Boolean)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DeleteFilesAsync(System.String,System.Boolean)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetDirectorySize(System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetDirectorySizeAsync(System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.MoveFiles(System.String,System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.MoveFilesAsync(System.String,System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Search(System.String,ComponentPro.IO.RecursionMode,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.SearchAsync(System.String,ComponentPro.IO.RecursionMode,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListName">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListNameAsync">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ListName(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.SetCurrentDirectory(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DeleteDirectory(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DeleteDirectoryAsync(System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DirectoryExists(System.String)">
            <summary>
            SCP does not support this feature, always return false.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Rename(System.String,System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.RenameAsync">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DeleteFile(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DeleteFileAsync(System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.FileExists(System.String)">
            <summary>
            SCP does not support this feature, always return false.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.FileExistsAsync(System.String)">
            <summary>
            SCP does not support this feature, always return false.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileInfo(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileInfoAsync">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.SetLastWriteTimeAsync">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileLength(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileLengthAsync(System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetLastWriteTime(System.String)">
            <summary>
            SCP does not support this feature, always throw <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/>.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetLastWriteTimeAsync">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.c_HH">
            <summary>
            Returns a copy of the current file system.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Scp.#ctor">
            <summary>
            Initializes a new instance of the Scp class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Scp.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.c_SXM(c_CHA)">
            <summary>
            Sets the socket factory to be used to create communication sockets.
            </summary>
            <param name="factory">Socket factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.Object)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Object)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Sftp"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.Connect(System.String)">
            <summary>
            Connects to the SFTP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <example source="ConnectAndLogin"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty or not a valid host name.</exception>
            <exception cref="T:System.InvalidOperationException">The client is connecting or already connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while connecting to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.Connect(System.String,System.Int32)">
            <summary>
            Connects to the SFTP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 22).</param>
            <example source="ConnectAndLogin"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty or not a valid host name.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="serverPort"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">The client is connecting or already connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while connecting to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.Disconnect">
            <summary>
            Disconnects from the SSH server.
            </summary>
            <example source="ConnectAndLogin"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>
            <remarks>
            This is useful with some firewalls or routers that drop inactive connection.
            </remarks>
            <example source="KeepAlive"/>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while sending a packet to the server to keep the connection alive.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while changing the password.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="password"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="ConnectAndLogin"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="Authenticate_KeyboardInteractive"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="Authenticate_KeyboardInteractive"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="ConnectAndLoginWithPKey"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="ConnectAndLoginWithPKey"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Scp"/> object to an underlying SSH session. This makes it possible to run multiple SCP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Scp"/> object to an underlying SSH session. This makes it possible to run multiple SCP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnChangePasswordCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.SecureShellChangePasswordResult})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.ChangePasswordCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.ChangePasswordAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.SecureShellChangePasswordResult},System.Object)">
            <summary>
            Asynchronous changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.ChangePasswordAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronous changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.ChangePasswordAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronous changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.AuthenticateAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.ConnectAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ConnectAsync(System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ConnectAsync(System.String)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.ConnectAsync(System.String,System.Int32)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnDisconnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DisconnectAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DisconnectAsync">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnReuseConnectionCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.ReuseConnectionCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnectionAsync(ComponentPro.Net.SecureShellConnection,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnectionAsync(ComponentPro.Net.SecureShellConnection,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnectionAsync(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnectionAsync(ComponentPro.Net.ISecureShellClient,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnectionAsync(ComponentPro.Net.ISecureShellClient,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.ReuseConnectionAsync(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnBanner(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.Banner" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.HostKeyVerifying" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.PasswordChangeRequest" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.CommandResponse" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnStateChanged(System.Object,ComponentPro.IO.RemoteFileSystemStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.StateChanged" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFile(System.IO.Stream,System.String)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file on the server.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="UploadFile_FromStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.ScpException">An error occurred while uploading the content in the stream to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFile(System.String,System.String)">
            <summary>
            Uploads a file to the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="UploadFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.ScpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFile(System.String,System.String)">
            <summary>
            Download a file from an the server, overriding it if it already exists.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">Path for the local file to create. Existing file will be overriden.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="DownloadFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.ScpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has cancelled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCancelled</see>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFile(System.String,System.IO.Stream)">
            <summary>
            Downloads a file on the the server and writes to the destination Stream.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="DownloadFile_ToStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.ScpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has cancelled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCancelled</see>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnUploadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.UploadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFileAsync(System.IO.Stream,System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFileAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnDownloadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.DownloadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFileAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="Scp\DownloadFile_ToStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFileAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="Scp\DownloadFile_ToStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFileAsync(System.String,System.IO.Stream)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="Scp\DownloadFile_ToStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadFileAsync(System.String,System.String)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnKeepAliveCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.KeepAliveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.KeepAliveAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.KeepAliveAsync">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles, UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files in the specified list to the specified remote directory using multiple threads.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. This cannot be null or empty. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Uploads all files and subdirectories from the specified local directory to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system.
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String,System.String)">
            <summary>
            Uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFiles(System.String,System.String)">
            <summary>
            Uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.String)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnUploadFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.UploadFilesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnUploadCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.UploadCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnDownloadCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.DownloadCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.UploadFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files, directories, and subdirectories in the specified path to the specified local directory. If the local directory does not exist, it will be created.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory.</param>
            <param name="localDirectoryPath">The path of the local directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously downloads files, directories, and subdirectories in the specified path to the specified local directory. If the local directory does not exist, it will be created.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory.</param>
            <param name="localDirectoryPath">The path of the local directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.DownloadAsync(System.String,System.String)">
            <summary>
            Asynchronously downloads files, directories, and subdirectories in the specified path to the specified local directory. If the local directory does not exist, it will be created.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory.</param>
            <param name="localDirectoryPath">The path of the local directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnTransferConfirm(System.Object,ComponentPro.IO.TransferConfirmEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.TransferConfirmEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnReconnectionErrorChecking(System.Object,ComponentPro.Net.ReconnectionErrorCheckingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.ReconnectionErrorChecking"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectionErrorCheckingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnReconnecting(System.Object,ComponentPro.Net.ReconnectingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.Reconnecting"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.OnReconnected(System.Object,ComponentPro.Net.ReconnectedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Scp.Reconnected"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Scp.IsFatalError(System.Exception)">
            <summary>
            Returns a boolean value indicating whether the specified error indicates that the client should reconnect to the server.
            </summary>
            <param name="ex">The error to check.</param>
            <returns><c>true</c> to indicates that the client should reconnect to the server; otherwise <c>false</c>.</returns>
            <remarks>
            This method will fire the <see cref="E:ComponentPro.Net.Scp.ReconnectionErrorChecking"/> event to let you manually check if the component needs to reconnect when it encounters specific errors.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Scp.ListDirectoryCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.ListNameCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.DeleteDirectoryCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.RenameCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.DeleteFileCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.GetFileInfoCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.SetLastWriteTimeCompleted">
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Net.Scp.GetLastWriteTimeCompleted">
            <excludeall/>
        </member>
        <member name="P:ComponentPro.Net.Scp.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>        
        </member>
        <member name="P:ComponentPro.Net.Scp.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.InvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file or directory names.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.c_LG">
            <summary>
            Returns a field indicating whether the system support getting stream for writting data to file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.c_OG">
            <summary>
            Returns a field indicating whether the system support getting stream for reading data from file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.FileSystemFeatures">
            <summary>
            Gets supported features.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.Net.Scp.c_VE">
            <summary>
            For internal uses only. It always returns false.
            </summary>
            <excludeall/>
        </member>
        <member name="P:ComponentPro.Net.Scp.c_AJ">
            <summary>
            For internal uses only. It always returns false.
            </summary>
            <excludeall/>
        </member>
        <member name="P:ComponentPro.Net.Scp.Proxy">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote SCP server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote SCP server.</value>
        </member>
        <member name="P:ComponentPro.Net.Scp.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> that is used to encode commands sent to the server, and decode replies from the server.
            </summary>
            <value>An <see cref="T:System.Text.Encoding">Encoding</see> value representing the encoding format. 
            By default, <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Scp.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an SCP operation (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            Specify -1 or 0 to indicate that the request does not time out.
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000. 
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Scp.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Scp"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Scp.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> that the component is using for communications.</value>
            <remarks>
            The <see cref="P:ComponentPro.Net.Scp.LocalEndPoint"/> property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your Socket is bound. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> property to retrieve the local <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> property to retrieve the local port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Scp.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.</value>
            <remarks>
            If you are using a connection-oriented protocol, the <see cref="P:ComponentPro.Net.Scp.RemoteEndPoint"/> property gets the <see cref="T:System.Net.EndPoint"/> that contains the remote 
            IP address and port number to which the Socket is connected. If you are using a connectionless protocol, 
            RemoteEndPoint contains the default remote IP address and port number with which the Socket will communicate. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> property to retrieve the remote <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> property to retrieve the remote port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Scp.Config">
            <summary>
            Gets or sets SCP security settings.
            </summary>
            <value>SCP security settings.</value>
        </member>
        <member name="E:ComponentPro.Net.Scp.GetFileChecksumCompleted">
            <excludeall/>
        </member>
        <member name="P:ComponentPro.Net.Scp.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.HostKey">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.Scp.Connection">
            <summary>
            Gets the SSH session used by this SFTP session.
            </summary>
            <value>SSH session.</value>
        </member>
        <member name="P:ComponentPro.Net.Scp.c_CA">
            <exclude/>
        </member>
        <member name="E:ComponentPro.Net.Scp.ChangePasswordCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ChangePasswordAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Scp.AuthenticateCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AuthenticateAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DisconnectAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.ReuseConnectionCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ReuseConnectionAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Scp.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
            <example source="GeneralEvents\Banner"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
            <example source="GeneralEvents\HostKeyVerifying"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Scp.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
            <example source="GeneralEvents\PasswordChangeRequest"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.CommandResponse">
            <summary>
            Occurs when a command has been sent to or a response has been received from the server.
            </summary>
            <example source="GeneralEvents\CommandSentResponseRead"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Sftp" /> object is changed.
            </summary>
            <example source="GeneralEvents\StateChanged"/>
        </member>
        <member name="P:ComponentPro.Net.Scp.CompressionEnabled">
            <summary>
            Gets or sets a value indicating whether transfer compression is to be used if supported by the server.
            </summary>
            <value><c>true</c> to use compression; <c>false</c> to not use compression (default).</value>
        </member>
        <member name="E:ComponentPro.Net.Scp.UploadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async, UploadFile_FromStream_Async, UploadFile_FromStreamOffset_Async, UploadFileOffset_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.DownloadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async,DownloadFile_ToStream_Async,DownloadFile_ToStreamOffset_Async,DownloadFileOffset_Async"/>        
        </member>
        <member name="E:ComponentPro.Net.Scp.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:KeepAliveAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="P:ComponentPro.Net.Scp.IsBusy">
            <summary>
            Gets a boolean value indicating whether there are any operations in progress.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection is established.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user is authenticated.
            </summary>
            <value><c>true</c> if authenticated; <c>false</c> otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Scp.ServerPort">
            <summary>
            Gets the server port of the connected session, or 0 if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.UserName">
            <summary>
            Gets the user of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.ServerName">
            <summary>
            Gets the host name of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.ReconnectionMaxRetries">
            <summary>
            Gets or sets the maximum number of retries for reconnection.
            </summary>
            <remarks>
            By default this value is 0 (the library does not try to reconnect to the server when the connection is lost). 
            When the connection is lost, the component will try to reconnect to the server. If the number of retries exceed this value, the class will report the connection error.
            </remarks>        
        </member>
        <member name="P:ComponentPro.Net.Scp.ReconnectionFailureDelay">
            <summary>
            Gets or sets the delay in milliseconds between failed login attempts for reconnection.
            </summary>
            <remarks>
            By default this value is 5000 (5 secs). When the connection is lost, the component will try to reconnect to the server. If the number of retries exceed the <see cref="P:ComponentPro.Net.Scp.ReconnectionMaxRetries"/>, the class will report the connection error.
            </remarks>        
        </member>
        <member name="P:ComponentPro.Net.Scp.ComponentPro#IO#IRemoteFileSystem#PathNormalization">
            <summary>
            Gets or sets a boolean value indicating whether to normalize path before any file or directory operation. Default value is <c>true</c>.
            </summary>        
            <remarks>
            Set this to <c>false</c> if an operation fails due to the invalid normalized path.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Scp.UploadFilesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadFilesAsync"/> operation completes.
            </summary>
            <example source="Scp/UploadFiles_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.UploadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadAsync"/> operation completes.
            </summary>
            <example source="Scp/Upload_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.DownloadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadAsync"/> operation completes.
            </summary>
            <example source="Download_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Scp.ReconnectionErrorChecking">
            <summary>
            Occurs when the file system has encountered an error and need to determine whether the it should reconnect to the server.
            </summary>
            <remarks>
            This event is fired when the file system has encountered an error and need to determine whether the it should reconnect to the server or the <see cref="M:ComponentPro.Net.Scp.IsFatalError(System.Exception)"/> method is called.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Scp.Reconnecting">
            <summary>
            Occurs when the file system has encountered an error and trying to reconnect to the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Scp.Reconnected">
            <summary>
            Occurs when the file system encountered an error and reconnected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Scp.EncounteredFatalError">
            <summary>
            Gets a boolean value indicating whether the client object has encountered a fatal error.
            </summary>
            <value><c>true</c> if the client has tried and failed to reconnect to the server with the number of retries specified in <see cref="P:ComponentPro.Net.Scp.ReconnectionMaxRetries"/>; otherwise <c>false</c>.</value>
        </member>
        <member name="T:ComponentPro.Net.ScpExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.ScpException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an SCP protocol error 'File not found' would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.ScpException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.ServerProtocolViolation">
            <summary>
            The server response was not a valid SFTP response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpExceptionStatus.OperationFailure">
            <summary> 
            The requested operation could not be completed. 
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ScpException">
            <summary>
            The exception that is thrown when an error occurs while using Scp component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ScpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ScpException"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.ScpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ScpException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.ScpException.#ctor(System.String,ComponentPro.Net.ScpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ScpException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ScpExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.ScpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ScpException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ScpException.#ctor(System.String,System.Exception,ComponentPro.Net.ScpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ScpException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ScpExceptionStatus"/> values.</param>
        </member>
        <member name="P:ComponentPro.Net.ScpException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.ScpExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.ScpException.Transferred">
            <summary>
            Gets the amount od data transferred before the exception occurred.
            </summary>
            <value>The amount od data transferred before the exception occurred.</value>
        </member>
        <member name="T:ComponentPro.Net.ScpFileInfo">
            <summary>
            Represents the SCP file info.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ScpFileInfo.#ctor(ComponentPro.IO.FileSystem,System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Initializes a  new instance of the ScpFileInfo class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="path">The file path.</param>
            <param name="attrs">The attributes.</param>
            <param name="size">The file size.</param>
            <param name="lastWriteTime">The last modification time.</param>
        </member>
        <member name="M:ComponentPro.Net.ScpFileInfo.ToString">
            <summary>
            Returns the file name.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ScpFileInfo.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. Intended for advanced usage only.
            </summary>
            <param name="newFullName">The new full name.</param>
        </member>
        <member name="M:ComponentPro.Net.ScpFileInfo.IsSameAs(ComponentPro.IO.AbstractFileInfo)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="info">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.ScpFileInfo.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode. Not supported.
            </summary>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.Net.ScpFileInfo.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode. Not supported.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise new content will be appended to the end of the file.</param>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.Name">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.SymlinkPath">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.FullName">
            <summary>
            Gets the fully qualified name of the file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:ComponentPro.Net.ScpFileInfo"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.Net.ScpFileInfo"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.IsFile">
            <summary>
            Gets a boolean value indicating whether this is a regular file.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.IsDirectory">
            <summary>
            Gets a boolean value indicating whether this is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.IsSymlink">
            <summary>
            Gets a boolean value indicating whether this is a symlink.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ScpFileInfo.FileSystem">
            <summary>
            Gets the file system that the file belongs to.
            </summary>
        </member>
        <member name="F:c_SVM.c_UVM">
            <summary>Connection is working in Sink mode.</summary>
        </member>
        <member name="F:c_SVM.c_OP">
            <summary>Connection is working in Source mode.</summary>
        </member>
        <member name="T:ComponentPro.Net.ScpTransferState">
            <summary>
            State of the SCP transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpTransferState.None">
            <summary>
            No transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ScpTransferState.Uploading">
            <summary>Uploading data.</summary>
        </member>
        <member name="F:ComponentPro.Net.ScpTransferState.Downloading">
            <summary>Downloading data.</summary>
        </member>
        <member name="F:c_YVM.c_ZVM">
            <summary>
            Set success flag.
            </summary>
        </member>
        <member name="F:c_YVM.c_TXM">
            <summary>
            Set warning flag.
            </summary>
        </member>
        <member name="F:c_YVM.c_UXM">
            <summary>
            Set fatal error flag. It will end the connection.
            </summary>
        </member>
        <member name="F:c_YVM.c_N7">
            <summary>
            Create file.
            </summary>
        </member>
        <member name="F:c_YVM.c_EJ">
            <summary>
            Create Directory.
            </summary>
        </member>
        <member name="F:c_YVM.c_BWM">
            <summary>
            Close a nested directory tree.
            </summary>
        </member>
        <member name="F:c_YVM.c_G2K">
            <summary>
            Set time.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Sftp">
            <summary>
            Provides essential methods for securely transferring files and directories to SFTP servers.
            </summary>
            <remarks>All members of this class are thread-safe.</remarks>
            <example source="UploadFiles"/>
        </member>
        <member name="F:ComponentPro.Net.Sftp.DefaultPort">
            <summary>
            Default SFTP port (22).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnGetStreamCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.IO.Stream})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.GetStreamCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStreamAsync(System.String,System.IO.FileMode,System.IO.FileAccess,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Asynchronously returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <param name="access">Which operations can be performed on the opened stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStreamAsync(System.String,System.IO.FileMode,System.IO.FileAccess,System.Object)">
            <summary>
            Asynchronously returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <param name="access">Which operations can be performed on the opened stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStreamAsync(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Asynchronously returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <param name="access">Which operations can be performed on the opened stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStreamAsync(System.String,System.IO.FileMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Asynchronously returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStreamAsync(System.String,System.IO.FileMode,System.Object)">
            <summary>
            Asynchronously returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStreamAsync(System.String,System.IO.FileMode)">
            <summary>
            Asynchronously returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnSetFileAttributesCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.SetFileAttributesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetFileAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.SetFileAttributes(System.String,ComponentPro.Net.SftpFileAttributes)"/> operation.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <param name="attributes">Attributes to set.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/SetFileAttr_TaskAsync, SetFileAttr_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetFileAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.SetFileAttributes(System.String,ComponentPro.Net.SftpFileAttributes)"/> operation.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <param name="attributes">Attributes to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/SetFileAttr_TaskAsync, SetFileAttr_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetFileAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.SetFileAttributes(System.String,ComponentPro.Net.SftpFileAttributes)"/> operation.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <param name="attributes">Attributes to set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/SetFileAttr_TaskAsync, SetFileAttr_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnGetSymlinkPathCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.GetSymlinkPathCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetSymlinkPathAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.GetSymlinkPath(System.String)"/> operation.
            Resolves the symlink and returns the real path.
            </summary>
            <param name="remotePath">The symlink path.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetSymlinkPath_TaskAsync, GetSymlinkPath_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetSymlinkPathAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.GetSymlinkPath(System.String)"/> operation.
            Resolves the symlink and returns the real path.
            </summary>
            <param name="remotePath">The symlink path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetSymlinkPath_TaskAsync, GetSymlinkPath_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetSymlinkPathAsync(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.GetSymlinkPath(System.String)"/> operation.
            Resolves the symlink and returns the real path.
            </summary>
            <param name="remotePath">The symlink path.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetSymlinkPath_TaskAsync, GetSymlinkPath_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnListItemReceived(System.Object,ComponentPro.Net.SftpListItemReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.ListItemReceived" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.SftpListItemReceivedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.c_GC(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.c_TE(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.c_YC(ComponentPro.IO.AbstractFileInfo,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Sftp.c_ZC(ComponentPro.IO.AbstractFileInfo,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Sftp.c_HH">
            <summary>
            Returns a copy of the current file system.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Sftp.c_SXM(c_CHA)">
            <summary>
            Sets the socket factory to be used to create communication sockets.
            </summary>
            <param name="factory">Socket factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.#ctor">
            <summary>
            Initializes a new instance of the Sftp class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetAbsolutePath(System.String)">
            <summary>
            Returns the absolute path of the specified path.
            </summary>
            <param name="path">The relative path.</param>
            <example source="GetAbsolutePath"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Rename(System.String,System.String)">
            <summary>
            Renames a file or directory on the SFTP server.
            </summary>
            <param name="path">The filename of the file to rename. Some SFTP servers may be case-sensitive.</param>
            <param name="newPath">The new filename. Some SFTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            By default, the file will be renamed in the current working directory. 
            If you want to rename the file from another location, you could use the <see cref="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            </p>
            </remarks>
            <example source="Rename"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="newPath"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> or <paramref name="newPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while renaming file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DeleteFile(System.String)">
            <summary>
            Deletes the specified file on the remote SFTP server.
            </summary>
            <param name="path">The name of the file to delete. Some SFTP servers may be case-sensitive. It can either be an absolute pathname or relative to the current directory.</param>
            <remarks>
            <p>
            By default, the file will be deleted from the current working directory. 
            If you want to delete the file from another location, you could use the <see cref="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            </p>
            </remarks>
            <example source="DeleteFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while deleting the specified file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)">
            <summary>
            Changes the current working directory on the server.
            </summary>
            <param name="path">Path of the directory to change to.</param>
            <remarks>
            <p>
            Both relative and absolute paths can be provided to the <see cref="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)"/> method to change the SFTP server's current working folder.
            The SFTP server's current working folder is used by the SFTP server as the base folder from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. 
            </p>
            <p>
            The current working folder can be retrieved via the <see cref="M:ComponentPro.Net.Sftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="SetCurrentDirectory"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while changing the current working directory on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the SFTP server.
            </summary>
            <param name="path">The absolute or relative (to <see cref="M:ComponentPro.Net.Sftp.GetCurrentDirectory"/>) path of the directory to be created.</param>
            <returns>A string containing the absolute path of the newly created remote directory.</returns>
            <remarks>
            <p>
            If relative path is provided, the directory will be created in the current working directory. 
            If you want to create the directory in another location, you could specify the absolute path or use the <see cref="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Sftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="MakeDir"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while create the directory on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty remote directory with the specified pathname. To delete a directory containing files and subdirectories, use the <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)">DeleteDirectory</see> method.
            </summary>
            <param name="path">Remote directory pathname.</param>
            <remarks>An <see cref="T:ComponentPro.Net.SftpException"/> will be thrown when the directory to be deleted is not empty. You may want to use the <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)">DeleteDirectory</see> method to delete the entire directory.</remarks>
            <exception cref="T:ComponentPro.Net.SftpException">Thrown when the specified directory is not found or not empty.</exception>
            <example source="DeleteDirectory"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">The specified directory not found, not empty or an error occurred while deleting the specified directory on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetSymlinkPath(System.String)">
            <summary>
            Resolves the symlink and returns the real path.
            </summary>
            <param name="remotePath">The symlink path.</param>
            <returns>Real path.</returns>
            <example source="GetSymlinkPath"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while resolving the specified path.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetFileAttributes(System.String,ComponentPro.Net.SftpFileAttributes)">
            <summary>
            Sets the attributes of the remote file.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <param name="attributes">Attributes to set.</param>
            <example source="SetFileAttr"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while setting file attributes.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the modification date and time of the specified remote file.
            </summary>
            <param name="path">Path to the file on the server.</param>
            <param name="newDateTime">The date and time to set.</param>
            <example source="SetLastWriteTime"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while setting last modification time.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStream(System.String)">
            <summary>
            Returns a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>A Stream for writing data to the remote file</returns>
            <example source="GetUploadStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while getting upload stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStream(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Returns a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <returns>A Stream for writing data to the remote file</returns>
            <example source="GetUploadStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while getting upload stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStream(System.String)">
            <summary>
            Returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>A Stream for reading data from the remote file</returns>
            <example source="GetDownloadStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while getting download stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStream(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <returns>A Stream for reading data from the remote file</returns>
            <example source="GetDownloadStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while getting download stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStream(System.String,System.IO.FileMode)">
            <summary>
            Returns a Stream for reading and writing data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <returns>A Stream for reading and writing data from the remote file</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while opening the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="mode">How to open the remote file.</param>
            <param name="access">Which operations can be performed on the opened stream.</param>
            <returns>A Stream for reading data from the remote file</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while opening the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetCurrentDirectory">
            <summary>
            Retrieves the current working directory of the SFTP server.
            </summary>
            <returns>
            A string representing the SFTP server's current directory. The path returned is an absolute path that can be used with the <see cref="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)"/> to go directly to this directory regardless of the current working directory.
            </returns>
            <remarks>
            <p>
            The SFTP server's current working folder is used by the SFTP server as the base folder from which to perform file operations such as obtaining folder contents, receiving, sending and deleting files, changing the current folder, etc. 
            It can be changed using the <see cref="M:ComponentPro.Net.Sftp.SetCurrentDirectory(System.String)"/> method.
            </p>
            </remarks>
            <example source="GetCurrentDirectory"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListDirectory">
            <summary>
            Retrieves the list of files and directories in the current remote directory.
            </summary>
            <returns>Collection of <see cref="T:ComponentPro.Net.SftpFileInfo"/> values.</returns>
            <example source="ListDirectory"/>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            To search for files and directories recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Retrieves the list of files and directories that match the specified search condition in the current remote directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>Collection of <see cref="T:ComponentPro.Net.SftpFileInfo"/> values.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            To search for files and directories recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListDirectory(System.String)">
            <summary>
            Retrieves the list of files and directories in the specified remote directory.
            </summary>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET). File wildcards masks (such as *.txt) are accepted.</param>
            <returns>Collection of <see cref="T:ComponentPro.Net.SftpFileInfo"/> values.</returns>
            <example source="ListDirectory"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            To search for files and directories recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Retrieves the list of files and directories that match the specified search condition in the specified remote directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET). File wildcards masks (such as *.txt) are accepted.</param>
            <returns>Collection of <see cref="T:ComponentPro.Net.SftpFileInfo"/> values.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            To search for files and directories recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Retrieves the list of files and directories that match the specified search condition in the specified remote directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET). File wildcards masks (such as *.txt) are accepted.</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include directories even they dont match the search conditions.</param>
            <returns>Collection of <see cref="T:ComponentPro.Net.SftpFileInfo"/> values.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            To search for files and directories recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawName">
            <summary>
            Gets the raw list of files and directories in the current remote directory on the SFTP server.
            </summary>
            <returns>An array of lines, with each line representing a single SFTP item.</returns>
            <example source="ListRawName"/>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawName(System.String)">
            <summary>
            Gets the raw list of files and directories in the current remote directory on the SFTP server.
            </summary>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET). File wildcards masks (such as *.txt) are accepted.</param>
            <returns>An array of lines, with each line representing a single SFTP item.</returns>
            <example source="ListRawName"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Gets the raw list of files and directories in the current remote directory on the SFTP server.
            </summary>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET). File wildcards masks (such as *.txt) are accepted.</param>
            <param name="searchCondition">The search conditions to match against the files, or null reference (Nothing in VB.NET) for searching all files.</param>
            <returns>An array of lines, with each line representing a single SFTP item.</returns>
            <example source="ListRawName"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListName">
            <summary>
            Gets the list of file and directory names in the current remote directory.
            </summary>
            <returns>An array of lines, with each line representing a single name.</returns>
            <example source="ListName"/>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListName(System.String)">
            <summary>
            Gets the list of file and directory names in the specified remote directory.
            </summary>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET) for current directory. File wildcards masks (such as *.txt) are accepted.</param>
            <returns>An array of lines, with each line representing a single name.</returns>
            <example source="ListName"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListName(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Gets the list of file and directory names in the specified remote directory.
            </summary>
            <param name="path">Absolute or relative path to the remote directory to list, or null reference (Nothing in VB.NET). File wildcards masks (such as *.txt) are accepted.</param>
            <param name="searchCondition">The search conditions to match against the files, or null reference (Nothing in VB.NET) for searching all files.</param>
            <returns>An array of lines, with each line representing a single name.</returns>
            <example source="ListName"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.FileExists(System.String)">
            <summary>
            Checks whether the specified file exists on the server.
            </summary>
            <param name="filePath">The path of the remote file to check.</param>
            <returns><b>true</b> if the file exists; otherwise, <b>false</b>.</returns>
            <example source="FileExists"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while checking the remote file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DirectoryExists(System.String)">
            <summary>
            Checks whether the specified directory exists on the server.
            </summary>
            <param name="directoryPath">The path of the remote directory to check.</param>
            <returns><b>true</b> if the directory exists; otherwise, <b>false</b>.</returns>
            <example source="DirectoryExists"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while checking the remote directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetServerTimeDifference">
            <summary>
            Returns the time difference between the client and SFTP server.
            </summary>
            <returns>The time difference between the client and SFTP server.</returns>
            <example source="GetTimeDiff"/>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading temporary files or server does not support this operation.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributes(System.String,ComponentPro.Net.SftpFileAttributes,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="SetMFilesAttr"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributes(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean)">
            <summary>
            Sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="SetMFilesAttr"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributes(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="buildTree">Indicates whether to build directory structure for progress report.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="SetMFilesAttr"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributes(System.String,System.Object[],ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="filesToSet">The list of filesname or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> object containing information of the files or directories to set attributes.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="buildTree">Indicates whether to build directory structure for progress report.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="SetMFilesAttr"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnSetMultipleFilesAttributesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.SetMultipleFilesAttributesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,System.Object[],ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="buildTree">Indicates whether to build directory structure for the progress report.</param>
            <param name="filesToSet">List of filenames or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> object containing information of the files or directories to set attributes.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,System.Object[],ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="buildTree">Indicates whether to build directory structure for the progress report.</param>
            <param name="filesToSet">List of filenames or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> object containing information of the files or directories to set attributes.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,System.Object[],ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="buildTree">Indicates whether to build directory structure for the progress report.</param>
            <param name="filesToSet">List of filenames or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> object containing information of the files or directories to set attributes.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Initiates an asynchronous operation to set the attributes of the specified remote files or directories.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="SetMFilesAttr_Async"/>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the attributes of the specified remote files or directories.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="SetMFilesAttr_Async"/>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition)">
            <summary>
            Initiates an asynchronous operation to set the attributes of the specified remote files or directories.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <example source="SetMFilesAttr_Async"/>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean,System.Object)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="buildTree">Indicates whether to build directory structure for the progress report.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="buildTree">Indicates whether to build directory structure for the progress report.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.SetMultipleFilesAttributesAsync(System.String,ComponentPro.Net.SftpFileAttributes,System.Boolean,ComponentPro.IO.RecursionMode,ComponentPro.IO.SearchCondition)">
            <summary>
            Asynchronously sets the attributes of the specified remote files.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="buildTree">Indicates whether to build directory structure for the progress report.</param>
            <param name="recursive">Indicates whether to set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.Object)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Object)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Sftp"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Connect(System.String)">
            <summary>
            Connects to the SFTP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <example source="ConnectAndLogin"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty or not a valid host name.</exception>
            <exception cref="T:System.InvalidOperationException">The client is connecting or already connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while connecting to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Connect(System.String,System.Int32)">
            <summary>
            Connects to the SFTP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 22).</param>
            <example source="ConnectAndLogin"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty or not a valid host name.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="serverPort"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">The client is connecting or already connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while connecting to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Disconnect">
            <summary>
            Disconnects from the SSH server.
            </summary>
            <example source="ConnectAndLogin"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>
            <remarks>
            This is useful with some firewalls or routers that drop inactive connection.
            </remarks>
            <example source="KeepAlive"/>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while sending a packet to the server to keep the connection alive.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while changing the password.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="password"/> is null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="ConnectAndLogin"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="Authenticate_KeyboardInteractive"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="Authenticate_KeyboardInteractive"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="ConnectAndLoginWithPKey"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occured while authenticating the user.</exception>
            <example source="ConnectAndLoginWithPKey"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnChangePasswordCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.SecureShellChangePasswordResult})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.ChangePasswordCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ChangePasswordAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.SecureShellChangePasswordResult},System.Object)">
            <summary>
            Asynchronous changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ChangePasswordAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronous changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ChangePasswordAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronous changes the specified user's password on the SFTP server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Asynchronously authenticates the user to the SFTP server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Asynchronously authenticates the user to the SFTP server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLoginWithPKey_TaskAsync,ConnectAndLoginWithPKey_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.AuthenticateAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ConnectAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ConnectAsync(System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ConnectAsync(System.String)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ConnectAsync(System.String,System.Int32)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnDisconnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DisconnectAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DisconnectAsync">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnReuseConnectionCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.ReuseConnectionCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnectionAsync(ComponentPro.Net.SecureShellConnection,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnectionAsync(ComponentPro.Net.SecureShellConnection,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnectionAsync(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnectionAsync(ComponentPro.Net.ISecureShellClient,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnectionAsync(ComponentPro.Net.ISecureShellClient,System.Object)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ReuseConnectionAsync(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Asynchronously binds the <see cref="T:ComponentPro.Net.Sftp"/> object to an underlying SSH session. This makes it possible to run multiple SFTP
            sessions over a single SSH session. This can be used instead of <see cref="O:Connect"/>/<see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnBanner(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.Banner" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.HostKeyVerifying" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.PasswordChangeRequest" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.CommandResponse" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnStateChanged(System.Object,ComponentPro.IO.RemoteFileSystemStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.StateChanged" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ResumeUploadFile(System.IO.Stream,System.String)">
            <summary>
            Resumes uploading the content of the data stream to previously interrupted remote file.
            </summary>
            <returns>The number of bytes transferred.</returns>
            <example source="ResumeUploadFile_FromStream"/>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceStream"/> or <paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ResumeUploadFile(System.String,System.String)">
            <summary>
            Resumes uploading the content of the local file to previously interrupted remote file.
            </summary>
            <returns>The number of bytes transferred, -1 if remote file size is greater than the local file size, or 0 if no need to resume upload because remote file size is equal to local file size.</returns>
            <example source="ResumeUploadFile"/>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ResumeDownloadFile(System.String,System.String)">
            <summary>
            Resumes download the content of the remote file to previously interrupted local file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The number of bytes transferred, -1 if local file size is greater than the remote file size, or 0 if no need to resume download because remote file size is equal to local file size.</returns>
            <example source="ResumeDownloadFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while downloading file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ResumeDownloadFile(System.String,System.String,System.Int64@)">
            <summary>
            Resumes download the content of the remote file to previously interrupted local file.
            </summary>
            <returns>The number of bytes transferred, -1 if local file size is greater than the remote file size, or 0 if no need to resume download because remote file size is equal to local file size.</returns>
            <example source="ResumeDownloadFile"/>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="remoteSize">Returns remote file size.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while downloading file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFile(System.IO.Stream,System.String)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file on the server.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="UploadFile_FromStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading the content in the stream to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFile(System.String,System.String)">
            <summary>
            Uploads a file to the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="UploadFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file at the specified offset.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <example source="UploadFile_FromStreamOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file at the specified offset.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <example source="UploadFile_FromStreamOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Uploads the specified part of the local file to the specified offset of the file on the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <example source="UploadFileOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/>, <paramref name="localOffset"/>, or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads the specified part of the local file to the specified offset of the file on the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <example source="UploadFileOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="localOffset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFile(System.String,System.String)">
            <summary>
            Download a file from an the server, overriding it if it already exists.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">Path for the local file to create. Existing file will be overriden.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="DownloadFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has cancelled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCancelled</see>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Downloads the specified part of the remote file to the specified offset of the local file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <example source="DownloadFileOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemOperationCancelledException">User has cancelled the operation.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Downloads the specified part of the remote file to the specified offset of the local file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <example source="DownloadFileOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemOperationCancelledException">User has cancelled the operation.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFile(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Downloads at the specified offset and writes to the destination Stream. 
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <example source="DownloadFile_ToStreamOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> is less than zero.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has cancelled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCancelled</see>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFile(System.String,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads at the specified offset and writes to the destination Stream. 
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <example source="DownloadFile_ToStreamOffset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has cancelled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCancelled</see>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFile(System.String,System.IO.Stream)">
            <summary>
            Downloads a file on the the server and writes to the destination Stream.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="DownloadFile_ToStream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.SftpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has cancelled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCancelled</see>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnUploadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.UploadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFile_FromStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="UploadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnDownloadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.DownloadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Sftp.GetCurrentDirectory"/>.</remarks>
            <example source="DownloadFile_ToStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Sftp.GetCurrentDirectory"/>.</remarks>
            <example source="DownloadFile_ToStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Sftp.GetCurrentDirectory"/>.</remarks>
            <example source="DownloadFile_ToStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents FTP RETR command.</p>
            </remarks>
            <example source="DownloadFile_ToStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFile_ToStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFile_ToStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFileOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents FTP RETR command.</p>
            </remarks>
            <example source="DownloadFile_ToStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFile_ToStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="DownloadFile_ToStreamOffset_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnKeepAliveCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.KeepAliveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.KeepAliveAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.KeepAliveAsync">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnGetServerTimeDifferenceCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.TimeSpan})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.GetServerTimeDifferenceCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetServerTimeDifferenceAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.TimeSpan},System.Object)">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetTimeDiff_TaskAsync, GetTimeDiff_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetServerTimeDifferenceAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetTimeDiff_TaskAsync, GetTimeDiff_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetServerTimeDifferenceAsync">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetTimeDiff_TaskAsync, GetTimeDiff_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnGetDownloadStreamCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.IO.Stream})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.GetDownloadStreamCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStreamAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStreamAsync(System.String,System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetDownloadStreamAsync(System.String)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnGetUploadStreamCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.IO.Stream})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.GetUploadStreamCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStreamAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStreamAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.GetUploadStreamAsync(System.String)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnListRawNameCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String[]})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.ListRawNameCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> containg the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.ListRawName"/> operation.
            Retrieves the list of files and directories in the current directory using a raw text format.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.ListRawName"/> operation.
            Retrieves the list of files and directories in the current directory using a raw text format.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Sftp.ListRawName"/> operation.
            Retrieves the list of files and directories in the current directory using a raw text format.
            </summary>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.ListRawNameAsync(System.String)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system using multiple threads.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsDownloadFiles,DownloadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified local directory using multiple threads.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="localDirectoryPath">The path of the local directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsDownloadFiles,DownloadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads remote files or directories in the list to the specified local directory using multiple threads.
            </summary>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. This cannot be null or empty. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)</param>
            <param name="localDirectoryPath">The path of the local directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsDownloadFiles,DownloadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsDownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Downloads all files in the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsDownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles,DownloadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified destination local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles,DownloadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of of files or directories to download (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. This cannot be null or empty.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <example source="DownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String,System.String)">
            <summary>
            Downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
            <example source="DownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Downloads files in the specified remote directory that match the specified search condition to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <example source="DownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFiles(System.String,System.String)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <example source="DownloadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,System.String)">
            <summary>
            Downloads an entire remote directory or a file to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Download"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,System.String,System.Boolean)">
            <summary>
            Downloads an entire remote directory or a file to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Download"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads an entire remote directory or a file to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Download"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Downloads an entire remote directory or a file to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Download"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Downloads an entire remote directory or a file to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Download"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads an entire remote directory or a file to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Download"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory or a file to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory or a file to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory or a file to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Download(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory or a file to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles, UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files in the specified list to the specified remote directory using multiple threads.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. This cannot be null or empty. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Uploads all files and subdirectories from the specified local directory to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system.
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="MultiThreadsUploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles,UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadSelectedFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String,System.String)">
            <summary>
            Uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFiles(System.String,System.String)">
            <summary>
            Uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <example source="UploadFiles"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.String)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="Upload"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.Upload(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnUploadFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.UploadFilesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnUploadCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.UploadCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnDownloadFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.DownloadFilesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnDownloadCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.DownloadCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="localFileOrDirectoryPath">The path of the file or directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String)">
            <summary>
            Asynchronous uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously uploads an entire directory or a file from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localFileOrDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search condition to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.UploadFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or null to upload files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This cannot be null or empty.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This cannot be null or empty.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This cannot be null or empty.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified destination local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified destination local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified destination local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>)
            </param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search patterns to match against the files. (null for searching all files).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.Object)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This can be null.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This can be null.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadFilesAsync(System.String,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. If it's empty, the current directory path of the file system will be used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.AbstractFileInfo"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code>). This can be null.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Asynchronously downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.DownloadAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Asynchronously downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteFileOrDirectoryPath">The path of the remote file or directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\Download_TaskAsync,Download_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnTransferConfirm(System.Object,ComponentPro.IO.TransferConfirmEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.TransferConfirmEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnReconnectionErrorChecking(System.Object,ComponentPro.Net.ReconnectionErrorCheckingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.ReconnectionErrorChecking"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectionErrorCheckingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnReconnecting(System.Object,ComponentPro.Net.ReconnectingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.Reconnecting"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.OnReconnected(System.Object,ComponentPro.Net.ReconnectedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Sftp.Reconnected"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Sftp.IsFatalError(System.Exception)">
            <summary>
            Returns a boolean value indicating whether the specified error indicates that the client should reconnect to the server.
            </summary>
            <param name="ex">The error to check.</param>
            <returns><c>true</c> to indicates that the client should reconnect to the server; otherwise <c>false</c>.</returns>
            <remarks>
            This method will fire the <see cref="E:ComponentPro.Net.Sftp.ReconnectionErrorChecking"/> event to let you manually check if the component needs to reconnect when it encounters specific errors.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Sftp.GetStreamCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:GetStreamAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.SetFileAttributesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:SetFileAttributesAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/SetFileAttr_TaskAsync, SetFileAttr_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.GetSymlinkPathCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:GetSymlinkPathAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/GetSymlinkPath_TaskAsync, GetSymlinkPath_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.ListItemReceived">
            <summary>
            Occurs when a file and directory listing item is received by <see cref="O:ListDirectory" />, <see cref="O:ListName" /> or <see cref="O:ListRawName" /> methods.
            </summary>
            <example source="GeneralEvents\ListItemReceived"/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>        
        </member>
        <member name="P:ComponentPro.Net.Sftp.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.c_LG">
            <summary>
            Returns a field indicating whether the system support getting stream for writting data to file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.c_OG">
            <summary>
            Returns a field indicating whether the system support getting stream for reading data from file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.FileSystemFeatures">
            <summary>
            For internal uses only.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.c_VE">
            <summary>
            For internal uses only. It always returns false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.c_AJ">
            <summary>
            For internal uses only. It always returns false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.Proxy">
            <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.Sftp.Proxy"/> to use to access a remote server.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
            <remarks>
            Even though the RFC implies that UTF-8 is to be used to encode all communication, the practice is very different, unfortunately.
            In the real world, all SFTP servers seem to default to the OS default charset.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Sftp.TransferType">
            <summary>
            Gets or sets the data transfer mode.
            </summary>
            <remarks>
            It is highly recommended to set the <see cref="P:ComponentPro.Net.Sftp.ServerOs"/> property to the target OS first.
            </remarks>
            <value>The file transfer mode. Default is <see cref="T:ComponentPro.IO.FileTransferType">Binary</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.ServerOs">
            <summary>
            Gets or sets the server type.
            </summary>
            <value>The server type. Default is <see cref="T:ComponentPro.IO.RemoteServerOs">Unknown</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.Security">
            <summary>
            Gets or sets SFTP security settings.
            </summary>
            <value>SFTP security settings.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.MaxDownloadSpeed">
            <summary>
            Gets or sets the maximum allowed download speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed download speed.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.MaxUploadSpeed">
            <summary>
            Gets or sets the maximum allowed upload speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed upload speed.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an SFTP operation (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            Specify -1 or 0 to indicate that the request does not time out.
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000. A value of -1 or 0 indicates that the request does not timeout.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Sftp.ProtocolVersion">
            <summary>
            Gets the SFTP protocol version used by this session. This information is only available on fully initialized and authenticated sessions.
            </summary>
            <value>SFTP protocol version.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Sftp"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> that the component is using for communications.</value>
            <remarks>
            The <see cref="P:ComponentPro.Net.Sftp.LocalEndPoint"/> property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your Socket is bound. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> property to retrieve the local <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> property to retrieve the local port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Sftp.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.</value>
            <remarks>
            If you are using a connection-oriented protocol, the <see cref="P:ComponentPro.Net.Sftp.RemoteEndPoint"/> property gets the <see cref="T:System.Net.EndPoint"/> that contains the remote 
            IP address and port number to which the Socket is connected. If you are using a connectionless protocol, 
            RemoteEndPoint contains the default remote IP address and port number with which the Socket will communicate. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> property to retrieve the remote <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> property to retrieve the remote port number.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Sftp.SetMultipleFilesAttributesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:SetMultipleFilesAttributesAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\SetMFilesAttr_TaskAsync, SetMFilesAttr_Async"/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.CheckDirectoryPathOnCreation">
            <summary>Gets or sets a boolean value indicating whether to check directory path on creation. Default value is <c>false</c>.</summary>
            <remarks>
            If enabled the component checks if the parent folders of the directory to be created exist or not, if not they will be created.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Sftp.EnableSftp4">
            <summary>
            Gets or sets a boolean flag indicating whether to enable SFTP version 4 features.
            </summary>
            <remarks>
            This property should be set before connecting to the SFTP server.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Sftp.UploadBlocks">
            <summary>
            Gets or sets the number of concurrent upload blocks. Use this and the property <see cref="P:ComponentPro.Net.Sftp.UploadBlockSize"/> properly will speed up the upload.
            </summary>
            <value>The number of concurrent upload threads.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.UploadBlockSize">
            <summary>
            Gets or sets the upload buffer size. Use this and the property <see cref="P:ComponentPro.Net.Sftp.UploadBlocks"/> properly will speed up uploading files.
            </summary>
            <value>The upload buffer size.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.DownloadBlocks">
            <summary>
            Gets or sets the concurrent download blocks. Use this and the property <see cref="P:ComponentPro.Net.Sftp.DownloadBlockSize"/> properly will speed up downloading files.
            </summary>
            <value>The concurrent download threads.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.DownloadBlockSize">
            <summary>
            Gets or sets the download buffer size.
            </summary>
            <value>The download buffer size.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.WaitForServerWelcomeMessage">
            <summary>
            Gets or sets a boolean value indicating whether to wait for server SSH protocol welcome message before sending the client one.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.PasswordAuthenticationFirst">
            <summary>
            Gets or sets a boolean value indicating whether to try password authentication first when using both password and private key authentication method. 
            Default value is <c>false</c> - try the private key first.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.UseReadWriteModeForDownloads">
            <summary>
            Gets or sets a value indicating whether to open file for downloading in read-write mode instead of read-only mode. Default value is <c>false</c>.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.GetFileChecksumCompleted">
            <excludeall/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.HostKey">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.Connection">
            <summary>
            Gets the SSH session used by this SFTP session.
            </summary>
            <value>SSH session.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.c_CA">
            <exclude/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.ChangePasswordCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ChangePasswordAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.AuthenticateCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AuthenticateAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DisconnectAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAndLogin_TaskAsync,ConnectAndLogin_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.ReuseConnectionCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ReuseConnectionAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
            <example source="GeneralEvents\Banner"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
            <example source="GeneralEvents\HostKeyVerifying"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
            <example source="GeneralEvents\PasswordChangeRequest"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.CommandResponse">
            <summary>
            Occurs when a command has been sent to or a response has been received from the server.
            </summary>
            <example source="GeneralEvents\CommandSentResponseRead"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Sftp" /> object is changed.
            </summary>
            <example source="GeneralEvents\StateChanged"/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.CompressionEnabled">
            <summary>
            Gets or sets a value indicating whether transfer compression is to be used if supported by the server.
            </summary>
            <value><c>true</c> to use compression; <c>false</c> to not use compression (default).</value>
        </member>
        <member name="E:ComponentPro.Net.Sftp.UploadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\UploadFile_TaskAsync,UploadFile_Async, UploadFile_FromStream_Async, UploadFile_FromStreamOffset_Async, UploadFileOffset_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.DownloadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async,DownloadFile_ToStream_Async,DownloadFile_ToStreamOffset_Async,DownloadFileOffset_Async"/>        
        </member>
        <member name="E:ComponentPro.Net.Sftp.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:KeepAliveAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/KeepAlive_TaskAsync, KeepAlive_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.GetServerTimeDifferenceCompleted">
            <summary>
            Occurs when an asynchronous <see cref="M:ComponentPro.Net.Sftp.GetServerTimeDifference"/> operation completes.
            </summary>
            <example source="TaskAsync/GetTimeDiff_TaskAsync, GetTimeDiff_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.GetDownloadStreamCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:GetDownloadStreamAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/GetDownloadStream_TaskAsync, GetDownloadStream_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.GetUploadStreamCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:GetUploadStreamAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/GetUploadStream_TaskAsync, GetUploadStream_Async"/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.RestoreFileProperties">
            <summary>
            Gets or sets a boolean value indicating whether to restore file properties including <see cref="P:ComponentPro.Net.SftpFileInfo.LastWriteTime"/> 
            and <see cref="P:ComponentPro.Net.SftpFileInfo.CreationTime"/> after downloading or uploading if possible.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.IsBusy">
            <summary>
            Gets a boolean value indicating whether there are any operations in progress.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection is established.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user is authenticated.
            </summary>
            <value><c>true</c> if authenticated; <c>false</c> otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Sftp.ServerPort">
            <summary>
            Gets the server port of the connected session, or 0 if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.UserName">
            <summary>
            Gets the user of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.ServerName">
            <summary>
            Gets the host name of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.ListRawNameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ListRawNameAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/>
        </member>
        <member name="P:ComponentPro.Net.Sftp.AsciiFileSearchConditions">
            <summary>
            Gets or sets the list of ASCII search conditions. 
            </summary>
            <remarks>
            When this property is not null the component automatically uses ASCII transfer type for the files with names that match one of the <see cref="P:ComponentPro.Net.Sftp.AsciiFileSearchConditions">ASCII file search conditions</see> as ASCII files.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Sftp.ServerTimeZoneOffset">
            <summary>
            This value is used to synchronize the CreationTime and/or LastWriteTime of files after a transfer. Default value is TimeSpan.Zero.
            </summary>
            <remarks>
            When a file is copied from this file system to another one and the <see cref="P:ComponentPro.Net.Sftp.RestoreFileProperties"/> option is enabled, 
            the file's <see cref="P:ComponentPro.IO.AbstractFileInfo.CreationTime"/> and <see cref="P:ComponentPro.IO.AbstractFileInfo.LastWriteTime"/> will be added with this value. 
            Likewise, <see cref="P:ComponentPro.IO.AbstractFileInfo.CreationTime"/> and <see cref="P:ComponentPro.IO.AbstractFileInfo.LastWriteTime"/> of a file that is copied from another file system will be substracted with this value.
            </remarks>        
        </member>
        <member name="P:ComponentPro.Net.Sftp.ReconnectionMaxRetries">
            <summary>
            Gets or sets the maximum number of retries for reconnection.
            </summary>
            <remarks>
            By default this value is 0 (the library does not try to reconnect to the server when the connection is lost). 
            When the connection is lost, the component will try to reconnect to the server. If the number of retries exceed this value, the class will report the connection error.
            </remarks>        
        </member>
        <member name="P:ComponentPro.Net.Sftp.ReconnectionFailureDelay">
            <summary>
            Gets or sets the delay in milliseconds between failed login attempts for reconnection.
            </summary>
            <remarks>
            By default this value is 5000 (5 secs). When the connection is lost, the component will try to reconnect to the server. If the number of retries exceed the <see cref="P:ComponentPro.Net.Sftp.ReconnectionMaxRetries"/>, the class will report the connection error.
            </remarks>        
        </member>
        <member name="P:ComponentPro.Net.Sftp.PathNormalization">
            <summary>
            Gets or sets a boolean value indicating whether to normalize path before any file or directory operation. Default value is <c>true</c>.
            </summary>        
            <remarks>
            Set this to <c>false</c> if an operation fails due to the invalid normalized path.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Sftp.UploadFilesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadFilesAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.UploadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/Upload_TaskAsync, Upload_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.DownloadFilesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadFilesAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.DownloadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadAsync"/> operation completes.
            </summary>
            <example source="Download_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Sftp.ReconnectionErrorChecking">
            <summary>
            Occurs when the file system has encountered an error and need to determine whether the it should reconnect to the server.
            </summary>
            <remarks>
            This event is fired when the file system has encountered an error and need to determine whether the it should reconnect to the server or the <see cref="M:ComponentPro.Net.Sftp.IsFatalError(System.Exception)"/> method is called.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Sftp.Reconnecting">
            <summary>
            Occurs when the file system has encountered an error and trying to reconnect to the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Sftp.Reconnected">
            <summary>
            Occurs when the file system encountered an error and reconnected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Sftp.EncounteredFatalError">
            <summary>
            Gets a boolean value indicating whether the client object has encountered a fatal error.
            </summary>
            <value><c>true</c> if the client has tried and failed to reconnect to the server with the number of retries specified in <see cref="P:ComponentPro.Net.Sftp.ReconnectionMaxRetries"/>; otherwise <c>false</c>.</value>
        </member>
        <member name="T:ComponentPro.Net.SftpListItemReceivedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Sftp.ListItemReceived"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.SftpListItemReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.SftpListItemReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Sftp.ListItemReceived"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpListItemReceivedEventArgs.RawLine">
            <summary>
            Gets the raw line of the received item.
            </summary>
            <value>The raw line of the received item.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpListItemReceivedEventArgs.File">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.SftpFileInfo"/>. Setting this property to a null reference will remove it from the list.
            </summary>
            <value>An <see cref="T:ComponentPro.Net.SftpFileInfo"/> instance that represents an SFTP file, or <b>null</b> if not available.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpListItemReceivedEventArgs.Cancel">
            <summary>
            Cancels the process of listing a directory. You also need to set the property <see cref="P:ComponentPro.Net.SftpListItemReceivedEventArgs.Skip"/> to true if you do not want to have this last received item in your list.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpListItemReceivedEventArgs.Skip">
            <summary>
            Skips the current item, it will not appear in the list.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SftpExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.SftpException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an SFTP protocol error 'File not found' would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.SftpException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid SFTP response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.OperationFailed">
            <summary> 
            The requested operation could not be completed. 
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpExceptionStatus.Unsupported">
            <summary>
            The operation is not supported.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SftpException">
            <summary>
            The exception that is thrown when an error occurs while using Sftp component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SftpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpException"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.SftpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.SftpException.#ctor(System.String,ComponentPro.Net.SftpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.SftpExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.SftpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.SftpException.#ctor(System.String,System.Exception,ComponentPro.Net.SftpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.SftpExceptionStatus"/> values.</param>
        </member>
        <member name="P:ComponentPro.Net.SftpException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.SftpExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpException.Code">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.SftpErrorCode"/> of the exception.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.SftpException.Code"/> is only meaningful if <see cref="P:ComponentPro.Net.SftpException.Status"/> is <see cref="T:ComponentPro.Net.SftpExceptionStatus">ProtocolError</see>.</value>
        </member>
        <member name="T:ComponentPro.Net.SftpFileType">
            <summary>
            Type of <see cref="T:ComponentPro.Net.SftpFileInfo"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.CharacterDevice">
            <summary>Character device.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.Directory">
            <summary>Directory.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.BlockDevice">
            <summary>Block device.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.RegularFile">
            <summary>Regular file.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.Symlink">
            <summary>Symbolic link.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFileType.Socket">
            <summary>Socket.</summary>
        </member>
        <member name="T:ComponentPro.Net.SftpFilePermissions">
            <summary>
            SFTP/Unix file permissions.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.OthersExecute">
            <summary>Others execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.OthersWrite">
            <summary>Others write.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.OthersRead">
            <summary>Others read.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.GroupExecute">
            <summary>Group execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.GroupWrite">
            <summary>Group write.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.GroupRead">
            <summary>Group read.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.OwnerExecute">
            <summary>Owner execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.OwnerWrite">
            <summary>Owner write.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.OwnerRead">
            <summary>Owner read.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.Sticky">
            <summary>Sticky.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.SetGid">
            <summary>Set GID bit.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpFilePermissions.SetUid">
            <summary>Set UID bit.</summary>
        </member>
        <member name="T:ComponentPro.Net.SftpFileAttributes">
            <summary>
            Represents file or directory attributes. It contains the following attributes: user and group id, permissions and modify time.
            </summary>
            <example source="SetFileAttr"/>
        </member>
        <member name="M:ComponentPro.Net.SftpFileAttributes.#ctor">
            <summary>
            Creates an instance of <see cref="T:ComponentPro.Net.SftpFileAttributes"/> class.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.UserId">
            <summary>
            Gets the user ID.
            </summary>
            <value>User ID.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.GroupId">
            <summary>
            Gets the group ID.
            </summary>
            <value>Group ID.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.Group">
            <summary>
            Gets the group.
            </summary>
            <value>Group.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.UserName">
            <summary>
            Gets the user.
            </summary>
            <value>User.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.Permissions">
            <summary>
            Gets or sets the Unix/SFTP permissions.
            </summary>
            <value>Permissions.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.LastWriteTime">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> of last modification (along with last access datetime).
            </summary>
            <value>The <see cref="T:System.DateTime"/> of last modification.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileAttributes.CreationTime">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> of the item creation. Only supported for SFTP v4 servers!
            </summary>
            <value>The <see cref="T:System.DateTime"/> of item creation.</value>
        </member>
        <member name="T:ComponentPro.Net.SftpFileInfo">
            <summary>
            Represents an SFTP file or directory on the remote server.
            </summary>
            <example source="GetFileInfo"/>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. Intended for advanced usage only.
            </summary>
            <param name="newFullName">The new full name.</param>
            <remarks>After this update, all properties of the class remain unchanged except the <see cref="P:ComponentPro.Net.SftpFileInfo.FullName"/> and <see cref="P:ComponentPro.Net.SftpFileInfo.Name"/> properties. To update the file, call the <see cref="M:ComponentPro.IO.AbstractFileInfo.Refresh"/> method.</remarks>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.#ctor(ComponentPro.Net.Sftp,System.String,ComponentPro.Net.SftpFileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpFileInfo"/>.
            </summary>
            <param name="fileSystem">The <see cref="T:ComponentPro.Net.Sftp"/> that the file belongs to.</param>
            <param name="fullPath">The fully qualified file path.</param>
            <param name="attrs">The <see cref="T:ComponentPro.Net.SftpFileAttributes">file attributes</see>.</param>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.#ctor(ComponentPro.Net.Sftp,System.String,System.Int64,ComponentPro.Net.SftpFileType,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:ComponentPro.Net.Sftp"/> that the file belongs to.</param>
            <param name="fullName">The fully qualified file path.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="accessed">The <see cref="T:System.DateTime"/> of last access.</param>
            <param name="modified">The <see cref="T:System.DateTime"/> of last modification.</param>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.#ctor(ComponentPro.Net.Sftp,System.String,System.Int64,ComponentPro.Net.SftpFileType,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SftpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:ComponentPro.Net.Sftp"/> that the file belongs to.</param>
            <param name="fullName">The fully qualified file path.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="accessed">The <see cref="T:System.DateTime"/> of last access.</param>
            <param name="modified">The <see cref="T:System.DateTime"/> of last modification.</param>
            <param name="created">The <see cref="T:System.DateTime"/> of item creation. Only supported for SFTP v4 servers!</param>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.IsSameAs(ComponentPro.IO.AbstractFileInfo)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="info">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode.
            </summary>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise new content will be appended to the end of the file.</param>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="M:ComponentPro.Net.SftpFileInfo.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.RawName">
            <summary>
            Gets the long name of the file.
            </summary>
            <remarks>
            The long name of a file is in a form of:<br/>
            -rwxr-xr-x   1 mjos     file      897811 Mar 68 12:39 t-filexfer
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.Attributes">
            <summary>
            Gets the file attributes. Only <see cref="T:System.IO.FileAttributes">Directory</see> and <see cref="T:System.IO.FileAttributes">Normal</see> are used.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.FullName">
            <summary>
            Gets the fully qualified path name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.FileSystem">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Sftp"/> that the file belongs to.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
            <value>The name of the file or directory.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.Length">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.UserId">
            <summary>
            Gets the user ID of the file.
            </summary>
            <value>User ID.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.GroupId">
            <summary>
            Gets the group ID of the file.
            </summary>
            <value>Group ID.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.User">
            <summary>
            Gets the owner of the file.
            </summary>
            <value>Owner.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.Group">
            <summary>
            Gets the group of the file.
            </summary>
            <value>Group.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.Permissions">
            <summary>
            Gets the Unix/SFTP permissions.
            </summary>
            <value>Permissions.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.LastAccessTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> of last access or DateTime.MinValue if not available.
            </summary>
            <value>The <see cref="T:System.DateTime"/> of last access.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.LastWriteTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> of last modification or DateTime.MinValue if not available.
            </summary>
            <value>The <see cref="T:System.DateTime"/> of last modification.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.CreationTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> of item creation or DateTime.MinValue if not available.
            </summary>
            <value>The <see cref="T:System.DateTime"/> of item creation.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.FileType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.IsDirectory">
            <summary>
            Gets the flag indicating whether the item might be a directory.
            </summary>
            <value>True if the item might be a directory.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.IsFile">
            <summary>
            Gets the flag indicating whether the item might be a file.
            </summary>
            <value>True if the item might be a file.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpFileInfo.IsSymlink">
            <summary>
            Gets the flag indicating whether the item is a symlink.
            </summary>
            <value>True if the item is a symlink.</value>
        </member>
        <member name="T:ComponentPro.Net.SftpFileInfoCollection">
            <summary>
            Provides a container for a collection of <see cref="T:ComponentPro.Net.SftpFileInfo"/> objects.
            </summary>
            <example source="ListDirectory"/>	
        </member>
        <member name="T:ComponentPro.Net.SftpErrorCode">
            <summary>
            SFTP internal error code.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.UnknownError">
            <summary>Unknown error.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.EndOfFile">
            <summary>End of file.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.NoSuchFile">
            <summary>No such file</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.PermissionDenied">
            <summary>Permission denied.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.Failure">
            <summary>Failure.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.BadMessage">
            <summary>Bad message.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.NoConnection">
            <summary>No connection.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.ConnectionLost">
            <summary>Connection lost.</summary>
        </member>
        <member name="F:ComponentPro.Net.SftpErrorCode.UnsupportedOperation">
            <summary>Unsupported operation.</summary>
        </member>
        <member name="T:ComponentPro.Net.SftpConnectionState">
            <summary>
            Represents the <see cref="T:ComponentPro.Net.Sftp">Sftp</see> object connection state.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SftpConnectionState.Connected">
            <summary>
            Returns a value indicating whether the object is connected.
            </summary>
            <value>True if connected; otherwise false.</value>
        </member>
        <member name="P:ComponentPro.Net.SftpConnectionState.NativeErrorCode">
            <summary>
            Gets the Win32 socket error code.
            </summary>
            <value>Win32 error code.</value>
            <remarks>Returns 0 if no socket error code is available.</remarks>
        </member>
        <member name="T:ComponentPro.Licensing.Sftp.UltimateLicenseExceptionStatus">
            <summary>
            License check status.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:ComponentPro.Licensing.Sftp.UltimateLicenseExceptionStatus.InvalidKey">
            <summary>
            Invalid license key.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Sftp.UltimateLicenseExceptionStatus.InvalidDate">
            <summary>
            Expiry date is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Sftp.UltimateLicenseExceptionStatus.LicenseExpired">
            <summary>
            License is expired.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Sftp.UltimateLicenseException">
            <summary>Represents the License Exception.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Sftp.UltimateLicenseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Sftp.UltimateLicenseException"></see> class with the specified error message.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
        </member>
        <member name="M:ComponentPro.Licensing.Sftp.UltimateLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Sftp.UltimateLicenseException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes. </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information required to serialize the new <see cref="T:ComponentPro.Licensing.Sftp.UltimateLicenseException"></see>. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source and destination of the serialized stream associated with the new instance. </param>
        </member>
        <member name="M:ComponentPro.Licensing.Sftp.UltimateLicenseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Sftp.UltimateLicenseException"></see> class with the specified error message and inner exception.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="P:ComponentPro.Licensing.Sftp.UltimateLicenseException.Status">
            <summary>Gets the error code.</summary>
            <returns>An <see cref="T:ComponentPro.Licensing.Sftp.UltimateLicenseExceptionStatus"></see> value that indicates the error that occurred.</returns>
        </member>
        <member name="T:ComponentPro.Licensing.Sftp.UltimateLicenseManager">
            <summary>
            ComponentPro License Manager.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Sftp.UltimateLicenseManager.SetLicenseKey(System.String)">
            <summary>
            Sets the trial license key.
            </summary>
            <param name="licenseKey">The license key string.</param>
        </member>
        <member name="P:ComponentPro.Licensing.Sftp.UltimateLicenseManager.RemainingDays">
            <summary>
            Gets remaining trial days.
            </summary>
        </member>
    </members>
</doc>
